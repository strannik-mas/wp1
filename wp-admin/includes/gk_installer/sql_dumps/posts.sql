






INSERT INTO `{$table_prefix}posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES (726,1,'2012-08-13 08:52:31','2012-08-13 08:52:31','You can download it from our Download Area','December wallpaper','It is our December 2011 Wallpaper available for free download','inherit','open','open','','dec_wallpaper','','','2012-08-13 08:52:31','2012-08-13 08:52:31','',121,'{$page_url}/wp-content/uploads/2012/08/dec_wallpaper.jpeg',0,'attachment','image/jpeg',0),(13,1,'2011-08-12 13:08:03','2011-08-12 13:08:03','It is a simple description','Bigger Gavick Logo','It is a simple caption','inherit','open','open','','logo_gavick_bigger','','','2011-08-12 13:08:03','2011-08-12 13:08:03','',0,'{$page_url}/wp-content/uploads/2011/08/logo_gavick_bigger.jpg',0,'attachment','image/jpeg',0),(59,1,'2011-12-29 11:33:10','2011-12-29 11:33:10',' ','','','publish','open','open','','59','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=59',8,'nav_menu_item','',0),(330,1,'2012-07-08 09:30:56','2012-07-08 09:30:56','Gavern Framework has a quite extensive files structure. It is similar to a standard structure of majority of the themes, however, because of many functionalities, there are some new elements.\r\n\r\n<!--more-->\r\n\r\nThe overall outline of files structure is presented below:\r\n<ol>\r\n	<li><strong>theme\'s catalog</strong>\r\n<small>It includes all basic files and catalogs for a theme. It is worth seeing that Custom Pages templats have a <strong>theme.</strong> prefix at the beginning of their names which helps to find them in files structure.</small>\r\n<ol>\r\n	<li><strong>css</strong>\r\n<small>There are all CSS theme\'s files in it. They are described in details in an entry about framework\'s CSS code.\r\n</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>To have everything ordered, CSS files connected with an administration panel were placed in this catalog.\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>fonts</strong>\r\n<small>This catalog is used for storing files with additional fonts. You have to remember that each font must have its own catalog including a stylesheet.css file. More information about fonts service can be found in an entry about <strong>Fonts</strong> in an administration panel.<strong></strong>\r\n</small></li>\r\n	<li><strong>gavern</strong>\r\n<small>A catalog including the base of whole GavernWP framework work.\r\n</small>\r\n<ol>\r\n	<li><strong>classes</strong>\r\n<small>Files with supporting classes used in framework\'s code.\r\n</small></li>\r\n	<li><strong>config</strong>\r\n<small>Files including framework\'s configuration. It has to be remembered that there are additional catalogs used for making transalations.\r\n</small></li>\r\n	<li><strong>form_elements</strong>\r\n<small>It includes a main file with a code which generates basic form elements in an administration panel, as well as, catalogs with elements created by a user.\r\n</small></li>\r\n	<li><strong>helpers</strong>\r\n<small>A collection of classes connected with specific framework\'s tasks, e.g. with generating layout fragments.\r\n</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Files used for generating HTML code of an administration panel.\r\n</small></li>\r\n	<li><strong>options</strong>\r\n<small>Files which store options of particular sections of theme\'s administration panel. Similarly to <strong>config</strong> catalog; there are also additional catalogs used for making translations.<strong></strong>\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>images</strong>\r\n<small>Graphic files used with a theme\r\n</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Files connected with an administration panel.\r\n</small></li>\r\n	<li><strong>headers</strong>\r\n<small>Default header\'s images.\r\n</small></li>\r\n	<li><strong>post_formats</strong>\r\n<small>Images connected with entries formats.\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>js</strong>\r\n<small>JavaScript scripts files used in a thme\r\n</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Likewise in <strong>css</strong> and <strong>images</strong> catalogs there are files included used in an administration panel.<strong></strong><strong></strong>\r\n</small></li>\r\n	<li><strong>templates</strong>\r\n<small>Additional JavaScript files used by some Custom Pages.\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>languages</strong>\r\n<small>Main files used for creating translations.\r\n</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Files used for generating subpages; they include elements which are used very often; e.g. a head section.\r\n</small></li>\r\n</ol>\r\n</li>\r\n</ol>\r\n&nbsp;','Framework structure','','publish','open','open','','framework-structure-2','','','2012-08-12 17:59:18','2012-08-12 17:59:18','',0,'{$page_url}/?p=330',0,'post','',0),(107,1,'2012-05-15 14:14:40','2012-05-15 14:14:40','It is an example page with archive links.','Archive Page','','publish','open','closed','','archive-page','','','2013-01-06 18:15:58','2013-01-06 18:15:58','',0,'{$page_url}/?page_id=107',0,'page','',0),(586,1,'2012-08-10 20:26:51','2012-08-10 20:26:51','Artykuły opisujące opcje szablonu dostępne poprzez panel administracyjny oraz sposób ich konfiguracji.','','','publish','open','open','','586','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=586',13,'nav_menu_item','',0),(584,1,'2012-08-10 20:22:15','2012-08-10 20:22:15',' ','','','publish','open','open','','584','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=584',21,'nav_menu_item','',0),(585,1,'2012-08-10 20:25:42','2012-08-10 20:25:42','','Framework','','publish','open','open','','framework','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=585',10,'nav_menu_item','',0),(587,1,'2012-08-10 20:26:51','2012-08-10 20:26:51','GavernWP w skrócie – najważniejsze zagadnienia i funkcjonalności omówione w przystępnej formie.','','','publish','open','open','','587','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=587',11,'nav_menu_item','',0),(588,1,'2012-08-10 20:26:51','2012-08-10 20:26:51','Kategoria zawierająca artykuły opisujące główne funkcjonalności szablonu: typografię, responsive layout, reguły i style dla widżetów itd.','','','publish','open','open','','588','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=588',12,'nav_menu_item','',0),(57,1,'2011-12-27 00:25:00','2011-12-27 00:25:00','','Login test','','inherit','open','open','','56-revision','','','2011-12-27 00:25:00','2011-12-27 00:25:00','',56,'{$page_url}/?p=57',0,'revision','',0),(56,1,'2011-12-27 00:25:03','2011-12-27 00:25:03','It is an example login page where the login form is displayed.','Login page','','publish','open','closed','','login-page','','','2012-08-11 09:39:33','2012-08-11 09:39:33','',0,'{$page_url}/?page_id=56',0,'page','',0),(76,1,'2012-01-18 20:37:05','2012-01-18 20:37:05',' ','','','publish','open','open','','76','','','2012-11-20 14:47:02','2012-11-20 14:47:02','',0,'{$page_url}/?p=76',4,'nav_menu_item','',0),(75,1,'2012-01-18 20:36:01','2012-01-18 20:36:01','','Contact us','','inherit','open','open','','74-revision','','','2012-01-18 20:36:01','2012-01-18 20:36:01','',74,'{$page_url}/?p=75',0,'revision','',0),(74,1,'2012-01-18 20:36:26','2012-01-18 20:36:26','Hello, feel free to write us your opinion/suggestions about our theme ;-)','Contact page','','publish','open','open','','contact-page','','','2012-08-12 17:26:05','2012-08-12 17:26:05','',0,'{$page_url}/?page_id=74',0,'page','',0),(72,1,'2012-01-18 14:52:34','2012-01-18 14:52:34','Lorem ipsum ;)','Login test','','inherit','open','open','','56-autosave','','','2012-01-18 14:52:34','2012-01-18 14:52:34','',56,'{$page_url}/?p=72',0,'revision','',0),(123,1,'2012-05-24 20:00:50','2012-05-24 20:00:50',' ','','','publish','open','open','','123','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=123',6,'nav_menu_item','',0),(729,1,'2012-08-26 07:17:13','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-26 07:17:13','0000-00-00 00:00:00','',0,'{$page_url}/?p=729',0,'post','',0),(730,1,'2012-08-26 07:33:20','2012-08-26 07:33:20','test','test','','publish','closed','closed','','test','','','2012-08-26 07:33:20','2012-08-26 07:33:20','',0,'{$page_url}/?post_type=portfolio&#038;p=730',0,'portfolio','',0),(728,1,'2012-08-13 08:53:18','2012-08-13 08:53:18','You can download it from our Download Area','October wallpaper','It is our October 2011 Wallpaper available for free download','inherit','open','open','','oct_wallpaper','','','2012-08-13 08:53:18','2012-08-13 08:53:18','',121,'{$page_url}/wp-content/uploads/2012/08/oct_wallpaper.jpeg',0,'attachment','image/jpeg',0),(114,1,'2013-02-05 21:04:54','2013-02-05 21:04:54','It is an example of the template tag cloud.','Tag cloud page','','inherit','open','open','','112-autosave','','','2013-02-05 21:04:54','2013-02-05 21:04:54','',112,'{$page_url}/?p=114',0,'revision','',0),(115,1,'2012-05-24 12:34:02','2012-05-24 12:34:02',' ','','','publish','open','open','','115','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=115',9,'nav_menu_item','',0),(131,1,'2012-06-11 14:01:53','2012-06-11 14:01:53','It is an example full width page - there is no sidebar.\r\n\r\nDonec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Donec sed odio dui. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit libero, a pharetra augue. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Aenean lacinia bibendum nulla sed consectetur. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit. Vestibulum id ligula porta felis euismod semper. Donec id elit non mi porta gravida at eget metus. Donec ullamcorper nulla non metus auctor fringilla. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Curabitur blandit tempus porttitor. Donec sed odio dui. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Curabitur blandit tempus porttitor. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras mattis consectetur purus sit amet fermentum. Curabitur blandit tempus porttitor. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nulla vitae elit libero, a pharetra augue. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec sed odio dui. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Lorem ipsum dolor sit amet, consectetur adipiscing elit.','Full width page','','publish','open','closed','','full-width-page','','','2012-08-11 09:38:13','2012-08-11 09:38:13','',0,'{$page_url}/?page_id=131',0,'page','',0),(121,1,'2012-05-24 20:00:40','2012-05-24 20:00:40','It is an example gallery page.\r\n\r\n[notice]<strong>Tip:</strong> to create the gallery please use attachments from the Media library.[/notice]','Gallery page','','publish','open','closed','','gallery-page','','','2013-01-24 12:06:38','2013-01-24 12:06:38','',0,'{$page_url}/?page_id=121',0,'page','',0),(109,1,'2012-05-15 14:14:56','2012-05-15 14:14:56',' ','','','publish','open','open','','109','','','2012-11-20 14:47:02','2012-11-20 14:47:02','',0,'{$page_url}/?p=109',3,'nav_menu_item','',0),(113,1,'2012-05-24 12:32:11','2012-05-24 12:32:11','','Tag cloud','','inherit','open','open','','112-revision','','','2012-05-24 12:32:11','2012-05-24 12:32:11','',112,'{$page_url}/?p=113',0,'revision','',0),(112,1,'2012-05-24 12:32:40','2012-05-24 12:32:40','It is an example of the template tag cloud.','Tag cloud page','','publish','open','closed','','tag-cloud-page','','','2012-08-11 09:39:57','2012-08-11 09:39:57','',0,'{$page_url}/?page_id=112',0,'page','',0),(124,1,'2011-12-27 00:25:03','2011-12-27 00:25:03','Lorem ipsum ;)','Login test','','inherit','open','open','','56-revision-2','','','2011-12-27 00:25:03','2011-12-27 00:25:03','',56,'{$page_url}/?p=124',0,'revision','',0),(125,1,'2012-01-18 20:36:26','2012-01-18 20:36:26','Hello Mate :) Feel free to write us your opinion about our amazing template :)','Contact us','','inherit','open','open','','74-revision-2','','','2012-01-18 20:36:26','2012-01-18 20:36:26','',74,'{$page_url}/?p=125',0,'revision','',0),(127,1,'2012-06-06 12:19:54','2012-06-06 12:19:54','','Home','','publish','open','open','','home','','','2012-11-20 14:47:02','2012-11-20 14:47:02','',0,'{$page_url}/?p=127',1,'nav_menu_item','',0),(130,1,'2013-01-06 18:20:29','2013-01-06 18:20:29','It is an example page with archive links.','Archive Page','','inherit','open','open','','107-autosave','','','2013-01-06 18:20:29','2013-01-06 18:20:29','',107,'{$page_url}/?p=130',0,'revision','',0),(132,1,'2012-06-11 14:01:44','2012-06-11 14:01:44','','Full width','','inherit','open','open','','131-revision','','','2012-06-11 14:01:44','2012-06-11 14:01:44','',131,'{$page_url}/?p=132',0,'revision','',0),(133,1,'2012-06-12 13:56:24','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-12 13:56:24','0000-00-00 00:00:00','',0,'{$page_url}/?p=133',0,'post','',0),(137,1,'2012-06-14 12:30:38','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-14 12:30:38','0000-00-00 00:00:00','',0,'{$page_url}/?p=137',0,'post','',0),(731,1,'2012-08-26 07:33:22','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-26 07:33:22','0000-00-00 00:00:00','',0,'{$page_url}/?post_type=portfolio&p=731',0,'portfolio','',0),(732,1,'2012-08-26 07:33:29','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-26 07:33:29','0000-00-00 00:00:00','',0,'{$page_url}/?post_type=portfolio&p=732',0,'portfolio','',0),(802,1,'2013-01-06 18:15:40','2013-01-06 18:15:40','It is an example page with archive links.','Archive Page','','inherit','open','open','','107-revision-3','','','2013-01-06 18:15:40','2013-01-06 18:15:40','',107,'{$page_url}/uncategorized/107-revision-3/',0,'revision','',0),(727,1,'2012-08-13 08:53:15','2012-08-13 08:53:15','You can download it from our Download Area','November wallpaper','It is our November 2011 Wallpaper available for free download','inherit','open','open','','nov_wallpaper','','','2012-08-13 08:53:15','2012-08-13 08:53:15','',121,'{$page_url}/wp-content/uploads/2012/08/nov_wallpaper.jpeg',0,'attachment','image/jpeg',0),(183,1,'2012-06-25 11:06:29','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:06:29','0000-00-00 00:00:00','',0,'{$page_url}/?p=183',0,'post','',0),(184,1,'2012-06-25 11:08:09','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:08:09','0000-00-00 00:00:00','',0,'{$page_url}/?p=184',0,'post','',0),(185,1,'2012-06-25 11:08:37','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:08:37','0000-00-00 00:00:00','',0,'{$page_url}/?p=185',0,'post','',0),(186,1,'2012-06-25 11:09:24','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:09:24','0000-00-00 00:00:00','',0,'{$page_url}/?p=186',0,'post','',0),(187,1,'2012-06-25 11:10:51','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:10:51','0000-00-00 00:00:00','',0,'{$page_url}/?p=187',0,'post','',0),(188,1,'2012-06-25 11:11:18','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:11:18','0000-00-00 00:00:00','',0,'{$page_url}/?p=188',0,'post','',0),(189,1,'2012-06-25 11:11:42','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:11:42','0000-00-00 00:00:00','',0,'{$page_url}/?p=189',0,'post','',0),(190,1,'2012-06-25 11:15:30','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:15:30','0000-00-00 00:00:00','',0,'{$page_url}/?p=190',0,'post','',0),(191,1,'2012-06-25 11:16:20','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:16:20','0000-00-00 00:00:00','',0,'{$page_url}/?p=191',0,'post','',0),(192,1,'2012-06-25 11:23:21','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:23:21','0000-00-00 00:00:00','',0,'{$page_url}/?p=192',0,'post','',0),(193,1,'2012-06-25 11:24:02','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:24:02','0000-00-00 00:00:00','',0,'{$page_url}/?p=193',0,'post','',0),(194,1,'2012-06-25 11:28:15','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:28:15','0000-00-00 00:00:00','',0,'{$page_url}/?p=194',0,'post','',0),(195,1,'2012-06-25 11:28:42','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:28:42','0000-00-00 00:00:00','',0,'{$page_url}/?p=195',0,'post','',0),(196,1,'2012-06-25 11:28:53','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:28:53','0000-00-00 00:00:00','',0,'{$page_url}/?p=196',0,'post','',0),(197,1,'2012-06-25 11:29:30','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:29:30','0000-00-00 00:00:00','',0,'{$page_url}/?p=197',0,'post','',0),(198,1,'2012-06-25 11:29:40','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:29:40','0000-00-00 00:00:00','',0,'{$page_url}/?p=198',0,'post','',0),(199,1,'2012-06-25 11:29:57','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:29:57','0000-00-00 00:00:00','',0,'{$page_url}/?p=199',0,'post','',0),(200,1,'2012-06-25 11:30:17','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:30:17','0000-00-00 00:00:00','',0,'{$page_url}/?p=200',0,'post','',0),(201,1,'2012-06-25 11:31:12','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:31:12','0000-00-00 00:00:00','',0,'{$page_url}/?p=201',0,'post','',0),(202,1,'2012-06-25 11:31:20','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:31:20','0000-00-00 00:00:00','',0,'{$page_url}/?p=202',0,'post','',0),(203,1,'2012-06-25 11:31:28','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:31:28','0000-00-00 00:00:00','',0,'{$page_url}/?p=203',0,'post','',0),(204,1,'2012-06-25 11:31:33','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:31:33','0000-00-00 00:00:00','',0,'{$page_url}/?p=204',0,'post','',0),(205,1,'2012-06-25 11:32:37','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:32:37','0000-00-00 00:00:00','',0,'{$page_url}/?p=205',0,'post','',0),(206,1,'2012-06-25 11:33:43','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-25 11:33:43','0000-00-00 00:00:00','',0,'{$page_url}/?p=206',0,'post','',0),(207,1,'2012-06-25 11:42:54','2012-06-25 11:42:54','GavernWP allows to access a lot of additional typography elements created with <a title=\"Shortcode API\" href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> use. The use is very simple thanks to <a title=\"Typography button\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-features/typography-button/\" target=\"_blank\">an additional button</a> in a posts editor. A typography description from a programistic side has been divided into two parts, namely: <a title=\"Typography API\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/template-api/typography-api/\">front-end</a> and <a title=\"Typography API – back-end\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-api/typography-api-back-end/\">back-end</a>.\r\n\r\nBelow, there are all elements available in theme\'s typography. Typography elements can be divided into three main groups:\r\n<ul>\r\n	<li>typography elements,</li>\r\n	<li>interactive elements,</li>\r\n	<li>elements prepared especially for a particular theme.</li>\r\n</ul>\r\n<h2>Warnings / Infos / Notices / Errors</h2>\r\nThese elements are used for highlighting text fragments together with their importance / type of information by using appropriate colors.\r\n\r\n[warning]Warning text example using Shortcodes[/warning]\r\n\r\n[info]Info text example using Shortcodes[/info]\r\n\r\n[notice]Notice text example using Shortcodes[/notice]\r\n\r\n[error]Error text example using Shortcodes[/error]\r\n<h2>Labels</h2>\r\nLabels are useful for marking the importance of the text fragment or a word given. In the case of longer texts, we recommend to use elements from <em>Warnings / Infos / Notices</em> group.\r\n\r\nThis is a paragraph with the [label style=\"1\"]labeled text[/label] using the first style.\r\n\r\nThis is a paragraph with the [label style=\"2\"]labeled text[/label] using the second style.\r\n\r\nThis is a paragraph with the [label style=\"3\"]labeled text[/label] using the third style.\r\n\r\nThis is a paragraph with the [label style=\"4\"]labeled text[/label] using the fourth style.\r\n\r\nThis is a paragraph with the [label style=\"5\"]labeled text[/label] using the fifth style.\r\n\r\nThis is a paragraph with the [label style=\"6\"]labeled text[/label] using the sixth style.\r\n<h2>Badges</h2>\r\nBadges in their look are similar to Labels, however, you may use them mainly for highlighting shorter texts, e.g. numerical values.\r\n\r\nThis is a paragraph with the badge [badge style=\"1\"]12[/badge] using the first style.\r\n\r\nThis is a paragraph with the badge [badge style=\"2\"]12[/badge] using the second style.\r\n\r\nThis is a paragraph with the badge [badge style=\"3\"]12[/badge] using the third style.\r\n\r\nThis is a paragraph with the badge [badge style=\"4\"]12[/badge] using the fourth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"5\"]12[/badge] using the fifth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"6\"]12[/badge] using the sixth style.\r\n<h2>Code listings</h2>\r\nWe recommend to use an element creating code listings in one out of three styles available for presenting source codes:\r\n\r\n[code style=\"1\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"2\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"3\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n<h2>Text blocks</h2>\r\nText blocks are useful for generating an element highlighting a particular part of an  entry:\r\n\r\n[textblock style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[numblock num=\"01\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"02\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"03\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"04\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"left\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"right\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. [floated align=\"center\"]Lorem ipsum dolor sit amet[/floated] Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\r\n<h2>Quote and Citations</h2>\r\nQuotes elements are useful for highlighting the author of a sentence given:\r\n\r\n[quote style=\"1\" author=\"Author\"]The content of the quote in style 1[/quote]\r\n\r\n[quote style=\"2\" author=\"Author\"]The content of the quote in style 2[/quote]\r\n\r\n[quote style=\"3\" author=\"Author\"]The content of the quote in style 3[/quote]\r\n\r\n[quote style=\"4\" author=\"Author\"]The content of the quote in style 4[/quote]\r\n\r\n[quote style=\"5\" author=\"Author\"]The content of the quote in style 5[/quote]\r\n<h2>Dropcap</h2>\r\nElements creating the first letter highlighted:\r\n\r\n[dropcap style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n<h2>Lists</h2>\r\nOrdered and unordered lists:\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[olist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n</div>\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[ulist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n</div>\r\n<h2>Buttons</h2>\r\nButtons in many different variations:\r\n\r\n[button style=\"1\"]Your text[/button] [button style=\"2\"]Your text[/button] [button style=\"3\"]Your text[/button] [button style=\"4\"]Your text[/button] [button style=\"5\"]Your text[/button] [button style=\"6\"]Your text[/button] [button style=\"7\"]Your text[/button]\r\n\r\nThe same buttons as links:\r\n\r\n[button style=\"1\" url=\"#\"]Your text[/button] [button style=\"2\" url=\"#\"]Your text[/button] [button style=\"3\" url=\"#\"]Your text[/button] [button style=\"4\" url=\"#\"]Your text[/button] [button style=\"5\" url=\"#\"]Your text[/button] [button style=\"6\" url=\"#\"]Your text[/button] [button style=\"7\" url=\"#\"]Your text[/button]\r\n\r\n<h2>Legends</h2>\r\nElements with legend useful while creating text blocks in a frame provided with an appropriate title.\r\n\r\n[legend title=\"Legend style 1\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 2\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 3\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 4\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 5\" style=\"5\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n<h2>Raw text</h2>\r\nAn element useful for generating text without formatting:\r\n\r\n[raw]Your text[/raw]\r\n<h2>Tooltips</h2>\r\nTooltips may occur in two forms: a link to a different website with a tooltip or a text connected with the text:\r\n\r\n[tip label=\"Default style\" style=\"1\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Blue style\" style=\"2\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Red style\" style=\"3\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Green style\" style=\"4\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Yellow style\" style=\"5\" href=\"URL\"]Text of the tooltip[/tip]\r\n<h2>Other typography elements</h2>\r\nElements which could not be groupped to other categories.\r\n\r\nColumns allow to place text in multicolumn layout:\r\n\r\n[columns]\r\n[column]Content for the first column[/column]\r\n[column]Content for the second column[/column]\r\n[column]Content for the third column[/column]\r\n[/columns]\r\n\r\nYou can also adjust the columns width using the <strong>width</strong> attribute:\r\n\r\n[columns width=\"50,25,25\"]\r\n[column]Content for the first column[/column]\r\n[column]Content for the second column[/column]\r\n[column]Content for the third column[/column]\r\n[/columns]\r\n\r\nToggle text - elements useful for creating blocks with text to toggle:\r\n\r\n[toggle header=\"Header text\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\n[toggle header=\"Header text\" open=\"true\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\nShortcode pageurl allows to place an address to a blog:\r\n\r\n[pageurl]\r\n\r\nA link to a RSS channel:\r\n\r\n[rss href=\"URL\"]Link text[/rss]\r\n\r\nA link to a PDF document:\r\n\r\n[pdf url=\"URL\"]Text of the link[/pdf]\r\n\r\nA private note in an entry, visible for an author only:\r\n\r\n[note]Your private note[/note]\r\n\r\nMail illegible for bots creating data bases for spammers:\r\n\r\n[mail]email.to@obfuscate.com[/mail]\r\n\r\nContent visible for logged in users only:\r\n<div class=\"gk-members\"><strong>Members only</strong>Content for the members only</div>\r\nRelated posts:\r\n\r\n[related limit=\"5\"]','Typography','','publish','open','open','','typography','','','2012-10-05 12:35:13','2012-10-05 12:35:13','',0,'{$page_url}/?p=207',0,'post','',0),(213,1,'2012-09-10 09:40:36','2012-09-10 09:40:36','GavernWP allows to access a lot of additional typography elements created with <a title=\"Shortcode API\" href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> use. The use is very simple thanks to <a title=\"Typography button\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-features/typography-button/\" target=\"_blank\">an additional button</a> in a posts editor. A typography description from a programistic side has been divided into two parts, namely: <a title=\"Typography API\" href=\"{$page_url}/template-api/typography-api/\">front-end</a> and <a title=\"Typography API – back-end\" href=\"{$page_url}/back-end-api/typography-api-back-end/\">back-end</a>.\n\nBelow, there are all elements available in theme\'s typography. Typography elements can be divided into three main groups:\n<ul>\n	<li>typography elements,</li>\n	<li>interactive elements,</li>\n	<li>elements prepared especially for a particular theme.</li>\n</ul>\n<h2>Warnings / Infos / Notices / Errors</h2>\nThese elements are used for highlighting text fragments together with their importance / type of information by using appropriate colors.\n\n[warning]Warning text example using Shortcodes[/warning]\n\n[info]Info text example using Shortcodes[/info]\n\n[notice]Notice text example using Shortcodes[/notice]\n\n[error]Error text example using Shortcodes[/error]\n<h2>Labels</h2>\nLabels are useful for marking the importance of the text fragment or a word given. In the case of longer texts, we recommend to use elements from <em>Warnings / Infos / Notices</em> group.\n\nThis is a paragraph with the [label style=\"1\"]labeled text[/label] using the first style.\n\nThis is a paragraph with the [label style=\"2\"]labeled text[/label] using the second style.\n\nThis is a paragraph with the [label style=\"3\"]labeled text[/label] using the third style.\n\nThis is a paragraph with the [label style=\"4\"]labeled text[/label] using the fourth style.\n\nThis is a paragraph with the [label style=\"5\"]labeled text[/label] using the fifth style.\n\nThis is a paragraph with the [label style=\"6\"]labeled text[/label] using the sixth style.\n<h2>Badges</h2>\nBadges in their look are similar to Labels, however, you may use them mainly for highlighting shorter texts, e.g. numerical values.\n\nThis is a paragraph with the badge [badge style=\"1\"]12[/badge] using the first style.\n\nThis is a paragraph with the badge [badge style=\"2\"]12[/badge] using the second style.\n\nThis is a paragraph with the badge [badge style=\"3\"]12[/badge] using the third style.\n\nThis is a paragraph with the badge [badge style=\"4\"]12[/badge] using the fourth style.\n\nThis is a paragraph with the badge [badge style=\"5\"]12[/badge] using the fifth style.\n\nThis is a paragraph with the badge [badge style=\"6\"]12[/badge] using the sixth style.\n<h2>Code listings</h2>\nWe recommend to use an element creating code listings in one out of three styles available for presenting source codes:\n\n[code style=\"1\"]function helloWorld() {\n\nalert(\'Hello World!\');\n\n}[/code]\n\n[code style=\"2\"]function helloWorld() {\n\nalert(\'Hello World!\');\n\n}[/code]\n\n[code style=\"3\"]function helloWorld() {\n\nalert(\'Hello World!\');\n\n}[/code]\n<h2>Text blocks</h2>\nText blocks are useful for generating an element highlighting a particular part of an  entry:\n\n[textblock style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\n\n[textblock style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\n\n[textblock style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\n\n[textblock style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\n\n[numblock num=\"01\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\n\n[numblock num=\"02\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\n\n[numblock num=\"03\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\n\n[numblock num=\"04\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\n\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"left\"]Lorem ipsum dolor sit amet[/floated]\n\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"right\"]Lorem ipsum dolor sit amet[/floated]\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. [floated align=\"center\"]Lorem ipsum dolor sit amet[/floated] Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\n<h2>Quote and Citations</h2>\nQuotes elements are useful for highlighting the author of a sentence given:\n\n[quote style=\"1\" author=\"Author\"]The content of the quote in style 1[/quote]\n\n[quote style=\"2\" author=\"Author\"]The content of the quote in style 2[/quote]\n\n[quote style=\"3\" author=\"Author\"]The content of the quote in style 3[/quote]\n\n[quote style=\"4\" author=\"Author\"]The content of the quote in style 4[/quote]\n\n[quote style=\"5\" author=\"Author\"]The content of the quote in style 5[/quote]\n<h2>Dropcap</h2>\nElements creating the first letter highlighted:\n\n[dropcap style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\n\n[dropcap style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\n\n[dropcap style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\n<h2>Lists</h2>\nOrdered and unordered lists:\n<div class=\"gk-columns\" data-column-count=\"4\">\n<div>[olist style=\"1\"]\nitem1\nitem2\nitem3\n[/olist]</div>\n<div>[olist style=\"2\"]\nitem1\nitem2\nitem3\n[/olist]</div>\n<div>[olist style=\"3\"]\nitem1\nitem2\nitem3\n[/olist]</div>\n<div>[olist style=\"4\"]\nitem1\nitem2\nitem3\n[/olist]</div>\n</div>\n<div class=\"gk-columns\" data-column-count=\"4\">\n<div>[ulist style=\"1\"]\nitem1\nitem2\nitem3\n[/ulist]</div>\n<div>[ulist style=\"2\"]\nitem1\nitem2\nitem3\n[/ulist]</div>\n<div>[ulist style=\"3\"]\nitem1\nitem2\nitem3\n[/ulist]</div>\n<div>[ulist style=\"4\"]\nitem1\nitem2\nitem3\n[/ulist]</div>\n</div>\n<h2>Buttons</h2>\nButtons in many different variations:\n\n[button style=\"1\"]Your text[/button] [button style=\"2\"]Your text[/button] [button style=\"3\"]Your text[/button] [button style=\"4\"]Your text[/button] [button style=\"5\"]Your text[/button] [button style=\"6\"]Your text[/button] [button style=\"7\"]Your text[/button]\n<h2>Legends</h2>\nElements with legend useful while creating text blocks in a frame provided with an appropriate title.\n\n[legend title=\"Legend style 1\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\n\n[legend title=\"Legend style 2\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\n\n[legend title=\"Legend style 3\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\n\n[legend title=\"Legend style 4\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\n\n[legend title=\"Legend style 5\" style=\"5\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\n<h2>Raw text</h2>\nAn element useful for generating text without formatting:\n\n[raw]Your text[/raw]\n<h2>Tooltips</h2>\nTooltips may occur in two forms: a link to a different website with a tooltip or a text connected with the text:\n\n[tip label=\"Default style\" style=\"1\" href=\"URL\"]Text of the tooltip[/tip]\n\n[tip label=\"Blue style\" style=\"2\" href=\"URL\"]Text of the tooltip[/tip]\n\n[tip label=\"Red style\" style=\"3\" href=\"URL\"]Text of the tooltip[/tip]\n\n[tip label=\"Green style\" style=\"4\" href=\"URL\"]Text of the tooltip[/tip]\n\n[tip label=\"Yellow style\" style=\"5\" href=\"URL\"]Text of the tooltip[/tip]\n<h2>Other typography elements</h2>\nElements which could not be groupped to other categories.\n\nColumns allow to place text in multicolumn layout:\n\n[columns]\n[column]Content for the first column[/column]\n[column]Content for the second column[/column]\n[column]Content for the third column[/column]\n[/columns]\n\nToggle text - elements useful for creating blocks with text to toggle:\n\n[toggle header=\"Header text\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\n\n[toggle header=\"Header text\" open=\"true\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\n\nShortcode pageurl allows to place an address to a blog:\n\n[pageurl]\n\nA link to a RSS channel:\n\n[rss href=\"URL\"]Link text[/rss]\n\nA link to a PDF document:\n\n[pdf url=\"URL\"]Text of the link[/pdf]\n\nA private note in an entry, visible for an author only:\n\n[note]Your private note[/note]\n\nMail illegible for bots creating data bases for spammers:\n\n[mail]email.to@obfuscate.com[/mail]\n\nContent visible for logged in users only:\n<div class=\"gk-members\"><strong>Members only</strong>Content for the members only</div>\nRelated posts:\n\n[related limit=\"5\"]','Typography','','inherit','open','open','','207-autosave','','','2012-09-10 09:40:36','2012-09-10 09:40:36','',207,'{$page_url}/uncategorized/207-autosave/',0,'revision','',0),(332,1,'2012-07-08 09:38:19','2012-07-08 09:38:19','oEmbeds is an important facility used while creating posts. Thanks to it, a user may embed in an entry easily, e.g. a movie from You Tube service by giving just a link to the movie - Wordpress will generate a movie from this link automatically.\r\n\r\nA few examples are presented below:\r\n\r\nYouTube\r\n\r\nhttp://www.youtube.com/watch?v=MdrC7kYTAX4\r\n\r\nTwitter\r\n\r\nhttps://twitter.com/gavickpro/status/221189052983025666\r\n\r\nFlickr\r\n\r\nhttp://www.flickr.com/photos/synectic/5489943396/','oEmbeds','','publish','open','open','','oembeds-2','','','2012-08-12 17:56:37','2012-08-12 17:56:37','',0,'{$page_url}/?p=332',0,'post','',0),(335,1,'2012-07-08 09:53:55','2012-07-08 09:53:55','GavernWP has full support for making translations. Because of differences being a result of using JSON files for generating theme\'s options, a theme\'s translation should be done in three places:\r\n<ol>\r\n	<li>with files use from a languages catalog</li>\r\n	<li>by creating a catalog of a language given in a config catalog</li>\r\n	<li>by creating a catalog of a language given in an options catalog</li>\r\n</ol>\r\nThe first stage is a standard operation described in details in Wordpress documentation. Let\'s focus on the two remaining stages then:\r\n\r\nGenerally, there is <strong>en_US</strong> catalog created in <strong>config</strong> and <strong>options</strong> catalogs which includes JSON configuration files in an English language. So, in order to translate a theme to a different language , you have to copy this catalog and change its name to a respective language used in your installation, e.g. <strong>pl_PL</strong>. Then, you have to change all phrases from the English language to your language.\r\n\r\nNOTE! You must not change the names of keys in JSON files, the same as, proper names because they are used for proper work and reading values.\r\n\r\ne.g. in a widgets.json file for a fragment:\r\n\r\n[code]{\r\n\"name\": \"Top widgets\",\r\n\"id\": \"top\",\r\n\"description\": \"Widgets area on under the header of website\",\r\n\"before_widget\": \"&lt;div id=\\\"%1$s\\\" class=\\\"box%2$s\\\"&gt;\",\r\n\"after_widget\": \"&lt;/div&gt;\",\r\n\"before_title\": \"&lt;h3 class=\\\"box-title\\\"&gt;\",\r\n\"after_title\": \"&lt;/h3&gt;\"\r\n},[/code]\r\n\r\nchange the following phrases only:\r\n<ul>\r\n	<li>\"Top widgets\"</li>\r\n	<li>\"Widgets area on under the header of website\"</li>\r\n</ul>\r\nAfter this operation, you will see sentences in your mother tongue in an administration panel.\r\n\r\nIt\'s worth remembering that in the case when GavernWP will not find a catalog corresponding to the language set in configuration, there will be files used from <strong>en_US</strong> catalogs.','Translations','','publish','open','open','','translations','','','2012-08-12 17:59:51','2012-08-12 17:59:51','',0,'{$page_url}/?p=335',0,'post','',0),(246,1,'2012-06-26 21:48:56','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-06-26 21:48:56','0000-00-00 00:00:00','',0,'{$page_url}/?p=246',0,'post','',0),(747,1,'2012-09-10 09:41:01','2012-09-10 09:41:01','GavernWP allows to access a lot of additional typography elements created with <a title=\"Shortcode API\" href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> use. The use is very simple thanks to <a title=\"Typography button\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-features/typography-button/\" target=\"_blank\">an additional button</a> in a posts editor. A typography description from a programistic side has been divided into two parts, namely: <a title=\"Typography API\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/template-api/typography-api/\">front-end</a> and <a title=\"Typography API – back-end\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-api/typography-api-back-end/\">back-end</a>.\r\n\r\nBelow, there are all elements available in theme\'s typography. Typography elements can be divided into three main groups:\r\n<ul>\r\n	<li>typography elements,</li>\r\n	<li>interactive elements,</li>\r\n	<li>elements prepared especially for a particular theme.</li>\r\n</ul>\r\n<h2>Warnings / Infos / Notices / Errors</h2>\r\nThese elements are used for highlighting text fragments together with their importance / type of information by using appropriate colors.\r\n\r\n[warning]Warning text example using Shortcodes[/warning]\r\n\r\n[info]Info text example using Shortcodes[/info]\r\n\r\n[notice]Notice text example using Shortcodes[/notice]\r\n\r\n[error]Error text example using Shortcodes[/error]\r\n<h2>Labels</h2>\r\nLabels are useful for marking the importance of the text fragment or a word given. In the case of longer texts, we recommend to use elements from <em>Warnings / Infos / Notices</em> group.\r\n\r\nThis is a paragraph with the [label style=\"1\"]labeled text[/label] using the first style.\r\n\r\nThis is a paragraph with the [label style=\"2\"]labeled text[/label] using the second style.\r\n\r\nThis is a paragraph with the [label style=\"3\"]labeled text[/label] using the third style.\r\n\r\nThis is a paragraph with the [label style=\"4\"]labeled text[/label] using the fourth style.\r\n\r\nThis is a paragraph with the [label style=\"5\"]labeled text[/label] using the fifth style.\r\n\r\nThis is a paragraph with the [label style=\"6\"]labeled text[/label] using the sixth style.\r\n<h2>Badges</h2>\r\nBadges in their look are similar to Labels, however, you may use them mainly for highlighting shorter texts, e.g. numerical values.\r\n\r\nThis is a paragraph with the badge [badge style=\"1\"]12[/badge] using the first style.\r\n\r\nThis is a paragraph with the badge [badge style=\"2\"]12[/badge] using the second style.\r\n\r\nThis is a paragraph with the badge [badge style=\"3\"]12[/badge] using the third style.\r\n\r\nThis is a paragraph with the badge [badge style=\"4\"]12[/badge] using the fourth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"5\"]12[/badge] using the fifth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"6\"]12[/badge] using the sixth style.\r\n<h2>Code listings</h2>\r\nWe recommend to use an element creating code listings in one out of three styles available for presenting source codes:\r\n\r\n[code style=\"1\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"2\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"3\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n<h2>Text blocks</h2>\r\nText blocks are useful for generating an element highlighting a particular part of an  entry:\r\n\r\n[textblock style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[numblock num=\"01\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"02\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"03\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"04\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"left\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"right\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. [floated align=\"center\"]Lorem ipsum dolor sit amet[/floated] Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\r\n<h2>Quote and Citations</h2>\r\nQuotes elements are useful for highlighting the author of a sentence given:\r\n\r\n[quote style=\"1\" author=\"Author\"]The content of the quote in style 1[/quote]\r\n\r\n[quote style=\"2\" author=\"Author\"]The content of the quote in style 2[/quote]\r\n\r\n[quote style=\"3\" author=\"Author\"]The content of the quote in style 3[/quote]\r\n\r\n[quote style=\"4\" author=\"Author\"]The content of the quote in style 4[/quote]\r\n\r\n[quote style=\"5\" author=\"Author\"]The content of the quote in style 5[/quote]\r\n<h2>Dropcap</h2>\r\nElements creating the first letter highlighted:\r\n\r\n[dropcap style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n<h2>Lists</h2>\r\nOrdered and unordered lists:\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[olist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n</div>\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[ulist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n</div>\r\n<h2>Buttons</h2>\r\nButtons in many different variations:\r\n\r\n[button style=\"1\"]Your text[/button] [button style=\"2\"]Your text[/button] [button style=\"3\"]Your text[/button] [button style=\"4\"]Your text[/button] [button style=\"5\"]Your text[/button] [button style=\"6\"]Your text[/button] [button style=\"7\"]Your text[/button]\r\n<h2>Legends</h2>\r\nElements with legend useful while creating text blocks in a frame provided with an appropriate title.\r\n\r\n[legend title=\"Legend style 1\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 2\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 3\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 4\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 5\" style=\"5\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n<h2>Raw text</h2>\r\nAn element useful for generating text without formatting:\r\n\r\n[raw]Your text[/raw]\r\n<h2>Tooltips</h2>\r\nTooltips may occur in two forms: a link to a different website with a tooltip or a text connected with the text:\r\n\r\n[tip label=\"Default style\" style=\"1\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Blue style\" style=\"2\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Red style\" style=\"3\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Green style\" style=\"4\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Yellow style\" style=\"5\" href=\"URL\"]Text of the tooltip[/tip]\r\n<h2>Other typography elements</h2>\r\nElements which could not be groupped to other categories.\r\n\r\nColumns allow to place text in multicolumn layout:\r\n\r\n[columns]\r\n[column]Content for the first column[/column]\r\n[column]Content for the second column[/column]\r\n[column]Content for the third column[/column]\r\n[/columns]\r\n\r\nToggle text - elements useful for creating blocks with text to toggle:\r\n\r\n[toggle header=\"Header text\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\n[toggle header=\"Header text\" open=\"true\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\nShortcode pageurl allows to place an address to a blog:\r\n\r\n[pageurl]\r\n\r\nA link to a RSS channel:\r\n\r\n[rss href=\"URL\"]Link text[/rss]\r\n\r\nA link to a PDF document:\r\n\r\n[pdf url=\"URL\"]Text of the link[/pdf]\r\n\r\nA private note in an entry, visible for an author only:\r\n\r\n[note]Your private note[/note]\r\n\r\nMail illegible for bots creating data bases for spammers:\r\n\r\n[mail]email.to@obfuscate.com[/mail]\r\n\r\nContent visible for logged in users only:\r\n<div class=\"gk-members\"><strong>Members only</strong>Content for the members only</div>\r\nRelated posts:\r\n\r\n[related limit=\"5\"]','Typography','','inherit','open','open','','207-revision-2','','','2012-09-10 09:41:01','2012-09-10 09:41:01','',207,'{$page_url}/uncategorized/207-revision-2/',0,'revision','',0),(748,1,'2012-09-19 10:04:01','2012-09-19 10:04:01','GavernWP allows to access a lot of additional typography elements created with <a title=\"Shortcode API\" href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> use. The use is very simple thanks to <a title=\"Typography button\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-features/typography-button/\" target=\"_blank\">an additional button</a> in a posts editor. A typography description from a programistic side has been divided into two parts, namely: <a title=\"Typography API\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/template-api/typography-api/\">front-end</a> and <a title=\"Typography API – back-end\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-api/typography-api-back-end/\">back-end</a>.\r\n\r\nBelow, there are all elements available in theme\'s typography. Typography elements can be divided into three main groups:\r\n<ul>\r\n	<li>typography elements,</li>\r\n	<li>interactive elements,</li>\r\n	<li>elements prepared especially for a particular theme.</li>\r\n</ul>\r\n<h2>Warnings / Infos / Notices / Errors</h2>\r\nThese elements are used for highlighting text fragments together with their importance / type of information by using appropriate colors.\r\n\r\n[warning]Warning text example using Shortcodes[/warning]\r\n\r\n[info]Info text example using Shortcodes[/info]\r\n\r\n[notice]Notice text example using Shortcodes[/notice]\r\n\r\n[error]Error text example using Shortcodes[/error]\r\n<h2>Labels</h2>\r\nLabels are useful for marking the importance of the text fragment or a word given. In the case of longer texts, we recommend to use elements from <em>Warnings / Infos / Notices</em> group.\r\n\r\nThis is a paragraph with the [label style=\"1\"]labeled text[/label] using the first style.\r\n\r\nThis is a paragraph with the [label style=\"2\"]labeled text[/label] using the second style.\r\n\r\nThis is a paragraph with the [label style=\"3\"]labeled text[/label] using the third style.\r\n\r\nThis is a paragraph with the [label style=\"4\"]labeled text[/label] using the fourth style.\r\n\r\nThis is a paragraph with the [label style=\"5\"]labeled text[/label] using the fifth style.\r\n\r\nThis is a paragraph with the [label style=\"6\"]labeled text[/label] using the sixth style.\r\n<h2>Badges</h2>\r\nBadges in their look are similar to Labels, however, you may use them mainly for highlighting shorter texts, e.g. numerical values.\r\n\r\nThis is a paragraph with the badge [badge style=\"1\"]12[/badge] using the first style.\r\n\r\nThis is a paragraph with the badge [badge style=\"2\"]12[/badge] using the second style.\r\n\r\nThis is a paragraph with the badge [badge style=\"3\"]12[/badge] using the third style.\r\n\r\nThis is a paragraph with the badge [badge style=\"4\"]12[/badge] using the fourth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"5\"]12[/badge] using the fifth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"6\"]12[/badge] using the sixth style.\r\n<h2>Code listings</h2>\r\nWe recommend to use an element creating code listings in one out of three styles available for presenting source codes:\r\n\r\n[code style=\"1\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"2\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"3\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n<h2>Text blocks</h2>\r\nText blocks are useful for generating an element highlighting a particular part of an  entry:\r\n\r\n[textblock style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[numblock num=\"01\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"02\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"03\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"04\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"left\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"right\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. [floated align=\"center\"]Lorem ipsum dolor sit amet[/floated] Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\r\n<h2>Quote and Citations</h2>\r\nQuotes elements are useful for highlighting the author of a sentence given:\r\n\r\n[quote style=\"1\" author=\"Author\"]The content of the quote in style 1[/quote]\r\n\r\n[quote style=\"2\" author=\"Author\"]The content of the quote in style 2[/quote]\r\n\r\n[quote style=\"3\" author=\"Author\"]The content of the quote in style 3[/quote]\r\n\r\n[quote style=\"4\" author=\"Author\"]The content of the quote in style 4[/quote]\r\n\r\n[quote style=\"5\" author=\"Author\"]The content of the quote in style 5[/quote]\r\n<h2>Dropcap</h2>\r\nElements creating the first letter highlighted:\r\n\r\n[dropcap style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n<h2>Lists</h2>\r\nOrdered and unordered lists:\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[olist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n</div>\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[ulist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n</div>\r\n<h2>Buttons</h2>\r\nButtons in many different variations:\r\n\r\n[button style=\"1\"]Your text[/button] [button style=\"2\"]Your text[/button] [button style=\"3\"]Your text[/button] [button style=\"4\"]Your text[/button] [button style=\"5\"]Your text[/button] [button style=\"6\"]Your text[/button] [button style=\"7\"]Your text[/button]\r\n<h2>Legends</h2>\r\nElements with legend useful while creating text blocks in a frame provided with an appropriate title.\r\n\r\n[legend title=\"Legend style 1\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 2\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 3\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 4\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 5\" style=\"5\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n<h2>Raw text</h2>\r\nAn element useful for generating text without formatting:\r\n\r\n[raw]Your text[/raw]\r\n<h2>Tooltips</h2>\r\nTooltips may occur in two forms: a link to a different website with a tooltip or a text connected with the text:\r\n\r\n[tip label=\"Default style\" style=\"1\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Blue style\" style=\"2\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Red style\" style=\"3\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Green style\" style=\"4\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Yellow style\" style=\"5\" href=\"URL\"]Text of the tooltip[/tip]\r\n<h2>Other typography elements</h2>\r\nElements which could not be groupped to other categories.\r\n\r\nColumns allow to place text in multicolumn layout:\r\n\r\n[columns width=\"50,25,25\"]\r\n[column]Content for the first column[/column]\r\n[column]Content for the second column[/column]\r\n[column]Content for the third column[/column]\r\n[/columns]\r\n\r\nYou can also adjust the columns width using the <strong>width</strong> attribute:\r\n\r\n[columns width=\"50,25,25\"]\r\n[column]Content for the first column[/column]\r\n[column]Content for the second column[/column]\r\n[column]Content for the third column[/column]\r\n[/columns]\r\n\r\nToggle text - elements useful for creating blocks with text to toggle:\r\n\r\n[toggle header=\"Header text\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\n[toggle header=\"Header text\" open=\"true\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\nShortcode pageurl allows to place an address to a blog:\r\n\r\n[pageurl]\r\n\r\nA link to a RSS channel:\r\n\r\n[rss href=\"URL\"]Link text[/rss]\r\n\r\nA link to a PDF document:\r\n\r\n[pdf url=\"URL\"]Text of the link[/pdf]\r\n\r\nA private note in an entry, visible for an author only:\r\n\r\n[note]Your private note[/note]\r\n\r\nMail illegible for bots creating data bases for spammers:\r\n\r\n[mail]email.to@obfuscate.com[/mail]\r\n\r\nContent visible for logged in users only:\r\n<div class=\"gk-members\"><strong>Members only</strong>Content for the members only</div>\r\nRelated posts:\r\n\r\n[related limit=\"5\"]','Typography','','inherit','open','open','','207-revision-3','','','2012-09-19 10:04:01','2012-09-19 10:04:01','',207,'{$page_url}/uncategorized/207-revision-3/',0,'revision','',0),(333,1,'2012-07-08 09:37:39','2012-07-08 09:37:39','oEmbeds to ważne udogodnienie wykorzystywane przy tworzeniu postów. Dzięki nim użytkownik w łatwy sposób może osadzić we wpisie np. film z serwisu YouTube podając jedynie link do filmu - Wordpress automatycznie wygeneruje z takiego linka film.\n\nPrzykłady prezentujemy poniżej:\n\nhttp://www.youtube.com/watch?v=MdrC7kYTAX4\n\nhttps://twitter.com/gavickpro/status/221189052983025666\n\n&nbsp;','oEmbeds','','inherit','open','open','','332-revision','','','2012-07-08 09:37:39','2012-07-08 09:37:39','',332,'{$page_url}/uncategorized/332-revision/',0,'revision','',0),(331,1,'2012-07-08 09:30:14','2012-07-08 09:30:14','Framework GavernWP posiada dość rozbudowaną strukturę plików. Jest ona w dużej mierze podobna do standardowej struktury większości szablonów jednak z racji wielu funkcjonalności pojawiają się w niej nowe elementy.\n\n<!--more-->\n\nOgólney zarys struktury plików prezentuje się następująco:\n<ol>\n	<li>katalog szablonu\n<small>Zawiera on wszystkie podstawowe pliki i katalogi dla szablonu. Warto zauważyć, że szablony Custom Pages posiadają na poczatku nazwy prefiks <strong>template.</strong>, który ułatwia ich odnalezienie w strukturze plików.</small>\n<ol>\n	<li>css\n<small>Znajdują się w nim wszystkie pliki CSS szablonu. Zostały one dokładniej omówione we wpisie dotyczącym kodu CSS frameworka.</small>\n<ol>\n	<li>back-end\n<small>Dla większego porządku pliki CSS dotyczące panelu administracyjnego zostały umieszczone w tym katalogu.</small></li>\n</ol>\n</li>\n	<li>fonts\n<small>Katalog ten jest przeznaczony do przechowywania plików z dodatkowymi fontami. Należy pamiętać by każdy font posiadał swój katalog zawierający plik stylesheet.css. Więcej o obsłudze fontów zostało napisane we wpisie dotyczącym sekcji <strong>Fonts</strong> w panelu administracyjnym.</small></li>\n	<li>gavern\n<small>Katalog zawierający podstawę działania całego frameworka GavernWP.</small>\n<ol>\n	<li>classes\n<small>Pliki z klasami pomocniczymi, używanymi w kodzie frameworka.</small></li>\n	<li><strong>config</strong>\n<small>Pliki zawierające konfigurację frameworka. Należy pamiętać o tym, że stosowane są dodatkowe katalogi wykorzystywane do wykonywania tłumaczeń</small></li>\n	<li><strong>form_elements</strong>\n<small>Poza głównym plikiem zawierającym kod generujący podstawowe elementy formularzy w panelu administracyjnym, zawiera on katalogi z elementami stworzonymi przez użytkownika.</small></li>\n	<li><strong>helpers</strong>\n<small>Zbiór klas związanych z konkretnymi zadaniami frameworka np. generowaniem fragmentów layoutu.</small></li>\n	<li><strong>layouts</strong>\n<small>Pliki wykorzystywane do generowania kodu HTML panelu administracyjnego.</small></li>\n	<li><strong>options</strong>\n<small>Pliki przechowujące opcje poszczególnych sekcji panelu administracyjnego szablonu. Podobnie jak katalog <strong>config</strong> - tutaj także stosowane są dodatkowe katalogi wykorzystywane do wykonywania tłumaczeń.</small></li>\n</ol>\n</li>\n	<li><strong>images</strong>\n<small>Pliki graficzne wykorzystywane przez szablon</small>\n<ol>\n	<li><strong>back-end</strong>\n<small>Pliki związane z panelem administracyjnym</small></li>\n	<li><strong>headers</strong>\n<small>Domyślne grafiki headera</small></li>\n	<li><strong>post_formats</strong>\n<small>Grafiki związane z formatami wpisów.</small></li>\n</ol>\n</li>\n	<li><strong>js</strong>\n<small>Pliki skryptów JavaScript wykorzystywane w szablonie</small>\n<ol>\n	<li><strong>back-end</strong>\n<small>Podobnie jak w katalogach <strong>css</strong> oraz <strong>images</strong> zawarte są tutaj pliki wykorzystywane w panelu administracyjnym</small></li>\n	<li><strong>templates</strong>\n<small>Dodatkowe pliki JavaScript wykorzystywane przez niektóre Custom Pages</small></li>\n</ol>\n</li>\n	<li><strong>languages</strong>\n<small>Główne pliki wykorzystywane do tworzenia tłumaczeń</small></li>\n	<li><strong>layouts</strong>\n<small>Pliki wykorzystywane do generowania podstron - zawierają elementy, które są wielokrotnie wykorzystywane - np. sekcja head.</small></li>\n</ol>\n</li>\n</ol>','Framework structure','','inherit','open','open','','330-revision','','','2012-07-08 09:30:14','2012-07-08 09:30:14','',330,'{$page_url}/uncategorized/330-revision/',0,'revision','',0),(435,1,'2012-08-14 20:01:56','2012-08-14 20:01:56','oEmbeds is an important facility used while creating posts. Thanks to it, a user may embed in an entry easily, e.g. a movie from You Tube service by giving just a link to the movie - Wordpress will generate a movie from this link automatically.\n\nA few examples are presented below:\n\nYouTube\n\nhttp://www.youtube.com/watch?v=MdrC7kYTAX4\n\nTwitter\n\nhttps://twitter.com/gavickpro/status/221189052983025666\n\nFlickr\n\nhttp://www.flickr.com/photos/synectic/5489943396/','oEmbeds','','inherit','open','open','','332-autosave','','','2012-08-14 20:01:56','2012-08-14 20:01:56','',332,'{$page_url}/uncategorized/332-autosave/',0,'revision','',0),(334,1,'2012-07-08 09:38:19','2012-07-08 09:38:19','oEmbeds to ważne udogodnienie wykorzystywane przy tworzeniu postów. Dzięki nim użytkownik w łatwy sposób może osadzić we wpisie np. film z serwisu YouTube podając jedynie link do filmu - Wordpress automatycznie wygeneruje z takiego linka film.\r\n\r\nPrzykłady prezentujemy poniżej:\r\n\r\nhttp://www.youtube.com/watch?v=MdrC7kYTAX4\r\n\r\nhttps://twitter.com/gavickpro/status/221189052983025666\r\n\r\nhttp://www.flickr.com/photos/synectic/5489943396/','oEmbeds','','inherit','open','open','','332-revision-2','','','2012-07-08 09:38:19','2012-07-08 09:38:19','',332,'{$page_url}/uncategorized/332-revision-2/',0,'revision','',0),(336,1,'2012-07-08 09:53:22','2012-07-08 09:53:22','GavernWP posiada pełne wsparcie dla wykonywania tłumaczeń. Z racji pewnych różnic wynikających z wykorzystania plików JSON do generowania opcji szablonu tłumaczenie szablonu powinno odbywać się w trzech miejscach:\n<ol>\n	<li>z użyciem plików z katalogu lanugages</li>\n	<li>poprzez stworzenie katalogu danego języka w katalogu config</li>\n	<li>poprzez stworzenie katalogu danego języka w katalogu options</li>\n</ol>\nPierwszy etap jest standardową operacją opisaną dokładnie w dokumentacji Wordpressa. Skupmy się zatem na pozostałych dwóch etapach:\n\nStandardowo w katalogach <strong>config</strong> i <strong>options</strong> stworzony jest katalog <strong>en_US</strong>, który zawiera pliki konfiguracyjne JSON w języku angielskim. Aby więc przetłumaczyć szablon na inny język należy skopiować ten katalog i zmienić mu nazwę na odpowiadającą językowi używanemu w naszej instalacji np. <strong>pl_PL</strong>. Następnie należy zmienić wszystkie frazy anglojęzyczne na te w naszym języku.\n\nUWAGA! Nie wolno zmieniać nazw kluczy w plikach JSON jak też nazw własnych, gdyż są one wykorzystywane do poprawnego działania i odczytywania wartości.\n\nPrzykładowo w pliku widgets.json dla fragmentu:\n\n[code]{\n\"name\": \"Top widgets\",\n\"id\": \"top\",\n\"description\": \"Widgets area on under the header of website\",\n\"before_widget\": \"&lt;div id=\\\"%1$s\\\" class=\\\"box%2$s\\\"&gt;\",\n\"after_widget\": \"&lt;/div&gt;\",\n\"before_title\": \"&lt;h3 class=\\\"box-title\\\"&gt;\",\n\"after_title\": \"&lt;/h3&gt;\"\n},[/code]\n\nzmieniamy tylko frazy:\n<ul>\n	<li>\"Top widgets\"</li>\n	<li>\"Widgets area on under the header of website\"</li>\n</ul>\nPo tak wykonanej operacji w panelu administracyjnym pojawią się zdania w naszym rodzimym języku.\n\nWarto też pamietać, że w wypadku gdy GavernWP nie znajdzie katalogu odpowiadającego ustawion','Translations','','inherit','open','open','','335-revision','','','2012-07-08 09:53:22','2012-07-08 09:53:22','',335,'{$page_url}/uncategorized/335-revision/',0,'revision','',0),(337,1,'2012-08-12 17:28:52','2012-08-12 17:28:52','GavernWP has full support for making translations. Because of differences being a result of using JSON files for generating template\'s options, a template\'s translation should be done in three places:\n<ol>\n	<li>with files use from a languages catalog</li>\n	<li>by creating a catalog of a language given in a config catalog</li>\n	<li>by creating a catalog of a language given in an options catalog</li>\n</ol>\nThe first stage is a standard operation described in details in Wordpress documentation. Let\'s focus on the two remaining stages then:\n\nGenerally, there is <strong>en_US</strong> catalog created in <strong>config</strong> and <strong>options</strong> catalogs which includes JSON configuration files in an English language. So, in order to translate a template to a different language , you have to copy this catalog and change its name to a respective language used in your installation, e.g. <strong>pl_PL</strong>. Then, you have to change all phrases from the English language to your language.\n\nNOTE! You must not change the names of keys in JSON files, the same as, proper names because they are used for proper work and reading values.\n\ne.g. in a widgets.json file for a fragment:\n\n[code]{\n\"name\": \"Top widgets\",\n\"id\": \"top\",\n\"description\": \"Widgets area on under the header of website\",\n\"before_widget\": \"&lt;div id=\\\"%1$s\\\" class=\\\"box%2$s\\\"&gt;\",\n\"after_widget\": \"&lt;/div&gt;\",\n\"before_title\": \"&lt;h3 class=\\\"box-title\\\"&gt;\",\n\"after_title\": \"&lt;/h3&gt;\"\n},[/code]\n\nchange the following phrases only:\n<ul>\n	<li>\"Top widgets\"</li>\n	<li>\"Widgets area on under the header of website\"</li>\n</ul>\nAfter this operation, you will see sentences in your mother tongue in an administration panel.\n\nIt\'s worth remembering that in the case when GavernWP will not find a catalog corresponding to the language set in configuration, there will be files used from <strong>en_US</strong> catalogs.','Translations','','inherit','open','open','','335-autosave','','','2012-08-12 17:28:52','2012-08-12 17:28:52','',335,'{$page_url}/uncategorized/335-autosave/',0,'revision','',0),(338,1,'2012-07-08 10:07:26','2012-07-08 10:07:26','In order to make GavernWP framework more flexible, we decided to use files in JSON format for storing thme\'s configuration and options layout in an administration panel.\r\n\r\nYou may find files responsible for theme\'s configuration in <strong>gavern/options/</strong> catalog:<strong></strong>\r\n<ul>\r\n	<li><strong>fonts.json</strong> - a file which stores theme\'s groups of fonts. By default, there are three main gropus created. In order to create a new group, it is enough to add a next object to the object table existing in this file.plik przechowujący grupy czcionek szablonu.</li>\r\n	<li><strong>menus.json</strong> - you will find space for menu used in a theme in this file. You have to remember that except adding a new object, you have to add PHP code generating menu data in theme\'s code. It is also worth remembering that there could be one main menu (<strong>main</strong> field in menu object).<strong></strong></li>\r\n	<li><strong>opengraph.json</strong> - this file includes configuration of fields used in a block connected with metabox which is used for generating Open Graph data. We do not recommend to make any changes in it before you get acquainted with Open Graph tags implementation in GavernWP framework.</li>\r\n	<li><strong>styles.json</strong> - this file is used for generating additional theme\'s styles. Except adding a new style, you have to remember about creating an additional CSS file which will be loaded while changing theme\'s style.</li>\r\n	<li><strong>template.json</strong> - it is the most important configuration file. It includes information about a theme and it allows to switch off chosen elements of theme administration panel. It is NOT recommended to add new fields to this files because they will not be used without additional PHP code.</li>\r\n	<li><strong>widgets.json</strong> - a file including a list of all positions of widgets. Similarly to <strong>menus.json</strong> file, you have to remember that except adding a new widget position, you have to also add PHP code which generates it in a theme.</li>\r\n	<li><strong>widgets.styles.json</strong> - a file used for creating new widget styles. Thanks to its implementation, it allows to assign a style given to one widget type only or exclude some widget types from a style given.</li>\r\n</ul>\r\nIn order to understand better JSON files format, we recommend to visit the official website of  <a href=\"http://www.json.org/\">this format</a>.\r\n\r\n&nbsp;','JSON Configuration','','publish','open','open','','json-configuration','','','2012-08-12 18:01:32','2012-08-12 18:01:32','',0,'{$page_url}/?p=338',0,'post','',0),(339,1,'2012-07-08 10:07:01','2012-07-08 10:07:01','Dla zapewnienia wysokiej elastyczności frameworka GavernWP, zdecydowaliśmy się na wykorzystanie plików w formacie JSON do przechowywania konfiguracji szablonu i układu opcji w panelu administracyjnym.\n\nW katalogu <strong>gavern/options/</strong> znajdziemy pliki odpowiadające za konfigurację szablonu:\n<ul>\n	<li><strong>fonts.json</strong> - plik przechowujący grupy czcionek szablonu. Domyślnie stworzone są trzy główne grupy. Aby stworzyć nową grupę wystarczy dodać kolejny obiekt do istniejącej w tym pliku tablicy obiektów.</li>\n	<li><strong>menus.json</strong> - w pliku tym znajdziemy miejsca na menu wykorzystywane w szablonie. Należy pamiętać, że w odróżnieniu do pliku fonts.json, poza dodaniem nowego obiektu trzeba też w kodzie szablonu dodać kod PHP generujący dane menu. Warto też pamiętać, że tylko jedno menu, może być menu głównym (pole <strong>main</strong> w obiekcie menu).</li>\n	<li><strong>opengraph.json</strong> - plik ten zawiera konfigurację pól używanych w bloku związanym z metabox-em używanym do generowania danych Open Graph. Nie zalecamy dokonywania w nim żadnych zmian bez poznania dokładnej implementacji tagów Open Graph we frameworku GavernWP.</li>\n	<li><strong>styles.json</strong> - plik ten jest wykorzystywany do generowania dodatkowych styli szablonu. Poza dodaniem nowego stylu, należy też pamietać o stworzeniu dodatkowego pliku CSS, który będzie ładowany przy zmianie stylu szablonu.</li>\n	<li>template.json - najważniejszy plik konfiguracyjny. Zawiera on informacje o szablonie oraz pozwala wyłączyć wybrane elementy panelu administracyjnego szablonu. Nie jest zalecane dodawanie nowych pól do tego pliku gdyż bez dodatkowego kodu PHP nie zostaną one wykorzystane.</li>\n	<li>widgets.json - plik zawierający listę wszystkich pozycji widżetów. Podobnie jak w wypadku pliku <strong>menus.json</strong>, należy pamietać, że poza dodaniem nowej pozycji widżetów, trzeba też dodać kod PHP generujący ją w szablonie.</li>\n	<li>widgets.styles.json - plik stosowany do tworzenia nowych styli widżetów. Dzięki swojej implementacji pozwala przypisać dany styl tylko do danego typu widżetów lub też wykluczyć z danego stylu wybrane rodzaje widżetów.</li>\n</ul>\nBy lepiej zrozumieć format plików JSON polecamy lekturę oficjalne strony <a href=\"http://www.json.org/\">tego formatu</a>.\n\n&nbsp;','JSON Configuration','','inherit','open','open','','338-revision','','','2012-07-08 10:07:01','2012-07-08 10:07:01','',338,'{$page_url}/uncategorized/338-revision/',0,'revision','',0),(340,1,'2012-08-12 18:00:50','2012-08-12 18:00:50','In order to make GavernWP framework more flexible, we decided to use files in JSON format for storing thme\'s configuration and options layout in an administration panel.\n\nYou may find files responsible for theme\'s configuration in <strong>gavern/options/</strong> catalog:<strong></strong>\n<ul>\n	<li><strong>fonts.json</strong> - a file which stores theme\'s groups of fonts. By default, there are three main gropus created. In order to create a new group, it is enough to add a next object to the object table existing in this file.plik przechowujący grupy czcionek szablonu.</li>\n	<li><strong>menus.json</strong> - you will find space for menu used in a theme in this file. You have to remember that except adding a new object, you have to add PHP code generating menu data in theme\'s code. It is also worth remembering that there could be one main menu (<strong>main</strong> field in menu object).<strong></strong></li>\n	<li><strong>opengraph.json</strong> - this file includes configuration of fields used in a block connected with metabox which is used for generating Open Graph data. We do not recommend to make any changes in it before you get acquainted with Open Graph tags implementation in GavernWP framework.</li>\n	<li><strong>styles.json</strong> - this file is used for generating additional template\'s styles. Except adding a new style, you have to remember about creating an additional CSS file which will be loaded while changing template\'s style.</li>\n	<li><strong>template.json</strong> - it is the most important configuration file. It includes information about a template and it allows to switch off chosen elements of template administration panel. It is NOT recommended to add new fields to this files because they will not be used without additional PHP code.</li>\n	<li><strong>widgets.json</strong> - a file including a list of all positions of widgets. Similarly to <strong>menus.json</strong> file, you have to remember that except adding a new widget position, you have to also add PHP code which generates it in a template.</li>\n	<li><strong>widgets.styles.json</strong> - a file used for creating new widget styles. Thanks to its implementation, it allows to assign a style given to one widget type only or exclude some widget types from a style given.</li>\n</ul>\nIn order to understand better JSON files format, we recommend to visit the official website of  <a href=\"http://www.json.org/\">this format</a>.\n\n&nbsp;','JSON Configuration','','inherit','open','open','','338-autosave','','','2012-08-12 18:00:50','2012-08-12 18:00:50','',338,'{$page_url}/uncategorized/338-autosave/',0,'revision','',0),(341,1,'2012-07-09 09:40:13','2012-07-09 09:40:13','GavernWP has built - in support for <a title=\"Open Graph\" href=\"http://opengraphprotocol.org/\" target=\"_blank\">Open Graph</a> protocol. Thanks to it, each post added may have metatags specified and during publishing a post given on Facebook, there will be information specified earlier by an author of an entry displayed:\r\n<ul>\r\n	<li>title</li>\r\n	<li>entry description</li>\r\n	<li>thumbnail connected with an entry</li>\r\n</ul>\r\nThanks to it, an author of a post has better influence on the information displayed on social media services. It\'s also worth remembering that in the case when fields connected with Open Graph will not be filled, then GavernWP will try to fill them automatically basing on the entry data.\r\n\r\nSupport for Open Graph is a great supplement for a Social API system implemented in GavernWP.','Open Graph support','','publish','open','open','','open-graph-support','','','2012-08-12 17:56:16','2012-08-12 17:56:16','',0,'{$page_url}/?p=341',0,'post','',0),(342,1,'2012-07-09 09:39:31','2012-07-09 09:39:31','GavernWP posiada wbudowane wsparcie dla protokołu <a title=\"Open Graph\" href=\"http://opengraphprotocol.org/\" target=\"_blank\">Open Graph</a>. Dzięki temu każdy dodawany post może posiadać określone metatagi, które sprawią, że podczas udostępniania danego posta na Facebooku pojawią się określone wcześniej przez autora wpisu informacje:\n<ul>\n	<li>tytuł</li>\n	<li>opis wpisu</li>\n	<li>miniaturka związana z wpisem</li>\n</ul>\nDzięki temu autor posta może lepiej wpływać na to co pojawia się w mediach społecznościowych. Dodatkowo warto pamiętać, że w wypadku gdy pola związane z Open Graph, nie zostaną wypełnione, wtedy GavernWP spróbuje wypełnić je automatycznie na bazie danych wpisu.','Open Graph support','','inherit','open','open','','341-revision','','','2012-07-09 09:39:31','2012-07-09 09:39:31','',341,'{$page_url}/uncategorized/341-revision/',0,'revision','',0),(343,1,'2012-07-08 10:07:26','2012-07-08 10:07:26','Dla zapewnienia wysokiej elastyczności frameworka GavernWP, zdecydowaliśmy się na wykorzystanie plików w formacie JSON do przechowywania konfiguracji szablonu i układu opcji w panelu administracyjnym.\r\n\r\nW katalogu <strong>gavern/options/</strong> znajdziemy pliki odpowiadające za konfigurację szablonu:\r\n<ul>\r\n	<li><strong>fonts.json</strong> - plik przechowujący grupy czcionek szablonu. Domyślnie stworzone są trzy główne grupy. Aby stworzyć nową grupę wystarczy dodać kolejny obiekt do istniejącej w tym pliku tablicy obiektów.</li>\r\n	<li><strong>menus.json</strong> - w pliku tym znajdziemy miejsca na menu wykorzystywane w szablonie. Należy pamiętać, że w odróżnieniu do pliku fonts.json, poza dodaniem nowego obiektu trzeba też w kodzie szablonu dodać kod PHP generujący dane menu. Warto też pamiętać, że tylko jedno menu, może być menu głównym (pole <strong>main</strong> w obiekcie menu).</li>\r\n	<li><strong>opengraph.json</strong> - plik ten zawiera konfigurację pól używanych w bloku związanym z metabox-em używanym do generowania danych Open Graph. Nie zalecamy dokonywania w nim żadnych zmian bez poznania dokładnej implementacji tagów Open Graph we frameworku GavernWP.</li>\r\n	<li><strong>styles.json</strong> - plik ten jest wykorzystywany do generowania dodatkowych styli szablonu. Poza dodaniem nowego stylu, należy też pamietać o stworzeniu dodatkowego pliku CSS, który będzie ładowany przy zmianie stylu szablonu.</li>\r\n	<li><strong>template.json</strong> - najważniejszy plik konfiguracyjny. Zawiera on informacje o szablonie oraz pozwala wyłączyć wybrane elementy panelu administracyjnego szablonu. Nie jest zalecane dodawanie nowych pól do tego pliku gdyż bez dodatkowego kodu PHP nie zostaną one wykorzystane.</li>\r\n	<li><strong>widgets.json</strong> - plik zawierający listę wszystkich pozycji widżetów. Podobnie jak w wypadku pliku <strong>menus.json</strong>, należy pamietać, że poza dodaniem nowej pozycji widżetów, trzeba też dodać kod PHP generujący ją w szablonie.</li>\r\n	<li><strong>widgets.styles.json</strong> - plik stosowany do tworzenia nowych styli widżetów. Dzięki swojej implementacji pozwala przypisać dany styl tylko do danego typu widżetów lub też wykluczyć z danego stylu wybrane rodzaje widżetów.</li>\r\n</ul>\r\nBy lepiej zrozumieć format plików JSON polecamy lekturę oficjalne strony <a href=\"http://www.json.org/\">tego formatu</a>.\r\n\r\n&nbsp;','JSON Configuration','','inherit','open','open','','338-revision-2','','','2012-07-08 10:07:26','2012-07-08 10:07:26','',338,'{$page_url}/uncategorized/338-revision-2/',0,'revision','',0),(344,1,'2012-07-08 09:53:55','2012-07-08 09:53:55','GavernWP posiada pełne wsparcie dla wykonywania tłumaczeń. Z racji pewnych różnic wynikających z wykorzystania plików JSON do generowania opcji szablonu tłumaczenie szablonu powinno odbywać się w trzech miejscach:\r\n<ol>\r\n	<li>z użyciem plików z katalogu lanugages</li>\r\n	<li>poprzez stworzenie katalogu danego języka w katalogu config</li>\r\n	<li>poprzez stworzenie katalogu danego języka w katalogu options</li>\r\n</ol>\r\nPierwszy etap jest standardową operacją opisaną dokładnie w dokumentacji Wordpressa. Skupmy się zatem na pozostałych dwóch etapach:\r\n\r\nStandardowo w katalogach <strong>config</strong> i <strong>options</strong> stworzony jest katalog <strong>en_US</strong>, który zawiera pliki konfiguracyjne JSON w języku angielskim. Aby więc przetłumaczyć szablon na inny język należy skopiować ten katalog i zmienić mu nazwę na odpowiadającą językowi używanemu w naszej instalacji np. <strong>pl_PL</strong>. Następnie należy zmienić wszystkie frazy anglojęzyczne na te w naszym języku.\r\n\r\nUWAGA! Nie wolno zmieniać nazw kluczy w plikach JSON jak też nazw własnych, gdyż są one wykorzystywane do poprawnego działania i odczytywania wartości.\r\n\r\nPrzykładowo w pliku widgets.json dla fragmentu:\r\n\r\n[code]{\r\n\"name\": \"Top widgets\",\r\n\"id\": \"top\",\r\n\"description\": \"Widgets area on under the header of website\",\r\n\"before_widget\": \"&lt;div id=\\\"%1$s\\\" class=\\\"box%2$s\\\"&gt;\",\r\n\"after_widget\": \"&lt;/div&gt;\",\r\n\"before_title\": \"&lt;h3 class=\\\"box-title\\\"&gt;\",\r\n\"after_title\": \"&lt;/h3&gt;\"\r\n},[/code]\r\n\r\nzmieniamy tylko frazy:\r\n<ul>\r\n	<li>\"Top widgets\"</li>\r\n	<li>\"Widgets area on under the header of website\"</li>\r\n</ul>\r\nPo tak wykonanej operacji w panelu administracyjnym pojawią się zdania w naszym rodzimym języku.\r\n\r\nWarto też pamietać, że w wypadku gdy GavernWP nie znajdzie katalogu odpowiadającego ustawionemu w konfiguracji językowi, zostaną wykorzystane pliki z katalogów <strong>en_US</strong>.','Translations','','inherit','open','open','','335-revision-2','','','2012-07-08 09:53:55','2012-07-08 09:53:55','',335,'{$page_url}/uncategorized/335-revision-2/',0,'revision','',0),(345,1,'2012-07-08 09:38:54','2012-07-08 09:38:54','oEmbeds to ważne udogodnienie wykorzystywane przy tworzeniu postów. Dzięki nim użytkownik w łatwy sposób może osadzić we wpisie np. film z serwisu YouTube podając jedynie link do filmu - Wordpress automatycznie wygeneruje z takiego linka film.\r\n\r\nPrzykłady prezentujemy poniżej:\r\n\r\nYouTube\r\n\r\nhttp://www.youtube.com/watch?v=MdrC7kYTAX4\r\n\r\nTwitter\r\n\r\nhttps://twitter.com/gavickpro/status/221189052983025666\r\n\r\nFlickr\r\n\r\nhttp://www.flickr.com/photos/synectic/5489943396/','oEmbeds','','inherit','open','open','','332-revision-3','','','2012-07-08 09:38:54','2012-07-08 09:38:54','',332,'{$page_url}/uncategorized/332-revision-3/',0,'revision','',0),(346,1,'2012-07-08 09:30:56','2012-07-08 09:30:56','Framework GavernWP posiada dość rozbudowaną strukturę plików. Jest ona w dużej mierze podobna do standardowej struktury większości szablonów jednak z racji wielu funkcjonalności pojawiają się w niej nowe elementy.\r\n\r\n<!--more-->\r\n\r\nOgólny zarys struktury plików prezentuje się następująco:\r\n<ol>\r\n	<li><strong>katalog szablonu</strong>\r\n<small>Zawiera on wszystkie podstawowe pliki i katalogi dla szablonu. Warto zauważyć, że szablony Custom Pages posiadają na poczatku nazwy prefiks <strong>template.</strong>, który ułatwia ich odnalezienie w strukturze plików.</small>\r\n<ol>\r\n	<li><strong>css</strong>\r\n<small>Znajdują się w nim wszystkie pliki CSS szablonu. Zostały one dokładniej omówione we wpisie dotyczącym kodu CSS frameworka.</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Dla większego porządku pliki CSS dotyczące panelu administracyjnego zostały umieszczone w tym katalogu.</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>fonts</strong>\r\n<small>Katalog ten jest przeznaczony do przechowywania plików z dodatkowymi fontami. Należy pamiętać by każdy font posiadał swój katalog zawierający plik stylesheet.css. Więcej o obsłudze fontów zostało napisane we wpisie dotyczącym sekcji <strong>Fonts</strong> w panelu administracyjnym.</small></li>\r\n	<li><strong>gavern</strong>\r\n<small>Katalog zawierający podstawę działania całego frameworka GavernWP.</small>\r\n<ol>\r\n	<li><strong>classes</strong>\r\n<small>Pliki z klasami pomocniczymi, używanymi w kodzie frameworka.</small></li>\r\n	<li><strong>config</strong>\r\n<small>Pliki zawierające konfigurację frameworka. Należy pamiętać o tym, że stosowane są dodatkowe katalogi wykorzystywane do wykonywania tłumaczeń</small></li>\r\n	<li><strong>form_elements</strong>\r\n<small>Poza głównym plikiem zawierającym kod generujący podstawowe elementy formularzy w panelu administracyjnym, zawiera on katalogi z elementami stworzonymi przez użytkownika.</small></li>\r\n	<li><strong>helpers</strong>\r\n<small>Zbiór klas związanych z konkretnymi zadaniami frameworka np. generowaniem fragmentów layoutu.</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Pliki wykorzystywane do generowania kodu HTML panelu administracyjnego.</small></li>\r\n	<li><strong>options</strong>\r\n<small>Pliki przechowujące opcje poszczególnych sekcji panelu administracyjnego szablonu. Podobnie jak katalog <strong>config</strong> - tutaj także stosowane są dodatkowe katalogi wykorzystywane do wykonywania tłumaczeń.</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>images</strong>\r\n<small>Pliki graficzne wykorzystywane przez szablon</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Pliki związane z panelem administracyjnym</small></li>\r\n	<li><strong>headers</strong>\r\n<small>Domyślne grafiki headera</small></li>\r\n	<li><strong>post_formats</strong>\r\n<small>Grafiki związane z formatami wpisów.</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>js</strong>\r\n<small>Pliki skryptów JavaScript wykorzystywane w szablonie</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Podobnie jak w katalogach <strong>css</strong> oraz <strong>images</strong> zawarte są tutaj pliki wykorzystywane w panelu administracyjnym</small></li>\r\n	<li><strong>templates</strong>\r\n<small>Dodatkowe pliki JavaScript wykorzystywane przez niektóre Custom Pages</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>languages</strong>\r\n<small>Główne pliki wykorzystywane do tworzenia tłumaczeń</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Pliki wykorzystywane do generowania podstron - zawierają elementy, które są wielokrotnie wykorzystywane - np. sekcja head.</small></li>\r\n</ol>\r\n</li>\r\n</ol>\r\n&nbsp;','Framework structure','','inherit','open','open','','330-revision-2','','','2012-07-08 09:30:56','2012-07-08 09:30:56','',330,'{$page_url}/uncategorized/330-revision-2/',0,'revision','',0),(348,1,'2012-07-09 09:45:43','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-07-09 09:45:43','0000-00-00 00:00:00','',0,'{$page_url}/?p=348',0,'post','',0),(349,1,'2012-07-09 09:56:08','2012-07-09 09:56:08','GavernWP has an extensive mechanism allowing to create additional theme styles. We may distinguish two main groups of styles in this mechanism:\r\n<ul>\r\n	<li>style family</li>\r\n	<li>styles included in style family given</li>\r\n</ul>\r\nThe whole configuration is included in <strong>styles.json</strong> file:\r\n\r\n[code][{\r\n\r\n\"family\": \"color\",\r\n\"family_desc\": \"Theme color\",\r\n\"family_tooltip\": \"You can select one of the theme colors\",\r\n\"styles\": [\r\n{\r\n\"name\": \"Color I\",\r\n\"value\": \"color1\",\r\n\"file\": \"style1.css\"\r\n},\r\n{\r\n\"name\": \"Color II\",\r\n\"value\": \"color2\",\r\n\"file\": \"style2.css\"\r\n}\r\n]\r\n}][/code]\r\n\r\nAs you can see, it includes <strong>color</strong> style family which has two styles, namely: <strong>Color I</strong> and <strong>Color II</strong>.\r\n\r\nIn order to create new style family or a style for style family given, it is enough to create a next object in <strong>styles.json</strong> file and then create CSS files connected with a family given - in the case of <strong>color</strong> family, these are <strong>style1.css</strong> and <strong>style2.css</strong> files.\r\n\r\nGavernWP will load CSS files of a style given in a <strong>head</strong> section - chosen in an administration panel or, if there is a tool for choosing user\'s styles switched on, they will be loaded based on a Cookie file storing data about a style used by a user.\r\n\r\nYou have to remember that for each style family there is at least one CSS file loaded. Therefore, creating coexisting style families like:\r\n<ul>\r\n	<li><strong>dark styles</strong> and <strong>light styles</strong></li>\r\n	<li><strong>blue styles</strong> and <strong>green styles</strong></li>\r\n</ul>\r\nis incorrect because at least one CSS style from each family will be loaded immediately. So the correct one is creating style families responsible for some elements of website styling, e.g. a separate family responsible for website coloring (<strong>colors</strong>) and a separate one for website background (<strong>patterns</strong>).\r\n\r\nGenerally, you have to care about particular style families in order not to overwrite one another.','Color Styles','','publish','open','open','','color-styles','','','2012-08-12 18:03:55','2012-08-12 18:03:55','',0,'{$page_url}/?p=349',0,'post','',0),(350,1,'2012-07-09 09:55:58','2012-07-09 09:55:58','GavernWP posiada rozbudowany mechanizm pozwalający na tworzenie dodatkowych styli szablonu. W mechaniźmie tym można rozróżnić dwie główne grupy styli:\n<ul>\n	<li>rodzina styli</li>\n	<li>style wchodzące w skład danej rodziny styli</li>\n</ul>\nCała konfiguracja zawarta jest w pliku<strong> styles.json</strong>:\n\n[code][{\n\n\"family\": \"color\",\n\"family_desc\": \"Template color\",\n\"family_tooltip\": \"You can select one of the template colors\",\n\"styles\": [\n{\n\"name\": \"Color I\",\n\"value\": \"color1\",\n\"file\": \"style1.css\"\n},\n{\n\"name\": \"Color II\",\n\"value\": \"color2\",\n\"file\": \"style2.css\"\n}\n]\n}][/code]\n\nJak widać zawiera on rodzinę styli <strong>color</strong>, która posiada dwa style: <strong>Color I</strong> i <strong>Color II</strong>.\n\nAby stworzyć nową rodzinę styli lub styl wchodzący w skład danej rodziny styli wystarczy stworzyć kolejny obiekt w pliku <strong>styles.json</strong> a następnie stworzyć pliki CSS powiązane z daną rodziną - w wypadku rodziny <strong>color</strong> są to pliki <strong>style1.css</strong> oraz <strong>style2.css</strong>.\n\nGavernWP sam wczyta w sekcji <strong>head</strong> pliki CSS danego stylu - wybrane w panelu administracyjnym lub jeżeli jest włączone narzędzie do wyboru styli użytkownika - zostaną one wczytane na bazie pliku Cookie przechowującego dane o wybranym stylu użytkownika.\n\nNależy przy tym pamiętać, że dla każdej rodziny styli wczytywany jest co najmniej jeden plik CSS. Dlatego też tworzenie współistniejących rodzin styli takich jak:\n<ul>\n	<li><strong>dark styles</strong> i <strong>light styles</strong></li>\n	<li><strong>blue styles</strong> i <strong>green styles</strong></li>\n</ul>\njest niepoprawne, gdyż co najmniej jeden styl CSS z każdej rodziny będzie od razu wczytany. Za to poprawnym jest stworzenie rodzin styli odpowiadających za pewne elementy stylowania strony np. oddzielna rodzina odpowiadająca za kolorystykę strony (<strong>colors</strong>) i oddzielna rodzina odpowiadająca za tło strony (<strong>patterns</strong>).\n\nOgólnie należy zadbać o to by poszczególne rodziny styli nie nadpisywały się wzajemnie','Color Styles','','inherit','open','open','','349-revision','','','2012-07-09 09:55:58','2012-07-09 09:55:58','',349,'{$page_url}/uncategorized/349-revision/',0,'revision','',0),(351,1,'2012-07-09 10:24:12','2012-07-09 10:24:12','GavernWP makes possible to create themes based on Responsive Web Design. That\'s why, it has two additional CSS styles:\r\n<ul>\r\n	<li>tablet.css</li>\r\n	<li>mobile.css</li>\r\n</ul>\r\nThanks to options available in an administration panel, it is possible to specify when these styles will be loaded.\r\n\r\nTwo column layout (if a column is switched on) is loaded when tablet.css file is not loaded.\r\n\r\nAt the moment of reaching maximum width for tablet.css file, page\'s layout is changed into one column and the column itself is placed before or after page\'s main content.\r\n\r\nAdditionally, in widget positions like top or bottom1/2/3, modules from three column layout are changed into one column  layout.\r\n\r\nAfter loading mobile.css file there is one column layout used everywhere.\r\n\r\nA very important improvement is a possibility of specifying whether a module will be loaded in tablet or mobile mode. More information can be found in Widget Rules entry.','Responsive Layout','','publish','open','open','','responsive-layout','','','2012-08-12 18:04:14','2012-08-12 18:04:14','',0,'{$page_url}/?p=351',0,'post','',0),(352,1,'2012-07-09 10:23:39','2012-07-09 10:23:39','GavernWP umożliwia tworzenie szablonów w oparciu o Responsive Web Design. Dlatego też posiada on dwa dodatkowe style CSS:\n<ul>\n	<li>tablet.css</li>\n	<li>mobile.css</li>\n</ul>\nDzięki opcjom dostępnym w panelu administracyjnym można określić kiedy dokładnie będą wczytywane te style CSS.\n\nUkład dwukolumnowy (o ile kolumna jest włączona) wczytywany jest wtedy gdy nie jest wczytywany plik tablet.css.\n\nW momencie osiągnięcia granicznej szerokości dla pliku tablet.css układ strony przekształcany jest w jednokolumnowy a sama kolumna ląduję przed lub za treścią główną strony.\n\nDodatkowo w pozycjach widżetów takich jak top czy bottom1/2/3 moduły z układu trójkolumnowego przekształcają się na układ jednokolumnowy.\n\nNatomiast po wczytaniu pliku mobile.css wszędzie stosowany jest układ jednokolumnowy.\n\nBardzo ważnym udogodnieniem jest możliwość określenia czy moduł będzie wczytywany w trybie tabletowym lub mobilnym - więcej na ten temat m','Responsive Layout','','inherit','open','open','','351-revision','','','2012-07-09 10:23:39','2012-07-09 10:23:39','',351,'{$page_url}/uncategorized/351-revision/',0,'revision','',0),(353,1,'2012-07-09 10:28:40','2012-07-09 10:28:40','<a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> is a technology which allows to create your own browsing engine used by a browser. Thanks to it, e.g. in a Firefox browser, a user may define a new browser after entering our website based on GavernWP framework. Because of it, in the case of more extensive websites, e.g. data catalogs, searching is much easier.\r\n\r\nSwitching on support for Open Search requires switching on one option in an administration panel in a tab of advanced settings. All other operations are made with GavernWP.','Open Search support','','publish','open','open','','open-search-support','','','2012-08-12 17:55:47','2012-08-12 17:55:47','',0,'{$page_url}/?p=353',0,'post','',0),(354,1,'2012-07-09 10:27:53','2012-07-09 10:27:53','<a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> to technologia pozwalająca na stworzenie własnego silnika wyszukiwania wykorzystywanego przez przeglądarkę. Dzięki temu np. w przeglądarce Firefox użytkownik może po wejściu na naszą stronę opartą o framework GavernWP, zdefiniować nową wyszukiwarkę - dzięki temu w wypadku bardziej rozbudowanych witryn np. katalogów danych, wyszukiwanie staje się znacząco prostsze.\n\nWłączenie wsparcia dla Open Search wymaga włączenia jednej opcji w panelu admini','Open Search support','','inherit','open','open','','353-revision','','','2012-07-09 10:27:53','2012-07-09 10:27:53','',353,'{$page_url}/uncategorized/353-revision/',0,'revision','',0),(355,1,'2012-08-12 17:28:42','2012-08-12 17:28:42','<a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> is a technology which allows to create your own browsing engine used by a browser. Thanks to it, e.g. in a Firefox browser, a user may define a new browser after entering our website based on GavernWP framework. Because of it, in the case of more extensive websites, e.g. data catalogs, searching is much easier.\n\nSwitching on support for Open Search requires switching on one option in an administration panel in a tab of advanced settings. All other operations are made with GavernWP.','Open Search support','','inherit','open','open','','353-autosave','','','2012-08-12 17:28:42','2012-08-12 17:28:42','',353,'{$page_url}/uncategorized/353-autosave/',0,'revision','',0),(356,1,'2012-07-09 10:36:35','2012-07-09 10:36:35','Thanks to Social API, adding buttons to an entry for sharing posts in the most popular social network services is very easy.\r\n\r\nAt the moment, Social API supports four services:\r\n<ul>\r\n	<li>Facebook</li>\r\n	<li>Google+</li>\r\n	<li>Twitter</li>\r\n	<li>Pinterest</li>\r\n</ul>\r\nButtons for sharing are generally added under an entry. All contact data needed for sharing are loaded from entry content or from OpenGraph metatags.\r\n\r\nThanks to extensive configuration options, it is possible to adjust buttons look in accordance with available configuration parameters.\r\n\r\nThe most important thing is that the work of Social API can be limited to specific posts or switch off some posts from its work.','Social API','','publish','open','open','','social-api','','','2012-08-12 18:11:55','2012-08-12 18:11:55','',0,'{$page_url}/?p=356',0,'post','',0),(357,1,'2012-07-09 10:36:11','2012-07-09 10:36:11','Dzięki Social API dodanie do wpisu przycisków udostępniania postów w najpopularniejszych portalach społecznościowych jest banalnie proste.\n\nSocial API wspiera obecnie cztery serwisy:\n<ul>\n	<li>Facebook</li>\n	<li>Google+</li>\n	<li>Twitter</li>\n	<li>Pinterest</li>\n</ul>\nPrzyciski udostępniania dodawane są z reguły pod wpisem. Wszelkie dane dodatkowe potrzebne do udostępnienia pobierane sa z treści wpisu lub metatagów OpenGraph.\n\nDzięki rozbudowanym opcjom konfiguracyjnym, można samodzielnie dobrać wygląd przycisków zgodnie z obecnie dostępnymi parametrami konfiguracyjnymi.\n\nCo najważniejsze zakres działania Social API można ograniczyć do konkretnych postów lub też wyłączyć z','Social API','','inherit','open','open','','356-revision','','','2012-07-09 10:36:11','2012-07-09 10:36:11','',356,'{$page_url}/uncategorized/356-revision/',0,'revision','',0),(460,1,'2012-07-19 21:53:19','2012-07-19 21:53:19','Thanks to Social API, adding buttons to an entry for sharing posts in the most popular social network services is very easy.\r\n\r\nAt the moment, Social API supports four services:\r\n<ul>\r\n	<li>Facebook</li>\r\n	<li>Google+</li>\r\n	<li>Twitter</li>\r\n	<li>Pinterest</li>\r\n</ul>\r\nButtons for sharing are generally added under an entry. All contact data needed for sharing are loaded from entry content or from OpenGraph metatags.\r\n\r\nThanks to extensive configuration options, it is possible to adjust buttons look in accordance with available configuration parameters.\r\n\r\nThe most important thing is that the work of Social API can be limited to specific posts or switch off some posts fro its work.','Social API','','inherit','open','open','','356-revision-3','','','2012-07-19 21:53:19','2012-07-19 21:53:19','',356,'{$page_url}/uncategorized/356-revision-3/',0,'revision','',0),(358,1,'2012-08-12 17:28:40','2012-08-12 17:28:40','Thanks to Social API, adding buttons to an entry for sharing posts in the most popular social network services is very easy.\n\nAt the moment, Social API supports four services:\n<ul>\n	<li>Facebook</li>\n	<li>Google+</li>\n	<li>Twitter</li>\n	<li>Pinterest</li>\n</ul>\nButtons for sharing are generally added under an entry. All contact data needed for sharing are loaded from entry content or from OpenGraph metatags.\n\nThanks to extensive configuration options, it is possible to adjust buttons look in accordance with available configuration parameters.\n\nThe most important thing is that the work of Social API can be limited to specific posts or switch off some posts from its work.','Social API','','inherit','open','open','','356-autosave','','','2012-08-12 17:28:40','2012-08-12 17:28:40','',356,'{$page_url}/uncategorized/356-autosave/',0,'revision','',0),(359,1,'2012-07-10 06:25:25','2012-07-10 06:25:25','Each theme\'s subpage in GavernWP is created and based on one file from theme\'s main catalog, e.g. <strong>single.php</strong> and at least four additional files from <strong>layouts</strong> catalog:\r\n<ul>\r\n	<li><strong>header.php</strong> - this file includes starting page\'s structure i.e. a head section and the whole headline with elements such as: logo, main menu, etc.</li>\r\n	<li><strong>before.php</strong> - there are all widget positions included in this file which are before page\'s main content.</li>\r\n	<li><strong>after.php</strong> - this file is an equivalent of <strong>before.php</strong> file but with one difference - it includes widget positions which are after page\'s main content.</li>\r\n	<li><strong>footer.php</strong> - similarly to <strong>header.php</strong> file, it includes a starting page\'s structure as footer.php includes the ending page\'s structure, i.e. a footer and and elements below.</li>\r\n</ul>\r\nThe above files with a file given from a main catalog, create a basic structure of each page. The remaining elements are generated by additional files or functions. The majority of of such files can be found in <strong>layouts</strong> catalog; e.g. files with names content.post.*.php, include constituents of each post. . Using these files allowed to restrict the amount of code in theme\'s main files and simplify its modification as change e.g. an entry footer requires modification of one or two files only.\r\n\r\nFunctions used for generating additional information displayed in posts are in <strong>gavern/helpers/helpers.layout.fragments.php</strong> file.','Theme structure','','publish','open','open','','template-structure','','','2012-08-12 17:55:19','2012-08-12 17:55:19','',0,'{$page_url}/?p=359',0,'post','',0),(360,1,'2012-07-10 06:23:18','2012-07-10 06:23:18','Każda podstrona szablonu w GavernWP tworzona jest na podstawie jednego pliku z katalogu głównego szablonu np. <strong>single.php</strong> oraz co najmniej czterech plików dodatkowych z katalogu <strong>layouts</strong>:\n<ul>\n	<li><strong>header.php</strong> - plik ten zawiera początkową strukturę strony tj. sekcję head oraz cały nagłówek strony z elementami takimi jak logo, menu główne itd.</li>\n	<li><strong>before.php</strong> - w pliku tym zawarte są wszystkie pozycje widżetów, które znajdują się przed główną treścią strony.</li>\n	<li><strong>after.php</strong> - plik ten jest odpowiednikiem pliku <strong>before.php</strong>, z tą różnicą, że zawiera pozycje widżetów, które znajdują się po głównej treści strony.</li>\n	<li><strong>footer.php</strong> - tak jak plik <strong>header.php</strong> zawiera początkową strukturę strony tak <strong>footer.php</strong> zawiera końcową strukturę strony tj. stopkę i elementy znajdujące się pod nią.</li>\n</ul>\nPowyższe pliki wraz z danym plikiem z katalogu głównego, tworzą podstawową strukturę każdej strony. Pozostałe elementy są generowane przez dodatkowe pliki lub funkcje. Większość takich plików można znaleźć w katalogu <strong>layouts</strong> - dla przykładu pliki o nazwach <strong>content.post.*.php</strong> zawierają składowe elementy każdego posta. Zastosowanie takich plików pozwoliło na znaczne ograniczenie ilości kodu w głównych plikach szablonu oraz ułatwia jego modyfikację gdyż zmiana np. stopki wpisu wymaga modyfikacji jednego lub dwóch a nie kilkunastu plików.\n\nFunkcje używane do generowania dodatkowych informacji wyświetlanych w postach, znajdują się w pliku <strong>gavern/helpers/helpers.layout.fragments.php</strong>.','Template structure','','inherit','open','open','','359-revision','','','2012-07-10 06:23:18','2012-07-10 06:23:18','',359,'{$page_url}/uncategorized/359-revision/',0,'revision','',0),(361,1,'2012-07-10 06:48:59','2012-07-10 06:48:59','Theme\'s CSS code is divided into a few files, loaded in order specified. All these files are in <strong>css</strong> catalog. You have to remember that order of these files is very important and its change may cause unpredictable changes of theme\'s look because of using moving from general styling to detailed styling in CSS code.\r\n\r\nThe list of CSS files used in a theme is presented below (order according to recommended order of loading these files):\r\n<ol>\r\n	<li><strong>normalize.css</strong> - CSS code unifying page\'s elements styling in all browsers</li>\r\n	<li><strong>template.css</strong> - the most important CSS file responsible for page\'s layout styling , basic typography, widget styling, etc.</li>\r\n	<li><strong>wp.css</strong> - CSS rules which are responsible for Wordpress elements styling, e.g. a comments form , comments themselves or posts elements.</li>\r\n	<li><strong>shortcodes.*.css</strong> (optional) - a group of CSS files responsible for typography elements styling inserting to posts with Shortcodes.</li>\r\n	<li><strong>stuff.css</strong> - it includes styling of additional theme\'s elements sucha s breadcrumbs or font-size switcher.</li>\r\n	<li><strong>wp.extensions.css</strong> - CSS rules connected with styling of standard widgets available with Wordpress.</li>\r\n	<li><strong>extensions.css (optional)</strong> - a CSS file which you have to add yourself in the case when you want to style additional widgets. In the case of small changes in widget styling, we recommend to use <strong>override.css</strong> file instead of this file.</li>\r\n	<li><strong>tablet.css</strong> - CSS rules used while displaying a page on tablet devices.</li>\r\n	<li><strong>mobile.css</strong> - CSS rules used while displaying  a page on smartfon devices.</li>\r\n	<li><strong>ie*.css</strong> - a file or a group of CSS files used for correcting page\'s look in an Internet Explorer browser.</li>\r\n	<li><strong>style*.css</strong> - a file or a group of CSS files used for changing coloring or general style of a theme - they are loaded automatically by a mechanism responsible for theme\'s coloring.</li>\r\n	<li><strong>override.css</strong> (optional) - you may add your own rules in this file which will overwrite existing rules in previous files - a perfect solution for theme modification without modifying the remaining CSS files.</li>\r\n</ol>\r\nAdditionally, CSS code used in a theme itself, you will also find in a <strong>templates</strong> catalog where there are CSS files loaded on chosen styles of subpages, e.g. needed for correct work of a gallery.','Theme CSS','','publish','open','open','','template-css','','','2012-08-12 18:05:39','2012-08-12 18:05:39','',0,'{$page_url}/?p=361',0,'post','',0),(362,1,'2012-07-10 06:48:14','2012-07-10 06:48:14','Kod CSS szablonu podzielony jest na kilka plików, wczytywanych w określonej kolejności. Wszystkie te pliki znajdują się w katalogu <strong>css</strong>. Należy pamiętać, że kolejność tych plików jest bardzo ważna i jej zmiana może powodować nieprzewidywalne zmiany wyglądu szablonu, ze względu na stosowanie w kodzie CSS zasady przechodzenia od stylowania ogólnego do stylowania szczegółowego.\n\nLista plików CSS wykorzystywanych w szablonie prezentuje się następująco (kolejność według zalecanej kolejności wczytywania tych plików):\n<ol>\n	<li><strong>normalize.css</strong> - kod CSS unifikujący stylowanie elementów strony we wszystkich przeglądarkach.</li>\n	<li><strong>template.css</strong> - najważniejszy plik CSS, odpowiadający za stylowanie układu strony, podstawową typografię, bazowe stylowanie widżetów itd.</li>\n	<li><strong>wp.css</strong> - reguły CSS, które odpowiadają za stylowanie elementów Wordpressa np. formularza komentarzy, samych komentarzy czy elementów postów.</li>\n	<li><strong>shortcodes.*.css</strong> (optional) - grupa plików CSS, które są odpowiedzialne za stylowanie elementów typografii wstawianych do postów za pomoca Shortcodes.</li>\n	<li>stuff.css - zawiera stylowanie dodatkowych elementów szablonu takich jak breadcrumbs czy font-size switcher.</li>\n	<li>wp.extensions.css - reguły CSS związane ze stylowaniem standardowych widżetów udostępnianych razem z Wordpressem.</li>\n	<li>extensions.css (optional) - plik CSS, który należy samodzielnie dodać w wypadku gdy chcemy ostylować dodatkowe widżety. W wypadku małych zmian w stylowaniu widżetów zalecamy zamiast tego pliku zastosować plik override.css.</li>\n	<li>tablet.css - reguły CSS wykorzystywane przy wyświetlaniu strony na urządzeniach typu tablet.</li>\n	<li>mobile.css - reguły CSS wykorzystyane przy wyświetlaniu strony na urządzeniach typu smartfon.</li>\n	<li>ie*.css - plik lub grupa plików CSS wykorzystywanych do poprawienia wyglądu strony w przeglądarce Internet Explorer.</li>\n	<li>style*.css - plik lub grupa plików CSS wykorzystywanych do zmiany kolorystyki lub ogólnej stylistyki szablonu - wczytywane automatycznie przez mechanizm odpowiadający za kolorystykę szablonu.</li>\n	<li>override.css (optional) - w pliku tym można dodać własne reguły CSS, które nadpiszą istniejące reguły w poprzednich plikach - idealne rozwiązanie do modyfikacji szablonu bez modyfikowania pozostałych plików CSS.</li>\n</ol>\nDodatkowo kod CSS używany w samym szablonie znajdziemy też w katalogu <strong>templates</strong>, gdzie znajdują się pliki CSS wczytywane tylko na wybranych stylach podstron np. potrzebne do poprawnego działania galerii.','Template CSS','','inherit','open','open','','361-revision','','','2012-07-10 06:48:14','2012-07-10 06:48:14','',361,'{$page_url}/uncategorized/361-revision/',0,'revision','',0),(464,1,'2012-07-10 07:04:27','2012-07-10 07:04:27','GavernWP posiada wsparcie dla komentarzy z podziałem na wątki. Dzięki temu dyskusje prowadzone w komentarzach pod danym postem są dużo czytelniejsze.\r\n\r\nWszystkie opcje związane z konfiguracją komentarzy można ustawić korzystając ze standardowych opcji w panelu administracyjnym Wordpress (<em>Settings &gt; Discussion</em>). Wątki w komentarzach włączane są dzięki opcji \"<em><label for=\"thread_comments\">Enable threaded (nested) comments</label></em>\" i określeniu maksymalnej głębokości zagnieżdżeń odpowiedzi w wątkach.\r\n\r\nZa generowanie kodu HTML komentarzy w GavernWP odpowiadają dwa pliki:\r\n<ul>\r\n	<li><strong>comments.php</strong> - zawiera on kod generujący listę komentarzy oraz formularz ich dodawania.</li>\r\n	<li><strong>gavern/helpers/helper.layout.fragments.php</strong> - w funkcji <strong>gavern_comment_template</strong> znajduje się kod odpowiadający za wygenerowanie kodu danego komentarza.</li>\r\n</ul>\r\nKod CSS odpowiadający za stylistykę komentarzy i formularza dodawania komentarzy znajduje się w pliku <strong>css/wp.css</strong>.','Threaded comments','','inherit','open','open','','364-revision-2','','','2012-07-10 07:04:27','2012-07-10 07:04:27','',364,'{$page_url}/uncategorized/364-revision-2/',0,'revision','',0),(363,1,'2012-08-12 18:05:36','2012-08-12 18:05:36','Theme\'s CSS code is divided into a few files, loaded in order specified. All these files are in <strong>css</strong> catalog. You have to remember that order of these files is very important and its change may cause unpredictable changes of theme\'s look because of using moving from general styling to detailed styling in CSS code.\n\nThe list of CSS files used in a theme is presented below (order according to recommended order of loading these files):\n<ol>\n	<li><strong>normalize.css</strong> - CSS code unifying page\'s elements styling in all browsers</li>\n	<li><strong>template.css</strong> - the most important CSS file responsible for page\'s layout styling , basic typography, widget styling, etc.</li>\n	<li><strong>wp.css</strong> - CSS rules which are responsible for Wordpress elements styling, e.g. a comments form , comments themselves or posts elements.</li>\n	<li><strong>shortcodes.*.css</strong> (optional) - a group of CSS files responsible for typography elements styling inserting to posts with Shortcodes.</li>\n	<li><strong>stuff.css</strong> - it includes styling of additional theme\'s elements sucha s breadcrumbs or font-size switcher.</li>\n	<li><strong>wp.extensions.css</strong> - CSS rules connected with styling of standard widgets available with Wordpress.</li>\n	<li><strong>extensions.css (optional)</strong> - a CSS file which you have to add yourself in the case when you want to style additional widgets. In the case of small changes in widget styling, we recommend to use <strong>override.css</strong> file instead of this file.</li>\n	<li><strong>tablet.css</strong> - CSS rules used while displaying a page on tablet devices.</li>\n	<li><strong>mobile.css</strong> - CSS rules used while displaying  a page on smartfon devices.</li>\n	<li><strong>ie*.css</strong> - a file or a group of CSS files used for correcting page\'s look in an Internet Explorer browser.</li>\n	<li><strong>style*.css</strong> - a file or a group of CSS files used for changing coloring or general style of a theme - they are loaded automatically by a mechanism responsible for theme\'s coloring.</li>\n	<li><strong>override.css</strong> (optional) - you may add your own rules in this file which will overwrite existing rules in previous files - a perfect solution for theme modification without modifying the remaining CSS files.</li>\n</ol>\nAdditionally, CSS code used in a theme itself, you will also find in a <strong>templates</strong> catalog where there are CSS files loaded on chosen styles of subpages, e.g. needed for correct work of a gallery.','Theme CSS','','inherit','open','open','','361-autosave','','','2012-08-12 18:05:36','2012-08-12 18:05:36','',361,'{$page_url}/uncategorized/361-autosave/',0,'revision','',0),(463,1,'2012-07-10 06:48:59','2012-07-10 06:48:59','Kod CSS szablonu podzielony jest na kilka plików, wczytywanych w określonej kolejności. Wszystkie te pliki znajdują się w katalogu <strong>css</strong>. Należy pamiętać, że kolejność tych plików jest bardzo ważna i jej zmiana może powodować nieprzewidywalne zmiany wyglądu szablonu, ze względu na stosowanie w kodzie CSS zasady przechodzenia od stylowania ogólnego do stylowania szczegółowego.\r\n\r\nLista plików CSS wykorzystywanych w szablonie prezentuje się następująco (kolejność według zalecanej kolejności wczytywania tych plików):\r\n<ol>\r\n	<li><strong>normalize.css</strong> - kod CSS unifikujący stylowanie elementów strony we wszystkich przeglądarkach.</li>\r\n	<li><strong>template.css</strong> - najważniejszy plik CSS, odpowiadający za stylowanie układu strony, podstawową typografię, bazowe stylowanie widżetów itd.</li>\r\n	<li><strong>wp.css</strong> - reguły CSS, które odpowiadają za stylowanie elementów Wordpressa np. formularza komentarzy, samych komentarzy czy elementów postów.</li>\r\n	<li><strong>shortcodes.*.css</strong> (optional) - grupa plików CSS, które są odpowiedzialne za stylowanie elementów typografii wstawianych do postów za pomoca Shortcodes.</li>\r\n	<li><strong>stuff.css</strong> - zawiera stylowanie dodatkowych elementów szablonu takich jak breadcrumbs czy font-size switcher.</li>\r\n	<li><strong>wp.extensions.css</strong> - reguły CSS związane ze stylowaniem standardowych widżetów udostępnianych razem z Wordpressem.</li>\r\n	<li><strong>extensions.css (optional)</strong> - plik CSS, który należy samodzielnie dodać w wypadku gdy chcemy ostylować dodatkowe widżety. W wypadku małych zmian w stylowaniu widżetów zalecamy zamiast tego pliku zastosować plik <strong>override.css</strong>.</li>\r\n	<li><strong>tablet.css</strong> - reguły CSS wykorzystywane przy wyświetlaniu strony na urządzeniach typu tablet.</li>\r\n	<li><strong>mobile.css</strong> - reguły CSS wykorzystyane przy wyświetlaniu strony na urządzeniach typu smartfon.</li>\r\n	<li><strong>ie*.css</strong> - plik lub grupa plików CSS wykorzystywanych do poprawienia wyglądu strony w przeglądarce Internet Explorer.</li>\r\n	<li><strong>style*.css</strong> - plik lub grupa plików CSS wykorzystywanych do zmiany kolorystyki lub ogólnej stylistyki szablonu - wczytywane automatycznie przez mechanizm odpowiadający za kolorystykę szablonu.</li>\r\n	<li><strong>override.css</strong> (optional) - w pliku tym można dodać własne reguły CSS, które nadpiszą istniejące reguły w poprzednich plikach - idealne rozwiązanie do modyfikacji szablonu bez modyfikowania pozostałych plików CSS.</li>\r\n</ol>\r\nDodatkowo kod CSS używany w samym szablonie znajdziemy też w katalogu <strong>templates</strong>, gdzie znajdują się pliki CSS wczytywane tylko na wybranych stylach podstron np. potrzebne do poprawnego działania galerii.','Template CSS','','inherit','open','open','','361-revision-2','','','2012-07-10 06:48:59','2012-07-10 06:48:59','',361,'{$page_url}/uncategorized/361-revision-2/',0,'revision','',0),(364,1,'2012-07-10 07:04:27','2012-07-10 07:04:27','GavernWP has support for comments with a division into threads. Thanks to it, discussions made in comments under a post given are clearer.\r\n\r\nAll options connected with comments configuration can be set by using standard options in a Wordpress administration panel (Settings &gt; Discussion). Threads in comments are switched on thanks to \"Enable threaded (nested) comments\" and specifying maximal depth of nested comments in threads.\r\n\r\nThere are two files responsible for generating HTML code of comments, namely:\r\n<ul>\r\n	<li><strong>comments.php</strong> - it includes a code which generates a comments list and a form of adding comments.</li>\r\n	<li><strong>gavern/helpers/helper.layout.fragments.php</strong> - in <strong>gavern_comment_template</strong> function, there is a code responsible for generating a code of a comment given.</li>\r\n</ul>\r\nCSS code responsible for a style of comments and a form of adding comments is in <strong>css/wp.css</strong> file.<strong></strong>','Threaded comments','','publish','open','open','','threaded-comments-2','','','2012-08-12 18:06:00','2012-08-12 18:06:00','',0,'{$page_url}/?p=364',0,'post','',0),(365,1,'2012-07-10 07:03:45','2012-07-10 07:03:45','GavernWP posiada wsparcie dla komentarzy z podziałem na wątki. Dzięki temu dyskusje prowadzone w komentarzach pod danym postem są dużo czytelniejsze.\n\nWszystkie opcje związane z konfiguracją komentarzy można ustawić korzystając ze standardowych opcji w panelu administracyjnym Wordpress (<em>Settings &gt; Discussion</em>). Wątki w komentarzach włączane są dzięki opcji \"<em><label for=\"thread_comments\">Enable threaded (nested) comments</label></em>\" i określeniu maksymalnej głębokości zagnieżdżeń odpowiedzi w wątkach.\n\nZa generowanie kodu HTML komentarzy w GavernWP odpowiadają dwa pliki:\n<ul>\n	<li><strong>comments.php</strong> - zawiera on kod generujący listę komentarzy oraz formularz ich dodawania.</li>\n	<li><strong>gavern/helpers/helper.layout.fragments.php</strong> - w funkcji <strong>gavern_comment_template</strong> znajduje się kod odpowiadający za wygenerowanie kodu danego komentarza.</li>\n</ul>\nKod CSS odpowiadający za stylistyk','Threaded comments','','inherit','open','open','','364-revision','','','2012-07-10 07:03:45','2012-07-10 07:03:45','',364,'{$page_url}/uncategorized/364-revision/',0,'revision','',0),(468,1,'2012-07-23 08:57:07','2012-07-23 08:57:07','GavernWP makes accessible a few own styles of subpages. Thanks to them, it is possible to use Wordpress possiblitities better  and adjusting pages to themes chosen.\r\n\r\nAll additional subpages styles are placed in a main catalog in <strong>template.*.php</strong> files. GavernWP has the following subpages:\r\n<ul>\r\n	<li><strong>template.archive.php</strong> - strona archiwum, zawiera listę ostatnich postów, kategorii oraz listę linków do archiwów miesięcznych</li>\r\n	<li><strong>template.contact.php</strong> - strona z formularzem kontaktowym, który pozwala na wysłanie maila pod określony w konfiguracji Wordpressa adres e-mail.</li>\r\n	<li><strong>template.fullwidth.php</strong> - układ strony bez bocznego sidebar\'a.</li>\r\n	<li><strong>template.gallery.php</strong> - strona generująca animowaną galerię zdjęć z wykorzystaniem dostępnego w Wordpress mechanizmu załączników - wystarczy przypisać załączniki do takiej strony by pojawiły się one jako slajdy w galerii. Zalecane jest wybieranie zdjęć, które mają taki sam rozmiar.</li>\r\n	<li><strong>template.login.php</strong> - strona generująca formularz logowania dla użytkowników - po zalogowaniu wyświetla użytkownikowi informacje o jego nazwie użytkownika oraz przycisk do wylogowania się.</li>\r\n	<li><strong>template.tagcloud.php</strong> - strona generująca tag cloud naszej witryny.</li>\r\n</ul>\r\nGłówne style CSS od podstron znajdują się w pliku <strong>css/stuff.css</strong>, jednak należy pamiętać, że niektóre bardziej rozbudowane pliki podstron mogą dodatkowo wczytywać pliki CSS i JavaScript z katalogów <strong>css/templates/</strong> oraz <strong>js/templates/</strong>.\r\n\r\nAby wczytać w ten sposób dodatkowe pliki wystarczy zdefiniować drugi parametr funkcji <strong>gk_load</strong> (patrz: kod wywołania funkcji <strong>gk_load</strong> w pliku <strong>template.gallery.php</strong>).','Custom Page Styles','','inherit','open','open','','367-revision-4','','','2012-07-23 08:57:07','2012-07-23 08:57:07','',367,'{$page_url}/uncategorized/367-revision-4/',0,'revision','',0),(366,1,'2012-08-12 17:28:34','2012-08-12 17:28:34','GavernWP has support for comments with a division into threads. Thanks to it, discussions made in comments under a post given are clearer.\n\nAll options connected with comments configuration can be set by using standard options in a Wordpress administration panel (Settings &gt; Discussion). Threads in comments are switched on thanks to \"Enable threaded (nested) comments\" and specifying maximal depth of nested comments in threads.\n\nThere are two files responsible for generating HTML code of comments, namely:\n<ul>\n	<li><strong>comments.php</strong> - it includes a code which generates a comments list and a form of adding comments.</li>\n	<li><strong>gavern/helpers/helper.layout.fragments.php</strong> - in <strong>gavern_comment_template</strong> function, there is a code responsible for generating a code of a comment given.</li>\n</ul>\nCSS code responsible for a style of comments and a form of adding comments is in <strong>css/wp.css</strong> file.<strong></strong>','Threaded comments','','inherit','open','open','','364-autosave','','','2012-08-12 17:28:34','2012-08-12 17:28:34','',364,'{$page_url}/uncategorized/364-autosave/',0,'revision','',0),(367,1,'2012-07-10 07:18:36','2012-07-10 07:18:36','GavernWP makes accessible a few own styles of subpages. Thanks to them, it is possible to use Wordpress possiblitities better  and adjusting pages to themes chosen.\r\n\r\nAll additional subpages styles are placed in a main catalog in <strong>template.*.php</strong> files. GavernWP has the following subpages:\r\n<ul>\r\n	<li><strong>template.archive.php</strong> - an archive page, in includes a list of recent posts, categories and a list of links to monthly archives.</li>\r\n	<li><strong>template.contact.php</strong> - a page with a contact form which allows to send an email to an email address specified in a Wordpress configuration.</li>\r\n	<li><strong>template.fullwidth.php</strong> - a page\'s layout without a sidebar.</li>\r\n	<li><strong>template.gallery.php</strong> - a page generating an animated gallery of images with a mechanism of attachments available in Wordpress - it is enough to assign attachments to such a page that they will show as slides in a gallery. It is recommened to choose images with the same size.</li>\r\n	<li><strong>template.login.php</strong> - a page generating a login form for users - after logging in, it displays information about his/her username and a button to log out.</li>\r\n	<li><strong>template.tagcloud.php</strong> - a page generating a tag cloud of our website.</li>\r\n</ul>\r\nMain CSS styles of subpages are in a <strong>css/stuff.css</strong> file. However, you have to remember that some more extensive files of subpages may additionally load CSS and JavaScript files from <strong>css/templates/</strong> and <strong>js/templates/</strong>.\r\n\r\nIn order to load additional files in this way, it is enough to specify the second parameter of a <strong>gk_load</strong> function (see: code of requesting a <strong>gk_load</strong> function in a <strong>template.gallery.php</strong> file).','Custom Page Styles','','publish','open','open','','custom-page-styles-2','','','2012-08-12 18:06:59','2012-08-12 18:06:59','',0,'{$page_url}/?p=367',0,'post','',0),(368,1,'2012-07-10 07:18:12','2012-07-10 07:18:12','GavernWP udostępnia kilka własnych styli podstron. Dzięki nim możliwe jest lepsze wykorzystanie możliwości Wordpressa oraz dostosowanie stron do wybranej tematyki.\n\nWszystkie dodatkowe style podstron są umieszczone w katalogu głównym w plikach <strong>template.*.php</strong>. Standardowo GavernWP zawiera następujace rodzaje podstron:\n<ul>\n	<li><strong>template.archive.php</strong> - strona archiwum, zawiera listę ostatnich postów, kategorii oraz listę linków do archiwów miesięcznych</li>\n	<li><strong>template.contact.php</strong> - strona z formularzem kontaktowym, który pozwala na wysłanie maila pod określony w konfiguracji Wordpressa adres e-mail.</li>\n	<li><strong>template.fullwidth.php</strong> - układ strony bez bocznego sidebar\'a.</li>\n	<li><strong>template.gallery.php</strong> - strona generująca animowaną galerię zdjęć z wykorzystaniem dostępnego w Wordpress mechanizmu załączników - wystarczy przypisać załączniki do takiej strony by pojawiły się one jako slajdy w galerii. Zalecane jest wybieranie zdjęć, które mają taki sam rozmiar.</li>\n	<li><strong>template.login.php</strong> - strona generująca formularz logowania dla użytkowników - po zalogowaniu wyświetla użytkownikowi informacje o jego nazwie użytkownika oraz przycisk do wylogowania się.</li>\n	<li><strong>template.tagcloud.php</strong> - strona generująca tag cloud naszej witryny.</li>\n</ul>\nGłówne style CSS od podstron znajdują się w pliku <strong>css/stuff.css</strong>, jednak należy pamiętać, że niektóre bardziej rozbudowane pliki podstron mogą dodatkowo wczytywać pliki CSS i JavaScript z katalogów <strong>css/templates/</strong> oraz <strong>js/templates/</strong>.\n\nAby wczytać w ten sposób pliki wystarczy zdefiniować drugi parametr funkcji gk_load (patrz: kod wywołania funkcji <strong>gk_load</strong> w pliku <strong>template.gallery.php</strong>).','Custom Page Styles','','inherit','open','open','','367-revision','','','2012-07-10 07:18:12','2012-07-10 07:18:12','',367,'{$page_url}/uncategorized/367-revision/',0,'revision','',0),(469,1,'2012-07-23 09:14:23','2012-07-23 09:14:23','GavernWP makes accessible a few own styles of subpages. Thanks to them, it is possible to use Wordpress possiblitities better  and adjusting pages to themes chosen.\r\n\r\nAll additional subpages styles are placed in a main catalog in <strong>template.*.php</strong> files. GavernWP has the following subpages:\r\n<ul>\r\n	<li><strong>template.archive.php</strong> - an archive page, in includes a list of recent posts, categories and a list of links to monthly archives.</li>\r\n	<li><strong>template.contact.php</strong> - a page with a contact form which allows to send an email to an email address specified in a Wordpress configuration.</li>\r\n	<li><strong>template.fullwidth.php</strong> - a page\'s layout without a sidebar.</li>\r\n	<li><strong>template.gallery.php</strong> - a page generating an animated gallery of images with a mechanism of attachments available in Wordpress - it is enough to assign attachments to such a page that they will show as slides in a gallery. It is recommened to choose images with the same size.</li>\r\n	<li><strong>template.login.php</strong> - a page generating a login form for users - after logging in, it displays information about his/her username and a button to log out.</li>\r\n	<li><strong>template.tagcloud.php</strong> - strona generująca tag cloud naszej witryny.</li>\r\n</ul>\r\nGłówne style CSS od podstron znajdują się w pliku <strong>css/stuff.css</strong>, jednak należy pamiętać, że niektóre bardziej rozbudowane pliki podstron mogą dodatkowo wczytywać pliki CSS i JavaScript z katalogów <strong>css/templates/</strong> oraz <strong>js/templates/</strong>.\r\n\r\nAby wczytać w ten sposób dodatkowe pliki wystarczy zdefiniować drugi parametr funkcji <strong>gk_load</strong> (patrz: kod wywołania funkcji <strong>gk_load</strong> w pliku <strong>template.gallery.php</strong>).','Custom Page Styles','','inherit','open','open','','367-revision-5','','','2012-07-23 09:14:23','2012-07-23 09:14:23','',367,'{$page_url}/uncategorized/367-revision-5/',0,'revision','',0),(369,1,'2012-08-12 17:28:32','2012-08-12 17:28:32','GavernWP makes accessible a few own styles of subpages. Thanks to them, it is possible to use Wordpress possiblitities better  and adjusting pages to themes chosen.\n\nAll additional subpages styles are placed in a main catalog in <strong>template.*.php</strong> files. GavernWP has the following subpages:\n<ul>\n	<li><strong>template.archive.php</strong> - an archive page, in includes a list of recent posts, categories and a list of links to monthly archives.</li>\n	<li><strong>template.contact.php</strong> - a page with a contact form which allows to send an email to an email address specified in a Wordpress configuration.</li>\n	<li><strong>template.fullwidth.php</strong> - a page\'s layout without a sidebar.</li>\n	<li><strong>template.gallery.php</strong> - a page generating an animated gallery of images with a mechanism of attachments available in Wordpress - it is enough to assign attachments to such a page that they will show as slides in a gallery. It is recommened to choose images with the same size.</li>\n	<li><strong>template.login.php</strong> - a page generating a login form for users - after logging in, it displays information about his/her username and a button to log out.</li>\n	<li><strong>template.tagcloud.php</strong> - a page generating a tag cloud of our website.</li>\n</ul>\nMain CSS styles of subpages are in a <strong>css/stuff.css</strong> file. However, you have to remember that some more extensive files of subpages may additionally load CSS and JavaScript files from <strong>css/templates/</strong> and <strong>js/templates/</strong>.\n\nIn order to load additional files in this way, it is enough to specify the second parameter of a <strong>gk_load</strong> function (see: code of requesting a <strong>gk_load</strong> function in a <strong>template.gallery.php</strong> file).','Custom Page Styles','','inherit','open','open','','367-autosave','','','2012-08-12 17:28:32','2012-08-12 17:28:32','',367,'{$page_url}/uncategorized/367-autosave/',0,'revision','',0),(370,1,'2012-07-10 07:59:29','2012-07-10 07:59:29','Widget rules is a mechanism which introduces a completely new way to manage widgets on a website. Thanks to it, it is possible to specify widget features such as:\r\n<ul>\r\n	<li>displaying on subpages chosen,</li>\r\n	<li>displaying on devices chosen,</li>\r\n	<li>displaying for a group of users chosen,</li>\r\n	<li>displaying with a widget style use chosen.</li>\r\n</ul>\r\nAfter switching on widget rules in theme\'s advanced settings, under each widget, the following options should be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\r\n\r\nThe most extensive options are those connected with a widget visibility on subpages chosen - after choosing an option to show a widget on pages chosen (or an option not showing a widget on pages chosen), such a panel will appear:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\r\n\r\nThen, you have to choose a page\'s type to add, e.g. Category, and then give category ID:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\r\n\r\nAfter clicking \"Add page\" button, a page will appear on a list of pages chosen on which in our case a widget will be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\r\n\r\nOf course, it is possible to add more pages:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\r\n\r\nTo make it clearer, , each page\'s type is displayed with a different color. A page added can be removed by clicking a removing icon placed on the right side of each page.\r\n\r\nIn this way, you may set a widget so as to be shown on pages chosen or to be shown on all pages except the chosen ones.\r\n\r\nGenerally, widgets are shown on all pages.\r\n\r\nAn option of displaying a widget on devices chosen has five options to choose:\r\n<ul>\r\n	<li><strong>All devices</strong> - a widget will be displayed everytwhere - on every device</li>\r\n	<li><strong>Desktop</strong> - a widget will be displayed only when neither a <strong>tablet.css</strong> file nor a <strong>mobile.css</strong> is loaded <strong></strong></li>\r\n	<li><strong>Tablets</strong> - a widget displays only when a <strong>tablet.css</strong> file will be loaded and, at the same time, a <strong>mobile.css</strong> file will not be loaded <strong></strong></li>\r\n	<li><strong>Smartphones</strong> - a widget will be displayed only when a <strong>mobile.css</strong> file will be loaded</li>\r\n	<li><strong>Tablets/Smartphones</strong> - a widget will be displayed when at least one file will be loaded: <strong>tablet.css</strong> or <strong>mobile.css</strong>.</li>\r\n</ul>\r\nThanks to these settings, it is possible to limit significantly the amount of content displayed on devices with small screens.\r\n\r\nAn option of displaying widget for a chosen groups of users has four options to choose:\r\n<ul>\r\n	<li><strong>All users</strong> - a widget will be displayed to all users</li>\r\n	<li><strong>Only guests</strong> - a widget will be displayed to not logged in users</li>\r\n	<li><strong>Only registered users</strong> - a widget will be displayed to logged in users only</li>\r\n	<li><strong>Only administrator</strong> - a widget will be displayed to administrators only</li>\r\n</ul>\r\nThanks to this option, it is possible e.g. to display messages specified by using widgets for a group of users chosen.\r\n\r\nThe last optio from widget rules is an option for choosing a widget style - it causes appending to a widget main container an additional class giving styling specified by a user.\r\n\r\nWidget styles are defined in widget.styles.json file and in CSS code - in this case in <strong>css/wp.extensions.css</strong>.<strong></strong>','Widget rules','','publish','open','open','','widget-rules-2','','','2012-08-12 17:54:32','2012-08-12 17:54:32','',0,'{$page_url}/?p=370',0,'post','',0),(371,1,'2012-07-10 07:42:44','2012-07-10 07:42:44','','Widgets ‹ Meet Gavern WP — WordPress-1','','inherit','open','open','','widgets-meet-gavern-wp-wordpress-1','','','2012-07-10 07:42:44','2012-07-10 07:42:44','',370,'{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg',0,'attachment','image/jpeg',0),(372,1,'2012-07-10 07:44:41','2012-07-10 07:44:41','','Widgets ‹ Meet Gavern WP — WordPress-1-1','','inherit','open','open','','widgets-meet-gavern-wp-wordpress-1-1','','','2012-07-10 07:44:41','2012-07-10 07:44:41','',370,'{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg',0,'attachment','image/jpeg',0),(373,1,'2012-07-10 07:46:28','2012-07-10 07:46:28','','Widgets ‹ Meet Gavern WP — WordPress-2','','inherit','open','open','','widgets-meet-gavern-wp-wordpress-2','','','2012-07-10 07:46:28','2012-07-10 07:46:28','',370,'{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg',0,'attachment','image/jpeg',0),(374,1,'2012-07-10 07:47:15','2012-07-10 07:47:15','','Widgets ‹ Meet Gavern WP — WordPress-3','','inherit','open','open','','widgets-meet-gavern-wp-wordpress-3','','','2012-07-10 07:47:15','2012-07-10 07:47:15','',370,'{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg',0,'attachment','image/jpeg',0),(375,1,'2012-07-10 07:48:26','2012-07-10 07:48:26','','Widgets ‹ Meet Gavern WP — WordPress-4','','inherit','open','open','','widgets-meet-gavern-wp-wordpress-4','','','2012-07-10 07:48:26','2012-07-10 07:48:26','',370,'{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg',0,'attachment','image/jpeg',0),(376,1,'2012-07-10 07:58:19','2012-07-10 07:58:19','Widget rules to mechanizm, który wprowadza zupełnie nowy sposób zarządzania widżetami na stronie. Dzięki niemu można określić dla widżeta takie właściwości jak:\n<ul>\n	<li>wyświetlanie na wybranych podstronach</li>\n	<li>wyświetlanie na wybranym typie urządzeń</li>\n	<li>wyświetlanie dla wybranej grupy użytkowników</li>\n	<li>wyświetlanie z użyciem wybranego stylu widżetu</li>\n</ul>\nPo włączeniu widget rules w zaawansowanych ustawieniach szablonu, pod każdym widżetem powinny pojawić się następujace opcje:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\n\nNajbardziej rozbudowane są opcje związane z widocznością widżetu na wybranych podstronach - po wybraniu opcji pokazywania widżetu na wybranych stronach (lub opcji nie pokazywania widżetu na wybranych stronach) pojawi się następujacy panel:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\n\nNależy następnie wybrać typ strony do dodania np. Category a następnie podać ID kategorii:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\n\nPo kliknięciu przycisku \"Add page\" strona pojawi się na liście wybranych stron na których w naszym wypadku będzie wyświetlany widżet:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\n\nStron można oczywiście dodać kilka:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\n\nDla zwiększenia czytelności każdy rodzaj strony wyświetlany jest w innym kolorze. Dodaną już stronę można usunąć klikając ikonę usuwania umieszczoną po prawej stronie każdej ze stron.\n\nW ten sposób można ustawić widżet tak by pojawiał się na wybranych stronach lub żeby pojawiał się on na wszystkich strona poza tymi wybranymi.\n\nStandardowo widżety pokazywane są na wszystkich podstronach.\n\nOpcja wyświetlania widżetu na wybranych urządeniach posiada pięć opcji do wyboru:\n<ul>\n	<li><strong>All devices</strong> - widżet będzie wyświetlany wszędzie - na każdym urządzeniu</li>\n	<li><strong>Desktop</strong> - widżet będzie wyświetlany tylko wtedy gdy nie jest wczytany ani plik <strong>tablet.css</strong> ani plik <strong>mobile.css</strong></li>\n	<li><strong>Tablets</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>tablet.css</strong> i jednocześnie nie będzie wczytany plik <strong>mobile.css</strong></li>\n	<li><strong>Smartphones</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>mobile.css</strong>.</li>\n	<li><strong>Tablets/Smartphones</strong> - widżet wyświetli się gdy wczytany będzie co najmniej jeden z plików <strong>tablet.css</strong> lub <strong>mobile.css</strong>.</li>\n</ul>\nDzięki tym ustawieniom można znacząco ograniczyć ilość treści wyświetlanych na urządzeniach o małych ekranach.\n\nOpcja wyświetlania widżetu dla wybranych grup użytkowników posiada cztery opcje do wyboru:\n<ul>\n	<li><strong>All users</strong> - widżet pojawi się wszystkim użytkownikom</li>\n	<li><strong>Only guests</strong> - widżet pojawi się tylko niezalogowanym użytkownikom</li>\n	<li><strong>Only registered users</strong> - widżet pojawi się tylko zalogowanym użytkownikom</li>\n	<li><strong>Only administrator</strong> - widżet pojawi się tylko administratorom</li>\n</ul>\nDzięki tej opcji można np. wyświetlać określone wiadomości poprzeż użycie widżetów przeznaczone dla wybranej grupy użytkowników.\n\nOstatnią opcję składającą się na widget rules stanowi opcja wyboru stylu widżetu - powoduje ona dopisa','Widget rules','','inherit','open','open','','370-revision','','','2012-07-10 07:58:19','2012-07-10 07:58:19','',370,'{$page_url}/uncategorized/370-revision/',0,'revision','',0),(377,1,'2012-07-11 13:32:57','2012-07-11 13:32:57','GavernWP makes accessible options allowing for theme\'s branding. Branding options are divided into two groups:\r\n<ul>\r\n	<li>theme\'s branding</li>\r\n	<li>administration panel branding</li>\r\n</ul>\r\nThanks to theme\'s branding options, a user may specify:\r\n<ul>\r\n	<li>specify page\'s logo</li>\r\n	<li>specify theme\'s footer content</li>\r\n	<li>decide about displaying a framework logo under page\'s footer</li>\r\n</ul>\r\nMore information about branding options for a theme can be found in an entry devoted to a \"Theme branding\" tab in an administration panel.\r\n\r\nAdministration panel branding options allow to define:\r\n<ul>\r\n	<li>a logo displayed next to a theme\'s name in an administration panel sidebar</li>\r\n	<li>a logo visible over a log in form to an administration panel</li>\r\n</ul>\r\nMore about branding options for an administration panel can be found in an entry devoted to \"Back-end branding\"  in an administration panel.','Branding','','publish','open','open','','branding','','','2012-08-12 18:07:53','2012-08-12 18:07:53','',0,'{$page_url}/?p=377',0,'post','',0),(378,1,'2012-07-11 13:32:53','2012-07-11 13:32:53','GavernWP udostępnia opcje pozwalające na branding szablonu. Opcje brandingu podzielone są na dwie grupy:\n<ul>\n	<li>branding szablonu</li>\n	<li>branding panelu administracyjnego</li>\n</ul>\nDzięki opcjom brandingu szablonu użytkownik może określić:\n<ul>\n	<li>logo strony</li>\n	<li>treść stopki szablonu</li>\n	<li>zdecydować o wyświetlaniu loga frameworka pod stopką strony</li>\n</ul>\nWięcej o opcjach brandingu dla szablonu znajduje się we wpisie poświęconym zakładce \"Template branding\" w panelu administracyjnym.\n\nOpcje brandingu panelu administracyjnego pozwalają na zdefiniowanie:\n<ul>\n	<li>loga wyświetlanego obok nazwy szablonu w sidebarze panelu administracyjnego</li>\n	<li>loga widocznego nad formularzem logowania do panelu administracyjnego</li>\n</ul>\nWięcej o opcjach brandingu dla panelu administracyjnego znajduje się we wpisie poświęconym zakładce \"Back-end branding\" w panelu administracyjnym.','Branding','','inherit','open','open','','377-revision','','','2012-07-11 13:32:53','2012-07-11 13:32:53','',377,'{$page_url}/uncategorized/377-revision/',0,'revision','',0),(380,1,'2012-07-11 13:44:19','2012-07-11 13:44:19','GavernWP has basic support for a new option available in Wordpress 3.4 - an options editor with themes preview. Now, the most important options connected with theme\'s style and its layout has been implemented to a live editor.\r\n\r\nIn order to reach it easier, we placed a direct link to this editor in the top part of themes\' options:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-5.jpg\"><img class=\"aligncenter size-full wp-image-683\" title=\"Live Editor\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-5.jpg\" alt=\"\" width=\"217\" height=\"206\" /></a>\r\n\r\nAll options included in this editor are also available via traditional theme\'s options panel.\r\n\r\nIn order to simplify adding your own options to a live editor, the whole code generating options is placed in a separate file: <strong>gavern/helpers/helpers.customizer.php</strong>.\r\n\r\nYou have to remember that all options and settings from a live editor are stored in the same place as their equivalents from an administration panel so settings change with a live editor causes changes in an options panel. That\'s why, it is recommended not to use a traditional administration panel and a live editor at the same time because saving options with various values in two different places at the same time may not give the expected result.','Theme live editor','','publish','open','open','','theme-live-editor-2','','','2012-08-12 18:09:26','2012-08-12 18:09:26','',0,'{$page_url}/?p=380',0,'post','',0),(381,1,'2012-07-11 13:43:33','2012-07-11 13:43:33','GavernWP posiada podstawowe wsparcie dla nowej opcji dostępnej w Wordpress 3.4 - edytora opcji z podglądem szablonu. Obecnie w live editor zaimplementowano najważniejsze opcje związane ze stylem szablonu i jego układem.\n\nAby można było łatwiej dostać się do tego edytora umieściliśmy w górnej części opcji szablonu bezpośredni link do edytora:\n\n[screenshot]\n\nWszystkie opcje zawarte w tym edytorze dostępne są również poprzez tradycyjny panel opcji szablonu.\n\nAby ułatwić dodawanie własnych opcji do live editor cały kod generujący opcje umieszczono w oddzielnym pliku <strong>gavern/helpers/helpers.customizer.php</strong>.\n\nNależy pamiętać, że wszystkie opcje i ustawienia z live editor są przechowywane w tym samym miejscu co ich odpowiedniki z panelu admistracyjnego zatem zmiana ustawień z użyciem live editor pociąga za sobą zmiany w zwykłym panelu opcji. Dlatego też zalecane jest nie uruchamianie w tym samym momencie tradycyjnego panelu administracyjnego szablonu i live editor, gdyż może zaistnieć sytuacja gd','Theme live editor','','inherit','open','open','','380-revision','','','2012-07-11 13:43:33','2012-07-11 13:43:33','',380,'{$page_url}/uncategorized/380-revision/',0,'revision','',0),(382,1,'2012-07-11 13:50:49','2012-07-11 13:50:49','GavernWP has an update section which allows to access information whether a theme was updated to the latest version. In order to access an updates panel, you have to use \"Updates\" submenu from a main menu of theme\'s options:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-6.jpg\"><img class=\"aligncenter size-full wp-image-685\" title=\"Updates\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-6.jpg\" alt=\"\" width=\"202\" height=\"171\" /></a>\r\n\r\nIf a theme was not updated, a list of updates will appear; which are newer than your theme version.\r\n\r\nHowever, when you have a theme in the latest version, you will see an appropriate message that a theme does not have any new updates to download.\r\n\r\nIt\'s worth remembering that a free theme - MeetGavernWP is available through a public repository in a github service which allows to easy analysis of changes implemented in particular files. In the case of commercial themes, it is recommended to use tools like WinMerge (Windows) or File Merge (MacOS X) to compare changes in files. Each update in our update system has information about the list of modified files. Generally, it is recommended to compare only these files which you modified manually after loading a theme.','Updates','','publish','open','open','','updates-2','','','2012-08-12 18:11:39','2012-08-12 18:11:39','',0,'{$page_url}/?p=382',0,'post','',0),(383,1,'2012-07-11 13:49:57','2012-07-11 13:49:57','GavernWP posiada sekcję aktualizacji, która pozwala na dostęp do informacji o tym czy szablon jest zaktualizowany do ostatniej wersji. Aby dostać się do panelu aktualizacji należy skorzystać z subemnu \"Updates\" menu głównego opcji szablonu:\n\n[screenshot]\n\nJeżeli nasz szablon jest nieaktualny, pojawi się nam lista aktualizacji, które są nowsze niż nasza wersja szablonu:\n\n[screenshot]\n\nNatomiast gdy nasz szablon jest w najnowszej wersji, ujrzymy stosowny komunikat o tym, że szablon nie posiada żadnych nowych aktualizacji do pobrania:\n\n[screenshot]\n\nWarto też pamiętać, że darmowy szablon MeetGavernWP jest dostępny poprzez publiczne repozytorium w serwisie github, co pozwala na łatwą analizę zmian wprowadzanych w poszczególnych plikach. W wypadku szablonów komercyjnych do porównywania zmian w plikach zalecane jest wykorzystanie narzędzi typu WinMerge (Windows) lub File Merge (MacOS X). Każda aktualizacja w naszym systemie aktualizacji posiada informację o liście zmodyfikowanych plików. W sy','Updates','','inherit','open','open','','382-revision','','','2012-07-11 13:49:57','2012-07-11 13:49:57','',382,'{$page_url}/uncategorized/382-revision/',0,'revision','',0),(384,1,'2012-07-11 13:59:23','2012-07-11 13:59:23','Sometimes, there is a situation when you have to copy a configuration from one installation to another one. In order to simplify it, GavernWP has been equipped with import and export options of theme\'s settings in \"Import/Export\" tab of a theme\'s main menu:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-17.jpg\"><img class=\"aligncenter size-full wp-image-712\" title=\"Import/export menu\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-17.jpg\" alt=\"\" width=\"178\" height=\"161\" /></a>\r\n\r\nAfter entering a page of these settings, you will see the following form:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-18.jpg\"><img class=\"aligncenter size-full wp-image-713\" title=\"Import/Export page\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-18.jpg\" alt=\"\" width=\"681\" height=\"519\" /></a>\r\n\r\nIn order to export settings, it is enough to copy a text from an \"Export\" field and copy it to an \"Import\" field in a different theme.\r\n\r\n<strong>Note!</strong> While exporting settings, you have to remember that it is possible to copy settings between the same themes.\r\nTheme\'s settings are available in JSON format, so it is possible to save these settings to a file and then modify them manually before loading to a different theme.\r\n\r\nTip: we recommend to make a dump of theme\'s settings, thanks to it, you will be secured against not desired effects of greater changes in a theme\'s configuration. Such settings dumps should be saved in a file which has in its name the date of making a dump, e.g.  <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','publish','open','open','','importexport-settings-2','','','2012-08-12 18:38:39','2012-08-12 18:38:39','',0,'{$page_url}/?p=384',0,'post','',0),(385,1,'2012-07-11 13:58:47','2012-07-11 13:58:47','Czasem spotykamy się z sytuacją kiedy to musimy skopiować konfigurację z jednej instalacji szablonu do innej. Aby ułatwić to zadanie GavernWP został wyposażony w opcje importu i eksportu ustawień szablonu dostępne w zakładce \"Import/Export\" menu głównego szablonu:\n\n[screenshot]\n\nPo wejściu na stronę tych ustawień ujrzymy następujący formularz:\n\n[screenshot]\n\nAby wyeksportować ustawienia wystarczy skopiować tekst z pola \"Export\" i skopiować go do pola \"Import\" w innym szablonie.\n\n<strong>Uwaga!</strong> Eksportując ustawienia należy pamiętać, że możliwe jest jedynie kopiowanie ustawień pomiędzy tymi samymi szablonami.\n\nUstawienia szablonu dostępne są w czytelnym dla człowieka formacie JSON, zatem można te ustawienia zapisać do pliku a następnie zmodyfikować je ręcznie przed wgraniem do innego szablonu.\n\nWskazówka: zalecamy wykonanie co jakiś czas zrzutu ustawień szablonu, dzięki temu można zabezpieczyć się przed niepożądanymi efektami większych zmian w konfiguracji szablonu. Takie zrzuty ustawień powinny być zapisane w pliku posiadającym w nazwię datę wykonania zrzutu np. meetgavernwp_backup_30_07_2012','Import/Export settings','','inherit','open','open','','384-revision','','','2012-07-11 13:58:47','2012-07-11 13:58:47','',384,'{$page_url}/uncategorized/384-revision/',0,'revision','',0),(386,1,'2012-07-11 14:52:14','2012-07-11 14:52:14','To simplify shortcodes use available in themes based on GavernWP framework, a button for theme\'s typography has been implemented which is available in a posts editor:<a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-705\" title=\"button typo\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"474\" height=\"118\" /></a>\r\n\r\n&nbsp;\r\n\r\nBy clicking this button, you will see a list of available typography elements:<a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-5.jpg\"><img class=\"aligncenter size-full wp-image-706\" title=\"typo button popup\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-5.jpg\" alt=\"\" width=\"265\" height=\"353\" /></a>\r\n\r\n&nbsp;\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content by scripts to structure styled in a way given.\r\n\r\nPlease, note that adding a new Shortcode code requires three operations:\r\n<ul>\r\n	<li>adding an entry in shortcodes.js configuration file</li>\r\n	<li>adding PHP code supporting a shortcode given</li>\r\n	<li>adding optional CSS and JavaScript code (if a shortcode given requires it)</li>\r\n</ul>\r\n<strong>shortcodes.js</strong> file in <strong>config</strong> catalog includes entries which are replaced to menu structure visible after clicking a typography button - it includes <strong>$GAVERNWP_SHORTCODES</strong> variable which is a table including objects representing elements of a menu. Each object has three features: <strong>title</strong>, <strong>code</strong> and <strong>submenu</strong>. Let\'s analyze this structure with a <strong>Highlight</strong> position:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - it includes a menu positon name displayed by a script</li>\r\n	<li><strong>code</strong> - it is a shortcode code which will be added to an entry when clicking a menu position given - you have to remember that not all menu positions on the first level have a value in this field - if it was an empty sequence of symbols, it means for a script that clicking on a menu position given does not request any action.</li>\r\n	<li><strong>submenu</strong> - it is a table  of a submenu of a menu position given. Each submenu position is built the same as menu positions as these on the first level but with one difference - a submenu cannot have the next submenu, so you do not add a <strong>submenu</strong> feature in a submenu object.</li>\r\n</ul>\r\nLet\'s say, we added our shortcode to a typography button using shortcodes.js file. So, there is one thing left to do - support our shortcode from a theme side.\r\n\r\nTo do this, you have to open <strong>gavern/helpers/helpers.shortcodes.php</strong> file.\r\n\r\nThis file is divided into three main sections starting with lines similar to:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nIt is a conditional  IF instruction connected with a group of typography elements given. Gavern icludes three groups:\r\n<ul>\r\n	<li>typography elements - functions connected with it have <strong>gavern_ts_</strong> prefix in the title</li>\r\n	<li>interactive elements - functions connected with it have <strong>gavern_ies_</strong> prefix in the title</li>\r\n	<li>elements characteristic for a particular theme - functions connected with it have <strong>gavern_tss_</strong> prefix in the title</li>\r\n</ul>\r\nWe recommend to add new typography elements in the last group - in Meet GavernWP theme, it is empty by default. Please, remember about using an appropriate prefix in a function name for a group given, e.g. in the case of the third group, it will be <strong>gavern_tss_</strong>. The code itself of a shortcode given has to be created according to guidelines described in<a href=\"http://codex.wordpress.org/Shortcode_API\"> Shortcode API</a>.\r\n\r\nThe last step is rather optional and depends on your Shortcode type. If your Shortcode requires additional CSS or JavaScript code, you have to define it in <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong> files, where <strong>*</strong> is a group name to which a Shortcode given was assigned.\r\n\r\nIt is very important to place elements of CSS and JavaScript code in an appropriate file, as it will give a possibility of optimizing whole theme code when switching off given group of Shortcodes codes.','Typography button','','publish','open','open','','typography-button','','','2012-08-12 18:33:41','2012-08-12 18:33:41','',0,'{$page_url}/?p=386',0,'post','',0),(389,1,'2012-07-11 14:51:57','2012-07-11 14:51:57','Dla ułatwienia wykorzystania shortcodes dostępnych w szablonach opartych o framework GavernWP zaimplementowano przycisk od typografii szablonu dostępny w edytorze postów:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\n\nKlikając na ten przycisk ujrzymy listę dostępnych elementów typografii:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\n\nDla większości elementów można wybrać wersję z określoną stylistyką. Po wybraniu konkretnego stylu pojawi się kod shortcode, który zostanie zamieniony w treści wpisu przez skrypty na konkretną strukturę ostylowaną w dany sposób.\n\nNależy zwrócić uwagę na fakt, że dodanie nowego kodu Shortcode wymaga trzech operacji:\n<ul>\n	<li>dodania wpisu w pliku konfiguracyjnym shortcodes.js</li>\n	<li>dodania kodu PHP obsługującego dany shortcode</li>\n	<li>dodania opcjonalnego kodu CSS i JavaScript (o ile wymaga tego dany shortcode)</li>\n</ul>\nPlik <strong>shortcodes.js</strong> w katalogu <strong>config</strong> zawiera wpisy, które są zamieniane na strukturę menu widocznego po kliknięciu w przycisk typografii - zawiera on zmienną <strong>$GAVERNWP_SHORTCODES</strong>, która jest tablicą zawierającą obiekty reprezentujące elementy menu wyboru. Każdy obiekt posiada trzy właściwości: <strong>title</strong>, <strong>code</strong> oraz <strong>submenu</strong>. Omówmy tą strukturę na przykładzie pozycji <strong>Highlight</strong>:\n\n[code]{\n\n\"title\": \"Highlight\",\n\"code\": \"[highlight]Your text[/highlight]\",\n\"submenu\": [\n{\n\"title\": \"Style I\",\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\n},\n{\n\"title\": \"Style II\",\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\n},\n{\n\"title\": \"Style III\",\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\n}\n]\n},[/code]\n<ul>\n	<li><strong>title</strong> - zawiera nazwę pozycji menu wyświetlaną przez skrypt</li>\n	<li><strong>code</strong> - jest to kod shortcode, który zostanie dodany do wpisu w momencie kliknięcia danej pozycji menu - należy pamiętać, że nie wszystkie pozycje menu na pierwszym poziomie posiadają wartość w tym polu - jeżeli jest ona pustym ciągiem znaków oznacza to dla skryptu, że kliknięcie w daną pozycję menu ma nie wywoływać żadnej akcji.</li>\n	<li><strong>submenu</strong> - jest to tablica podmenu danej pozycji menu. Każda pozycja podmenu jest zbudowana tak samo jak pozycje menu na pierwszym poziomie, z tą różnicą, że podmenu nie może mieć kolejnego podmenu, zatem nie dodajemy w obiekcie podmenu właściwości <strong>submenu</strong>.</li>\n</ul>\nPrzyjmijmy, że dodaliśmy już nasz shortcode do przycisku typografii korzystając z pliku shortcodes.js. Pozostaje nam kwestia obsługi naszego shortcode po stronie szablonu.\n\nW tym celu należy otworzyć plik<strong> gavern/helpers/helpers.shortcodes.php</strong>.\n\nPlik ten jest podzielony na trzy główne sekcje zaczynające się od linijek podobnych do:\n\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\n\nJest to instrukcja warunkowa IF związana z daną grupą elementów typografii. Gavern zawiera trzy takie grupy:\n<ul>\n	<li>elementy typografii - funkcje z nią związane mają prefiks <strong>gavern_ts_</strong> w nazwie</li>\n	<li>elementy interaktywne - funkcje z nią związane mają prefiks <strong>gavern_ies_</strong> w nazwie</li>\n	<li>elementy chrakterystyczne dla danego szablonu - funkcje z nią związane mają prefiks <strong>gavern_tss_</strong> w nazwie</li>\n</ul>\nNowe elementy typografii zalecamy dodawać w tej ostatniej grupie - w szablonie Meet GavernWPdomyślnie jest ona pusta. Zalecamy pamiętać o zastosowaniu stosownego dla danej grupy prefiksu w nazwie funkcji np. w wypadku trzeciej grupy będzie to <strong>gavern_tss_</strong>. Sam kod danego Shortcode należy tworzyć według wytycznych opisanych w <a href=\"http://codex.wordpress.org/Shortcode_API\">Shortcode API</a>.\n\nOstatni krok jest opcjonalny i zależny od typu naszego Shortcode. Jeżeli nasz Shortcode wymaga dodatkowego kod CSS lub JavaScript należy zdefiniować go w plikach <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong>, gdzie <strong>*</strong> oznacza nazwę grupy do której przypisaliśmy dany Shortcode.\n\nJest bardzo ważne, by umieścić elementy kodu CSS i JavaScript w odpowiednim pliku, gdyż umożliwi to optymalizację kodu całego szablonu w momencie wyłączenia z użytkowania danej grupy kodów Shortcodes.','Typography button','','inherit','open','open','','386-revision','','','2012-07-11 14:51:57','2012-07-11 14:51:57','',386,'{$page_url}/uncategorized/386-revision/',0,'revision','',0),(708,1,'2012-08-12 18:32:40','2012-08-12 18:32:40','To simplify shortcodes use available in themes based on GavernWP framework, a button for theme\'s typography has been implemented which is available in a posts editor:<a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-705\" title=\"button typo\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"474\" height=\"118\" /></a>\r\n\r\n&nbsp;\r\n\r\nBy clicking this button, you will see a list of available typography elements:<a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-5.jpg\"><img class=\"aligncenter size-full wp-image-706\" title=\"typo button popup\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-5.jpg\" alt=\"\" width=\"265\" height=\"353\" /></a>\r\n\r\n&nbsp;\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content by scripts to structure styled in a way given.\r\n\r\nPlease, note that adding a new Shortcode code requires three operations:\r\n<ul>\r\n	<li>adding an entry in shortcodes.js configuration file</li>\r\n	<li>adding PHP code supporting a shortcode given</li>\r\n	<li>adding optional CSS and JavaScript code (if a shortcode given requires it)</li>\r\n</ul>\r\n<strong>shortcodes.js</strong> file in <strong>config</strong> catalog includes entries which are replaced to menu structure visible after clicking a typography button - it includes <strong>$GAVERNWP_SHORTCODES</strong> variable which is a table including objects representing elements of a menu. Each object has three features: <strong>title</strong>, <strong>code</strong> and <strong>submenu</strong>. Let\'s analyze this structure with a <strong>Highlight</strong> position:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - it includes a menu positon name displayed by a script</li>\r\n	<li><strong>code</strong> - it is a shortcode code which will be added to an entry when clicking a menu position given - you have to remember that not all menu positions on the first level have a value in this field - if it was an empty sequence of symbols, it means for a script that clicking on a menu position given does not request any action.</li>\r\n	<li><strong>submenu</strong> - it is a table  of a submenu of a menu position given. Each submenu position is built the same as menu positions as these on the first level but with one difference - a submenu cannot have the next submenu, so you do not add a <strong>submenu</strong> feature in a submenu object.</li>\r\n</ul>\r\nLet\'s say, we added our shortcode to a typography button using shortcodes.js file. So, there is one thing left to do - support our shortcode from a theme side.\r\n\r\nTo do this, you have to open <strong>gavern/helpers/helpers.shortcodes.php</strong> file.\r\n\r\nThis file is divided into three main sections starting with lines similar to:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nIt is a conditional  IF instruction connected with a group of typography elements given. Gavern icludes three groups:\r\n<ul>\r\n	<li>typography elements - functions connected with it have <strong>gavern_ts_</strong> prefix in the title</li>\r\n	<li>interactive elements - functions connected with it have <strong>gavern_ies_</strong> prefix in the title</li>\r\n	<li>elements characteristic for a particular theme - functions connected with it have <strong>gavern_tss_</strong> prefix in the title</li>\r\n</ul>\r\nWe recommend to add new typography elements in the last group - in Meet GavernWP theme, it is empty by default. Please, remember about using an appropriate prefix in a function name for a group given, e.g. in the case of the third group, it will be <strong>gavern_tss_</strong>. The code itself of a shortcode given has to be created according to guidelines described in<a href=\"http://codex.wordpress.org/Shortcode_API\"> Shortcode API</a>.\r\n\r\nThe last step is rather optional and depends on your Shortcode type. If your Shortcode requires additional CSS or JavaScript code, you have to define it in <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong> files, where <strong>*</strong> is a group name to which a Shortcode given was assigned.\r\n\r\nIt is very important to place elements of CSS and JavaScript code in an appropriate file, as it will give a possibility of optimizing whole theme code when switching off given group of Shortcodes codes.','Typography button','','inherit','open','open','','386-revision-9','','','2012-08-12 18:32:40','2012-08-12 18:32:40','',386,'{$page_url}/uncategorized/386-revision-9/',0,'revision','',0),(392,1,'2012-07-12 12:55:04','2012-07-12 12:55:04','In order to adjust stylistics of an administration panel to a GavernWP page, there are some options allowing to adjust the look of administration panel elements to a theme of a page given.\r\n\r\nYou will find the following options in a back-end branding tab:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-19.jpg\"><img class=\"aligncenter size-full wp-image-715\" title=\"Back-end branding\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-19.jpg\" alt=\"\" width=\"711\" height=\"335\" /></a>\r\n\r\nThe first two options are connected with a logotype displayed on a log in page. You have to choose an image which will be used as a logo and then insert the size of the image chosen. In this way, you may achieve, e.g. the following log in panel:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Meet-Gavern-WP-›-Log-In.jpg\"><img class=\"aligncenter size-full wp-image-716\" title=\"Login logo\" src=\"{$page_url}/wp-content/uploads/2012/07/Meet-Gavern-WP-›-Log-In.jpg\" alt=\"\" width=\"379\" height=\"459\" /></a>\r\n\r\nThe remaining two options are connected with theme\'s login displayed in a main menu of an administration panel:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-20.jpg\"><img class=\"aligncenter size-full wp-image-717\" title=\"Back-end logo\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-20.jpg\" alt=\"\" width=\"172\" height=\"68\" /></a>\r\n\r\nWe recommend to use an image in 16x16 size - bigger or smaller images may cause problems with menu layout.\r\n\r\n&nbsp;','Back-end branding settings','','publish','open','open','','back-end-branding-settings-2','','','2012-08-12 18:42:42','2012-08-12 18:42:42','',0,'{$page_url}/?p=392',0,'post','',0),(393,1,'2012-07-12 12:54:47','2012-07-12 12:54:47','Aby lepiej dostosować stylistykę panelu administracyjnego do strony w GavernWP znalazły się opcje pozwalające na dostosowanie wyglądu elementów panelu administracyjnego do tematyki danej strony.\n\nW zakładce back-end branding znajdziemy następujące opcje:\n\n[screenshot]\n\nPierwsze dwie opcje związane są z logotypem wyświetlanym na stronie logowania. Należy wybrać grafikę, która posłuży za logo, a następnie podać rozmiar wybranej grafiki. W ten sposób możemy uzyskać np. taki panel logowania:\n\n[screenshot]\n\nPozostałe dwie opcje związane są z logiem szablonu wyświetlanym w menu głównym panelu administracyjnego:\n\n[screenshot]\n\nZalecamy wykorzystać grafikę w rozmiarze 16x16 - większe lub mniejsze grafiki mogą powodować proble\n\n&nbsp;','Back-end branding settings','','inherit','open','open','','392-revision','','','2012-07-12 12:54:47','2012-07-12 12:54:47','',392,'{$page_url}/uncategorized/392-revision/',0,'revision','',0),(394,1,'2012-07-12 13:05:23','2012-07-12 13:05:23','There are three key places connected with branding in a theme based on GavernWP framework:\r\n<ul>\r\n	<li>page\'s logo</li>\r\n	<li>page\'s footer</li>\r\n	<li>framework\'s logo under a page\'s footer</li>\r\n</ul>\r\nThere are the following administration panel options responsible for these elements:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-10.jpg\"><img class=\"aligncenter size-full wp-image-697\" title=\"branding\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-10.jpg\" alt=\"\" width=\"686\" height=\"341\" /></a>\r\n\r\nIn the case of a framework\'s logo, it is only possible to switch it on/off.\r\n\r\nFooter content is defined in <strong>Footer content</strong> option. It will be displayed at the bottom of the page, usually on the right side.\r\n\r\nThe majority of parameters are connected with a page\'s logo. The first step in a logo configuration is to choose a logo type; there are the following logo types available:\r\n<ul>\r\n	<li><strong>Defined in the CSS code</strong> - a logo is defined theme\'s CSS style as an element having <strong>cssLogo</strong> class. In this case, except CSS code modification, no other settings changes are needed.</li>\r\n	<li><strong>Image logo</strong> - after choosing this option, some additional options will appear: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-11.jpg\"><img class=\"aligncenter size-full wp-image-698\" title=\"Logo image\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-11.jpg\" alt=\"\" width=\"716\" height=\"185\" /></a> You have to choose an image logo and specify its sizes.</li>\r\n	<li><strong>Text logo</strong> - likewise in the previous option, some additional options appear: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-12.jpg\"><img class=\"aligncenter size-full wp-image-699\" title=\"Textlogo\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-12.jpg\" alt=\"\" width=\"545\" height=\"96\" /></a> <strong>Theme logo text </strong>option specifies whether main logo text and the signature below it will be taken from Wordpress settings (<strong>from Wordpress settings</strong>) or will be specified by a user (<strong>Own</strong>). In the case of choosing the second option, two additional fields to fill in will appear: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-13.jpg\"><img class=\"aligncenter size-full wp-image-700\" title=\"Text logo own\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-13.jpg\" alt=\"\" width=\"558\" height=\"199\" /></a></li>\r\n	<li><strong>None</strong> - in this case, a logo will not be displayed.</li>\r\n</ul>\r\n<div><strong>Note</strong>: <strong>None</strong> option is useful when you want to define a logo code in theme\'s code yourself - then, it is enough to add your own code to an appropriate file (usually it is: <strong>layouts/header.php</strong>).</div>\r\n&nbsp;','Theme branding settings','','publish','open','open','','template-branding-settings-2','','','2012-08-12 18:27:54','2012-08-12 18:27:54','',0,'{$page_url}/?p=394',0,'post','',0),(395,1,'2012-07-12 13:05:21','2012-07-12 13:05:21','W szablonie budowanym w oparciu o framework GavernWP istnieją trzy kluczowe miejsca związane z brandingiem:\n<ul>\n	<li>logo strony</li>\n	<li>stopka strony</li>\n	<li>logo frameworka pod stopką strony</li>\n</ul>\nZa elementy te odpowiadają następujące opcje panelu administracyjnego:\n\n[screenshot]\n\nW wypadku loga frameworka można je jedynie włączyć lub wyłączyć.\n\nTreść stopki strony definiujemy w opcji <strong>Footer content</strong>. Wyświetlona ona zostanie w dolej części strony najczęściej po prawej stronie witryny.\n\nNajwięcej parametrów związanych jest z logiem strony. Pierwszy krok w konfiguracji logo strony to wybór typu loga, dostępne są następujące rodzaje logo:\n<ul>\n	<li><strong>Defined in the CSS code</strong> - logo zdefiniowane jest wtedy w stylu CSS szablonu jako element posiadający klasę <strong>cssLogo</strong>. W tym wypadku poza modyfikacją kodu CSS żadne inne zmiany ustawień nie są potrzebne.</li>\n	<li><strong>Image logo</strong> - po wybraniu tej opcji pojawią się dodatkowe opcje: [screenshot]. Należy wybrać grafikę logo oraz określić jej rozmiary.</li>\n	<li><strong>Text logo</strong> - podobnie jak w wypadku poprzedniej opcji, także tutaj pojawią się dodatkowe opcje: [screenshot]. Opcja <strong>Template logo text</strong> określa czy tekst główny logo jak i podpis pod nim będą brane z ustawień Wordpress (<strong>from Wordpress settings</strong>) czy też będą określone  przez użytkownika (<strong>Own</strong>). W wypadku wybrania tej drugiej opcji pojawią się kolejne dwa pola, które trzeba wypełnić: [screenshot].</li>\n	<li><strong>None</strong> - w tym wypadku logo w ogóle nie zostanie wyświetlone.</li>\n</ul>\n<div><strong>Wskazówka:</strong> opcja <strong>None</strong> jest przydatna w sytuacji gdy sami chcemy w kodzie szablonu zdefiniować kod logo - wystarczy wtedy dodać własny kod do odpowiedniego pliku (najczęściej <strong>layouts/header.php</strong>).</div>\n&nbsp;','Template branding settings','','inherit','open','open','','394-revision','','','2012-07-12 13:05:21','2012-07-12 13:05:21','',394,'{$page_url}/uncategorized/394-revision/',0,'revision','',0),(396,1,'2012-08-12 18:24:08','2012-08-12 18:24:08','There are three key places connected with branding in a template based on GavernWP framework:\n<ul>\n	<li>page\'s logo</li>\n	<li>page\'s footer</li>\n	<li>framework\'s logo under a page\'s footer</li>\n</ul>\nThere are the following administration panel options responsible for these elements:\n\n[screenshot]\n\nIn the case of a framework\'s logo, it is only possible to switch it on/off.\n\nFooter content is defined in <strong>Footer content</strong> option. It will be displayed at the bottom of the page, usually on the right side.\n\nThe majority of parameters are connected with a page\'s logo. The first step in a logo configuration is to choose a logo type; there are the following logo types available:\n<ul>\n	<li><strong>Defined in the CSS code</strong> - a logo is defined theme\'s CSS style as an element having <strong>cssLogo</strong> class. In this case, except CSS code modification, no other settings changes are needed.</li>\n	<li><strong>Image logo</strong> - after choosing this option, some additional options will appear:  [screenshot]. You have to choose an image logo and specify its sizes.</li>\n	<li><strong>Text logo</strong> - likewise in the previous option, some additional options appear: [screenshot]. <strong>Theme logo text </strong>option specifies whether main logo text and the signature below it will be taken from Wordpress settings (<strong>from Wordpress settings</strong>) or will be specified by a user (<strong>Own</strong>). In the case of choosing the second option, two additional fields to fill in will appear: [screenshot].</li>\n	<li><strong>None</strong> - in this case, a logo will not be displayed.</li>\n</ul>\n<div><strong>Note</strong>: <strong>None</strong> option is useful when you want to define a logo code in temple\'s code yourself - then, it is enough to add your own code to an appropriate file (usually it is: <strong>layouts/header.php</strong>).</div>\n&nbsp;','Theme branding settings','','inherit','open','open','','394-autosave','','','2012-08-12 18:24:08','2012-08-12 18:24:08','',394,'{$page_url}/uncategorized/394-autosave/',0,'revision','',0),(397,1,'2012-07-12 13:12:49','2012-07-12 13:12:49','Shortcodes are facilities which are not used by everyone. Besides, XHTML code of the majority of typography elements can be generated manually. It causes that not all CSS and JavaScript files connected with Shortcodes are needed while loading a page.\r\n\r\nThanks to a Shortcodes tab, it is possible to switch off chosen groups of Shortcodes:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-9.jpg\"><img class=\"aligncenter size-full wp-image-695\" title=\"Shortcodes\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-9.jpg\" alt=\"\" width=\"555\" height=\"223\" /></a>\r\n\r\nNote! Switching off a given group of Shortcodes will cause not only switching off adding CSS and JS files connected with a group given but will also switch off functions which parse Shortcodes in articles. That\'s why, you have to make sure that Shortcodes groups you want to switch off, are not used in existing articles.','Shortcodes settings','','publish','open','open','','shortcodes-settings-2','','','2012-08-12 18:23:31','2012-08-12 18:23:31','',0,'{$page_url}/?p=397',0,'post','',0),(398,1,'2012-07-12 13:11:53','2012-07-12 13:11:53','Shortcodes to udogodnienia, które nie są wykorzystywane przez wszystkich. Poza tym kod XHTML większości elementów typograficznych można w razie potrzeby wygenerować ręcznie. Sprawia to, że nie wszystkie pliki CSS i JavaScript związane z Shortcodes są potrzebne przy wczytywaniu strony.\n\nDzięki zakładce Shortcodes można wyłączyć wybrane grupy Shortcodes:\n\n[screenshot]\n\nUwaga! Wyłączenie danej grupy Shortcodes spowoduje','Shortcodes settings','','inherit','open','open','','397-revision','','','2012-07-12 13:11:53','2012-07-12 13:11:53','',397,'{$page_url}/uncategorized/397-revision/',0,'revision','',0),(399,1,'2012-07-12 13:12:49','2012-07-12 13:12:49','Shortcodes to udogodnienia, które nie są wykorzystywane przez wszystkich. Poza tym kod XHTML większości elementów typograficznych można w razie potrzeby wygenerować ręcznie. Sprawia to, że nie wszystkie pliki CSS i JavaScript związane z Shortcodes są potrzebne przy wczytywaniu strony.\r\n\r\nDzięki zakładce Shortcodes można wyłączyć wybrane grupy Shortcodes:\r\n\r\n[screenshot]\r\n\r\nUwaga! Wyłączenie danej grupy Shortcodes spowoduje nie tylko wyłączenie dodawania plików CSS i JS związanych z daną grupą, ale też wyłączy funkcje parsujące Shortcodes w artykułach. Dlatego należy upewnić się, że wyłączane grupy Shortcodes nie były wykorzystane w istniejących artykułach.','Shortcodes settings','','inherit','open','open','','397-revision-2','','','2012-07-12 13:12:49','2012-07-12 13:12:49','',397,'{$page_url}/uncategorized/397-revision-2/',0,'revision','',0),(400,1,'2012-08-12 18:22:07','2012-08-12 18:22:07','Shortcodes are facilities which are not used by everyone. Besides, XHTML code of the majority of typography elements can be generated manually. It causes that not all CSS and JavaScript files connected with Shortcodes are needed while loading a page.\n\nThanks to a Shortcodes tab, it is possible to switch off chosen groups of Shortcodes:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-9.jpg\"><img class=\"aligncenter size-full wp-image-695\" title=\"Shortcodes\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-9.jpg\" alt=\"\" width=\"555\" height=\"223\" /></a>\n\nNote! Switching off a given group of Shortcodes will cause not only switching off adding CSS and JS files connected with a group given but will also switch off functions which parse Shortcodes in articles. That\'s why, you have to make sure that Shortcodes groups you want to switch off, are not used in existing articles.','Shortcodes settings','','inherit','open','open','','397-autosave','','','2012-08-12 18:22:07','2012-08-12 18:22:07','',397,'{$page_url}/uncategorized/397-autosave/',0,'revision','',0),(401,1,'2012-07-12 13:39:30','2012-07-12 13:39:30','GavernWP gives a possibility of advanced menu managing on a website. There is a list of menus available in a theme in a configuration file - <strong>menus.json</strong>. These menus are displayed in a <strong>Navigation</strong> tab:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-15.jpg\"><img class=\"aligncenter size-full wp-image-709\" title=\"Nav menu\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-15.jpg\" alt=\"\" width=\"548\" height=\"539\" /></a>\r\n\r\nThere are a few options available for each menu available on a website. Website\'s main menu has more options than a menu placed e.g. in a page\'s footer.\r\n\r\nThe difference is that a main menu has additional options connected with animation:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-16.jpg\"><img class=\"aligncenter size-full wp-image-710\" title=\"Nav menu options\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-16.jpg\" alt=\"\" width=\"537\" height=\"99\" /></a>\r\n\r\nThese options allow to specify the type and speed of animation of a submenu.\r\n\r\nAdditionally, all menu types have the two options:\r\n<ul>\r\n	<li>an option specifying whether a menu given was switched on - a menu given can be switched on only on a particular subpages thanks to a <strong>Conditional rule</strong> option - then, you have to insert a rule from  <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of a PHP language in  a Conditional rule field, e.g. a rule displaying a menu on the homepage and in a category called \"Meet GavernWP\" will have the following form:  [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\r\n	<li>an option specifying menu depth i.e. a maximal nesting level for all menu positions displayed. If e.g. you want to skip the second menu level and display menu positions which are on the first menu level, you have to set this option to <strong>1</strong>. Of course <strong>All levels</strong> value will cause displaying all menu postions available for a menu given.</li>\r\n</ul>\r\nYou have to remember that adding a menu, except adding an appropriate entry in an configuration file <strong>menus.json</strong>, also requires creating appropriate code in a theme.\r\n\r\nThis code uses a standard <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a> function but you have to remember about three crucial things:\r\n<ul>\r\n	<li>code of <strong>wp_nav_menu</strong> function has to be placed inside IF condition in a form:<strong></strong> [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] where <strong>MENU_NAME</strong> is a menu name, e.g. <strong>mainmenu</strong><strong></strong>. Thanks to it, there will be a functionality which allows to display a menu only on subpages chosen.</li>\r\n	<li>in the case of main menu, it is very useful to create a duplicate in a mobile version so as while displaying a website on mobile devices, a menu will be adjusted to mobile devices.</li>\r\n	<li>in the case of a main menu, you have to use a special class derived from <strong>Walker</strong>: <strong>GKMenuWalker</strong> class; however, for a mobile menu, you have to use <strong>GKMenuWalkerMobile</strong> class. Thanks to it, appropriate menu structure will be generated.</li>\r\n</ul>\r\nCSS code connected with a menu is in <strong>css/wp.css</strong> and <strong>css/mobile.css</strong> files.\r\n\r\nScripts creating main menu animations are in <strong>js/gk.menu.js</strong> file.','Navigation settings','','publish','open','open','','navigation-settings-2','','','2012-08-12 18:36:00','2012-08-12 18:36:00','',0,'{$page_url}/?p=401',0,'post','',0),(402,1,'2012-07-12 13:38:51','2012-07-12 13:38:51','GavernWP umożliwa rozbudowane zarządzanie menu na stronie. W pliku konfiguracyjnym  <strong>menus.json</strong> znajduje się lista menu dostępnych w szablonie. Menu te wyświetlane są w zakładce<strong> Navigation</strong>:\n\n[screenshot]\n\nDla każdego menu dostępnego na stronie dostępnych jest kilka opcji. Menu główne strony ma więcej opcji niż zwykłe menu umieszczone np. w  stopce strony.\n\nRóżnica polega na tym, że menu główne posiada dodatkowe opcje związane z animacją:\n\n[screenshot]\n\nOpcje te pozwalają określić rodzaj oraz prędkość animacji submenu.\n\nDodatkowo wszystkie rodzaje menu posiadają dwie opcje:\n<ul>\n	<li>opcję określającą czy dane menu jest włączone - dane menu może być włączone tylko na wybranych podstronach dzięki opcji <strong>Conditional rule</strong> - wtedy w polu Conditional rule należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca menu na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\n	<li>opcję określającą głębokość menu tj. maksymalny poziom zagnieżdżenia dla wyświetlanych pozycji menu. Jeżeli np. chcemy pominąć drugi poziom menu i wyświetlić tylko te pozycje menu, które znajdują się na pierwszym poziomie menu, nalezy ustawić tą opcję na wartość <strong>1</strong>. Oczywiście wartość <strong>All levels</strong> spowoduje wyświetlenie wszystkich pozycji menu dostępnych dla danego menu.</li>\n</ul>\nNależy pamiętać, że dodanie menu poza dodaniem stosownego wpisu w pliku konfiguracyjnym <strong>menus.json</strong> wymaga też stworzenia w szablonie stosownego kodu.\n\nKod ten korzysta ze standardowej funkcji <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a>, przy czym należy pamiętać o trzech istotnych kwestiach:\n<ul>\n	<li>kod funkcji <strong>wp_nav_menu</strong> należy umieścić wewnątrz warunku IF postaci: [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] gdzie <strong>MENU_NAME</strong> to oczywiście nazwa menu np. <strong>mainmenu</strong>. Dzięki temu zapewnimy działanie funkcjonalności, która pozwala wyświetlać menu tylko na wybranych podstronach.</li>\n	<li>w wypadku menu głównego warto stworzyć jego duplikat w wersji mobilnej tak by przy wyświetlaniu strony na urządzeniach mobilnych pojawiło się menu dostosowane do urządeń mobilnych.</li>\n	<li>w wypadku menu głównego należy zastosować specjalną klasę dziedzicącą po klasie <strong>Walker</strong>: <strong>GKMenuWalker</strong>, natomiast dla menu mobilnego należy wykorzystać klasę <strong>GKMenuWalkerMobile</strong>. Zapewni to wygenerowanie odpowiedniej struktury menu.</li>\n</ul>\nKod CSS związany z menu znajduje się w plikach <strong>css/wp.css</strong> oraz <strong>css/mobile.css</strong>.\n\n&nbsp;','Navigation settings','','inherit','open','open','','401-revision','','','2012-07-12 13:38:51','2012-07-12 13:38:51','',401,'{$page_url}/uncategorized/401-revision/',0,'revision','',0),(574,1,'2012-08-10 10:26:19','2012-08-10 10:26:19','GavernWP gives a possibility of advanced menu managing on a website. There is a list of menus available in a template in a configuration file - <strong>menus.json</strong>. These menus are displayed in a <strong>Navigation</strong> tab:\r\n\r\n[screenshot]\r\n\r\nThere are a few options available for each menu available on a website. Website\'s main menu has more options than a menu placed e.g. in page\'s footer.\r\n\r\nThe difference is that a main menu has additional options connected with animation:\r\n\r\n[screenshot]\r\n\r\nThese options allow to specify the type and speed of animation of a submenu.\r\n\r\nAdditionally, all menu types have the two options:\r\n<ul>\r\n	<li>an option specifying whether a menu given was switched on - a menu given can be switched on only on a particular subpages thanks to a <strong>Conditional rule</strong> option - then, you have to insert a rule from  <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of a PHP language in  a Conditional rule field, e.g. a rule displaying a menu on the homepage and in a category called \"Meet GavernWP\" will have the following form:  [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\r\n	<li>an option specifying menu depth i.e. a maximal nesting level for all menu positions displayed. If e.g. you want to skip the second menu level and display menu positions which are on the first menu level, you have to set this option to <strong>1</strong>. Of course <strong>All levels</strong> value will cause displaying all menu postions available for a menu given.</li>\r\n</ul>\r\nYou have to remember that adding a menu, except adding an appropriate entry in an configuration file <strong>menus.json</strong>, also requires creating appropriate code in a template.\r\n\r\nThis code uses a standard <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a> function but you have to remember about three crucial things:\r\n<ul>\r\n	<li>code of <strong>wp_nav_menu</strong> function has to be placed inside IF condition of a form:<strong></strong> [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] where <strong>MENU_NAME</strong> is a menu name, e.g. <strong>mainmenu</strong><strong></strong>. Thanks to it, there will be a functionality which allows to display a menu only on subpages chosen.</li>\r\n	<li>in the case of main menu, it is very useful to create a duplicate in a mobile version so as while displaying a website on mobile devices, a menu will be adjusted to mobile devices.</li>\r\n	<li>in the case of a main menu, you have to use a special class derived from <strong>Walker</strong>: <strong>GKMenuWalker</strong> class; however, for a mobile menu, you have to use <strong>GKMenuWalkerMobile</strong> class. Thanks to it, appropriate menu structure will be generated.</li>\r\n</ul>\r\nCSS code connected with a menu is in <strong>css/wp.css</strong> and <strong>css/mobile.css</strong> files.\r\n\r\nScripts creating main menu animations are in <strong>js/gk.menu.js</strong> file.','Navigation settings','','inherit','open','open','','401-revision-5','','','2012-08-10 10:26:19','2012-08-10 10:26:19','',401,'{$page_url}/uncategorized/401-revision-5/',0,'revision','',0),(403,1,'2012-08-12 17:28:05','2012-08-12 17:28:05','GavernWP gives a possibility of advanced menu managing on a website. There is a list of menus available in a template in a configuration file - <strong>menus.json</strong>. These menus are displayed in a <strong>Navigation</strong> tab:\n\n[screenshot]\n\nThere are a few options available for each menu available on a website. Website\'s main menu has more options than a menu placed e.g. in a page\'s footer.\n\nThe difference is that a main menu has additional options connected with animation:\n\n[screenshot]\n\nThese options allow to specify the type and speed of animation of a submenu.\n\nAdditionally, all menu types have the two options:\n<ul>\n	<li>an option specifying whether a menu given was switched on - a menu given can be switched on only on a particular subpages thanks to a <strong>Conditional rule</strong> option - then, you have to insert a rule from  <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of a PHP language in  a Conditional rule field, e.g. a rule displaying a menu on the homepage and in a category called \"Meet GavernWP\" will have the following form:  [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\n	<li>an option specifying menu depth i.e. a maximal nesting level for all menu positions displayed. If e.g. you want to skip the second menu level and display menu positions which are on the first menu level, you have to set this option to <strong>1</strong>. Of course <strong>All levels</strong> value will cause displaying all menu postions available for a menu given.</li>\n</ul>\nYou have to remember that adding a menu, except adding an appropriate entry in an configuration file <strong>menus.json</strong>, also requires creating appropriate code in a template.\n\nThis code uses a standard <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a> function but you have to remember about three crucial things:\n<ul>\n	<li>code of <strong>wp_nav_menu</strong> function has to be placed inside IF condition in a form:<strong></strong> [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] where <strong>MENU_NAME</strong> is a menu name, e.g. <strong>mainmenu</strong><strong></strong>. Thanks to it, there will be a functionality which allows to display a menu only on subpages chosen.</li>\n	<li>in the case of main menu, it is very useful to create a duplicate in a mobile version so as while displaying a website on mobile devices, a menu will be adjusted to mobile devices.</li>\n	<li>in the case of a main menu, you have to use a special class derived from <strong>Walker</strong>: <strong>GKMenuWalker</strong> class; however, for a mobile menu, you have to use <strong>GKMenuWalkerMobile</strong> class. Thanks to it, appropriate menu structure will be generated.</li>\n</ul>\nCSS code connected with a menu is in <strong>css/wp.css</strong> and <strong>css/mobile.css</strong> files.\n\nScripts creating main menu animations are in <strong>js/gk.menu.js</strong> file.','Navigation settings','','inherit','open','open','','401-autosave','','','2012-08-12 17:28:05','2012-08-12 17:28:05','',401,'{$page_url}/uncategorized/401-autosave/',0,'revision','',0),(404,1,'2012-07-12 13:56:55','2012-07-12 13:56:55','Layout settings in a theme are connected with five main options:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-14.jpg\"><img class=\"aligncenter size-full wp-image-702\" title=\"Layout\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-14.jpg\" alt=\"\" width=\"571\" height=\"355\" /></a>\r\n\r\nThanks to a <strong>Page layout</strong> option, it is possible to specify a column position in page\'s layout: on the left/right side or switch off showing a column completely (in this situation, you achieve the layout available via an additional subpage style - <strong>fullwidth</strong>).\r\n\r\nA <strong>Theme width</strong> option specifies maximal page\'s width - no matter what width a browser window has, page\'s width will not exceed this value.\r\n\r\nColumn width is specified in per cents thanks to a <strong>Sidebar width</strong> option. <strong>Tablet width</strong> and <strong>Mobile width</strong> options allow to specify width of a browser window in pixels where <strong>css/tablet.css</strong> and <strong>css/mobile.css</strong> files are loaded.\r\n\r\nIn the case of <strong>tablet.css</strong>, modules which normally create four - column layout (max.), will appear in two - column layout which after loading a <strong>mobile.css</strong> file will change into one - column layout. Additionally, after loading a <strong>tablet.css</strong> file,a column moves under main content of a page given.\r\n\r\n<strong>Note</strong>: all options from a <strong>Layout</strong> section are also in a live-preview editor which allows to adjust values of these options easily, thanks to a site live preview.','Layout settings','','publish','open','open','','layout-settings-2','','','2012-08-12 18:29:36','2012-08-12 18:29:36','',0,'{$page_url}/?p=404',0,'post','',0),(405,1,'2012-07-12 13:56:27','2012-07-12 13:56:27','Ustawienia układu strony w szablonie związane są z pięcioma głównymi opcjami:\n\n[shortcodes]\n\nDzięki opcji <strong>Page layout</strong> można określić pozycję kolumny w układzie strony: po lewej, po prawej lub w ogóle wyłączyć pokazywanie kolumny (w tej sytuacji uzyskuje się układ dostępny także poprzez dodatkowy styl podstrony - <strong>fullwidth</strong>).\n\nOpcja <strong>Template width</strong> określa maksymalną szerokość strony - bez względu na szerokość okna przeglądarki szerokość strony nie przekroczy tej wartości.\n\nSzerokość kolumny określa się w procentach dzięki opcji <strong>Sidebar width</strong>. Natomiast opcje <strong>Tablet width</strong> i <strong>Mobile width</strong> pozwalają określić w pikselach szerokość okna przeglądarki przy której wczytywany jest kolejno plik <strong>css/tablet.css</strong> oraz <strong>css/mobile.css</strong>.\n\nW wypadku<strong> tablet.css</strong> moduły, które w normalnym układzie tworzą układ maksymalnie czterokolumnowy pojawiają się w układzie dwukolumnowym, który po załadowaniu pliku <strong>mobile.css</strong> przekształca się w układ jednokolumnowy. Dodatkowo po załadowaniu pliku <strong>tablet.css</strong> kolumna przemieszcza się pod główną treść danej strony.\n\nWskazówka: wszystkie opcje z sekcji <strong>Layout</strong> znajdują się też w edytorze live-preview, co pozwala na łatwiejsze dobranie .','Layout settings','','inherit','open','open','','404-revision','','','2012-07-12 13:56:27','2012-07-12 13:56:27','',404,'{$page_url}/uncategorized/404-revision/',0,'revision','',0),(406,1,'2012-08-12 18:29:03','2012-08-12 18:29:03','Layout settings in a template are connected with five main options:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-14.jpg\"><img class=\"aligncenter size-full wp-image-702\" title=\"Layout\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-14.jpg\" alt=\"\" width=\"571\" height=\"355\" /></a>\n\nThanks to a <strong>Page layout</strong> option, it is possible to specify a column position in page\'s layout: on the left/right side or switch off showing a column completely (in this situation, you achieve the layout available via an additional subpage style - <strong>fullwidth</strong>).\n\nA <strong>Template width</strong> option specifies maximal page\'s width - no matter what width a browser window has, page\'s width will not exceed this value.\n\nColumn width is specified in per cents thanks to a <strong>Sidebar width</strong> option. <strong>Tablet width</strong> and <strong>Mobile width</strong> options allow to specify width of a browser window in pixels where <strong>css/tablet.css</strong> and <strong>css/mobile.css</strong> files are loaded.\n\nIn the case of <strong>tablet.css</strong>, modules which normally create four - column layout (max.), will appear in two - column layout which after loading a <strong>mobile.css</strong> file will change into one - column layout. Additionally, after loading a <strong>tablet.css</strong> file,a column moves under main content of a page given.\n\n<strong>Note</strong>: all options from a <strong>Layout</strong> section are also in a live-preview editor which allows to adjust values of these options easily, thanks to a site live preview.','Layout settings','','inherit','open','open','','404-autosave','','','2012-08-12 18:29:03','2012-08-12 18:29:03','',404,'{$page_url}/uncategorized/404-autosave/',0,'revision','',0),(408,1,'2012-07-13 12:43:30','2012-07-13 12:43:30','Themes based on GavernWP framework have support for many useful solutions and technologies. The most important ones are:\r\n<ul>\r\n	<li><a title=\"Custom Page Styles\" href=\"{$page_url}/template-features/custom-page-styles-2/\">Custom page styles</a> - they extend functionality of standard subpages.</li>\r\n	<li><a title=\"Typography\" href=\"{$page_url}/template-features/typography/\">Typography</a> - an advanced list of elements gives a possibility to enhance posts about various add ons.</li>\r\n	<li><a title=\"Social API\" href=\"{$page_url}/template-features/social-api/\">Social API</a> - it allows to add buttons for sharing posts in social network services very easily.</li>\r\n	<li><a title=\"Open Graph support\" href=\"{$page_url}/template-features/open-graph-support/\">Open Graph</a> - it allows to specify the way in which content shared on Facebook will be visible.</li>\r\n	<li><a title=\"Threaded comments\" href=\"{$page_url}/template-features/threaded-comments-2/\">Threaded comments</a> - they allow to make discussions under posts in a clear way.</li>\r\n	<li><a title=\"Branding\" href=\"{$page_url}/template-features/branding/\">Branding</a> - it simplifies setting key elements of a website connected with its name or brand.</li>\r\n	<li><a title=\"Color Styles\" href=\"{$page_url}/uncategorized/color-styles/\">Color styles</a> - thanks to color styles, it is possible to create many various color and stylistic versions of a theme.</li>\r\n</ul>\r\n&nbsp;','Main front-end features','','publish','open','open','','main-front-end-features','','','2012-08-12 18:20:49','2012-08-12 18:20:49','',0,'{$page_url}/?p=408',0,'post','',0),(409,1,'2012-07-13 12:43:15','2012-07-13 12:43:15','Szablony budowane w oparciu o framework GavernWP posiadają wsparcie dla wielu użytecznych rozwiązań i technologii. Najważniejsze z nich to:\n<ul>\n	<li><a title=\"Custom Page Styles\" href=\"{$page_url}/template-features/custom-page-styles-2/\">Custom page styles</a> - rozszerzają funkcjonalność standardowych podstron.</li>\n	<li><a title=\"Typography\" href=\"{$page_url}/template-features/typography/\">Typography</a> - rozbudowana lista elementów umożliwia wzbogacenie postów o różnorodne dodatki.</li>\n	<li><a title=\"Social API\" href=\"{$page_url}/template-features/social-api/\">Social API</a> - pozwala na łatwe dodanie do wpisu przycisków udostępniania postów w serwisach społecznościowych.</li>\n	<li><a title=\"Open Graph support\" href=\"{$page_url}/template-features/open-graph-support/\">Open Graph</a> - umożliwia określenie sposobu w jaki będą widoczne udostępniane treści na Facebooku.</li>\n	<li><a title=\"Threaded comments\" href=\"{$page_url}/template-features/threaded-comments-2/\">Threaded comments</a> - pozwalają na prowadzenie dyskusji pod postami w czytelny sposób.</li>\n	<li><a title=\"Branding\" href=\"{$page_url}/template-features/branding/\">Branding</a> - ułatwia ustawienie kluczowych elementów strony związanych z jej nazwą lub marką.</li>\n	<li><a title=\"Color Styles\" href=\"{$page_url}/uncategorized/color-styles/\">Color styles</a> - dzięki nim możliwe jest tworzenie wielu różnych wersji kolorystycznych oraz stylistycznych szablonu.</li>\n</ul>\n&nbsp;','Main front-end features','','inherit','open','open','','408-revision','','','2012-07-13 12:43:15','2012-07-13 12:43:15','',408,'{$page_url}/uncategorized/408-revision/',0,'revision','',0),(410,1,'2012-07-13 13:20:33','2012-07-13 13:20:33','One of the key elements which has influence on website\'s look is an appropriate choice of fonts used for text presentation.\r\n\r\nGavernWP allows to choose fonts easily which are assigned to CSS selectors specified by a user.\r\n\r\nIn order to simplify support for many fonts on one page, GavernWP supports groups of fonts - each group allows to assign a font given to selectors chosen by a user:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-21.jpg\"><img class=\"aligncenter size-full wp-image-720\" title=\"Fonts\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-21.jpg\" alt=\"\" width=\"641\" height=\"489\" /></a>\r\n\r\nGroups of fonts are defined in a configuration file called <strong>fonts.json</strong>. Adding a new group of fonts is very easy - it is enough to define the next object of a form:\r\n\r\n[code]{\r\n\"full_name\": \"Full name of the fonts group\",\r\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\",\r\n\"description\": \"Short description of the font family\"\r\n}[/code]\r\n\r\nAfter adding such an object, in a table included in <strong>fonts.json</strong> file, you will see the next group of fonts to manage in an administration panel.\r\n\r\nYou have to specify three basic values for each group of fonts:\r\n<ul>\r\n	<li> a type of font used</li>\r\n	<li> a font of a type given</li>\r\n	<li>selectors connected with a font given</li>\r\n</ul>\r\nSpecifying of a font type is restricted to choosing one out of three fonts types:\r\n<ul>\r\n	<li><strong>Standard fonts</strong> - standard sets of fonts available on the majority of computers - you have to choose a font given from a list which is shown under the field of choosing a type of font: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-22.jpg\"><img class=\"aligncenter size-full wp-image-721\" title=\"standard fonts\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-22.jpg\" alt=\"\" width=\"546\" height=\"92\" /></a></li>\r\n	<li><strong>Fonts Squirrel</strong> - fonts downloaded from <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> page - you have to download @font-face kit of a font given and place its content in <strong>fonts</strong> catalog.  It is very important to have a folder with the same name as a font name used in <strong>stylesheet.css</strong> file which is in a new catalog. If you prepare a catalog in this way, you will see a font given on the list to choose:  <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-23.jpg\"><img class=\"aligncenter size-full wp-image-722\" title=\"Squirrel fonts\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-23.jpg\" alt=\"\" width=\"582\" height=\"83\" /></a></li>\r\n	<li><strong>Google Web Fonts</strong> - fonts from <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> page; in this case, you have to specify the URL address of a font given: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-24.jpg\"><img class=\"aligncenter size-full wp-image-723\" title=\"MeetGavernWP ‹ Meet Gavern WP — WordPress-24\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-24.jpg\" alt=\"\" width=\"605\" height=\"95\" /></a></li>\r\n</ul>\r\nThe last stage is specifying selectors connected with a font given:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-26.jpg\"><img class=\"aligncenter size-full wp-image-724\" title=\"Font selectors\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-26.jpg\" alt=\"\" width=\"652\" height=\"147\" /></a>\r\n\r\nAfter saving the settings, the results should be visible on the website immediately - it is not required to make any additional operations.','Fonts settings','','publish','open','open','','fonts-settings-2','','','2012-08-12 18:49:43','2012-08-12 18:49:43','',0,'{$page_url}/?p=410',0,'post','',0),(411,1,'2012-07-13 13:19:35','2012-07-13 13:19:35','Jednym z kluczowych elementów wpływających na wygląd strony WWW jest właściwy wybór czcionek zastosowanych do prezentacji tekstu.\n\nGavernWP umożliwia łatwy wybór czcionek przypisanych do określonych przez użytkownika selektorów CSS.\n\nAby ułatwić obsługę wielu różnych czcionek na jednej stronie GavernWP obsługuje grupy czcionek - każa grupa pozwala na przypisanie danej czcionki do wybranych przez użytkownika selektorów:\n\n[screenshot]\n\nGrupy czcionek zdefiniowane są w pliku konfiguracyjnym <strong>fonts.json</strong>. Dodanie nowej grupy czcionek jest bardzo proste - wystarczy zdefiniować kolejny obiekt postaci:\n\n[code]{\n\"full_name\": \"Full name of the fonts group\",\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\"\n}[/code]\n\nPo dodaniu takiego obiektu w tablicy zawartej w pliku <strong>fonts.json </strong>ujrzymy w panelu administracyjnym kolejną grupę czcionek, którą można zarządzać.\n\nDla każdej grupy czcionek należy określić trzy podstawowe wartości:\n<ul>\n	<li>rodzaj zastosowanej czcionki</li>\n	<li>czcionka danego rodzaju</li>\n	<li>selektory powiązane z daną czcionką</li>\n</ul>\nOkreślenie rodzaju czcionki ogranicza się do wyboru jednego z trzech typów czcionek:\n<ul>\n	<li><strong>Standard fonts</strong> - standardowe zestawy czcionek dostępne na większości komputerów - należy wybrać daną czcionkę z listy pojawiającej się pod polem wyboru rodzaju czcionki: [screenshot]</li>\n	<li><strong>Fonts Squirrel</strong> - czcionki pobrane ze strony <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> - należy pobrać @font-face kit danej czcionki i umieścić jego zawartość w katalogu <strong>fonts</strong>. Ważne jest by folder miał taką samą nazwę jak nazwa czcionki zastosowana w pliku <strong>stylesheet.css</strong> znajdującym się w nowym katalogu. Po dodaniu tak przygotowanego katalogu dana czcionka pojawi się na liście wyboru: [screenshot]</li>\n	<li><strong>Google Web Fonts</strong> - czcionki pochodzace z zasobów strony <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> w tym wypadku należy określić adres URL danej czcionki: [screenshot]</li>\n</ul>\nOstatni etap to określenie selektorów zwiąanych z d','Fonts settings','','inherit','open','open','','410-revision','','','2012-07-13 13:19:35','2012-07-13 13:19:35','',410,'{$page_url}/uncategorized/410-revision/',0,'revision','',0),(412,1,'2012-08-12 18:48:57','2012-08-12 18:48:57','One of the key elements which has influence on website\'s look is an appropriate choice of fonts used for text presentation.\n\nGavernWP allows to choose fonts easily which are assigned to CSS selectors specified by a user.\n\nIn order to simplify support for many fonts on one page, GavernWP supports groups of fonts - each group allows to assign a font given to selectors chosen by a user:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-21.jpg\"><img class=\"aligncenter size-full wp-image-720\" title=\"Fonts\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-21.jpg\" alt=\"\" width=\"641\" height=\"489\" /></a>\n\nGroups of fonts are defined in a configuration file called <strong>fonts.json</strong>. Adding a new group of fonts is very easy - it is enough to define the next object of a form:\n\n[code]{\n\"full_name\": \"Full name of the fonts group\",\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\",\n\"description\": \"Short description of the font family\"\n}[/code]\n\nAfter adding such an object, in a table included in <strong>fonts.json</strong> file, you will see the next group of fonts to manage in an administration panel.\n\nYou have to specify three basic values for each group of fonts:\n<ul>\n	<li> a type of font used</li>\n	<li> a font of a type given</li>\n	<li>selectors connected with a font given</li>\n</ul>\nSpecifying of a font type is restricted to choosing one out of three fonts types:\n<ul>\n	<li><strong>Standard fonts</strong> - standard sets of fonts available on the majority of computers - you have to choose a font given from a list which is shown under the field of choosing a type of font: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-22.jpg\"><img class=\"aligncenter size-full wp-image-721\" title=\"standard fonts\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-22.jpg\" alt=\"\" width=\"546\" height=\"92\" /></a></li>\n	<li><strong>Fonts Squirrel</strong> - fonts downloaded from <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> page - you have to download @font-face kit of a font given and place its content in <strong>fonts</strong> catalog.  It is very important to have a folder with the same name as a font name used in <strong>stylesheet.css</strong> file which is in a new catalog. If you prepare a catalog in this way, you will see a font given on the list to choose:  <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-23.jpg\"><img class=\"aligncenter size-full wp-image-722\" title=\"Squirrel fonts\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-23.jpg\" alt=\"\" width=\"582\" height=\"83\" /></a></li>\n	<li><strong>Google Web Fonts</strong> - fonts from <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> page; in this case, you have to specify the URL address of a font given: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-24.jpg\"><img class=\"aligncenter size-full wp-image-723\" title=\"MeetGavernWP ‹ Meet Gavern WP — WordPress-24\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-24.jpg\" alt=\"\" width=\"605\" height=\"95\" /></a></li>\n</ul>\nThe last stage is specifying selectors connected with a font given:\n\n[screenshot]\n\nAfter saving the settings, the results should be visible on the website immediately - it is not required to make any additional operations.','Fonts settings','','inherit','open','open','','410-autosave','','','2012-08-12 18:48:57','2012-08-12 18:48:57','',410,'{$page_url}/uncategorized/410-autosave/',0,'revision','',0),(413,1,'2012-07-13 13:50:16','2012-07-13 13:50:16','GavernWP has SEO settings built - in which allow to overwrite Wordpress standard SEO settings. After switching on \"Use Gavern SEO settings\" option, a lot of options connected with SEO will appear:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-7.jpg\"><img class=\"aligncenter size-full wp-image-688\" title=\"SEO settings\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-7.jpg\" alt=\"\" width=\"575\" height=\"617\" /></a>\r\n\r\nThe first group of options is connected with page\'s title:\r\n<ul>\r\n	<li><strong>Use blogname in title</strong> - this option allows to switch on showing a blogname in the title</li>\r\n	<li><strong>Separator used in title</strong> - it specifies a separator which is between a title description and a pages\'s name</li>\r\n	<li><strong>Title - description</strong> - it allows to specify page\'s title description (the first part of a title - before a separator)</li>\r\n	<li><strong>Title - blogname</strong> - it allows to specify page\'s name (the second part of a title after a separator)</li>\r\n</ul>\r\nThe remaining options allow to switch on advanced management of <strong>keywords</strong> and <strong>description</strong> metatags:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-8.jpg\"><img class=\"aligncenter size-full wp-image-689\" title=\"Metatags\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-8.jpg\" alt=\"\" width=\"579\" height=\"234\" /></a>\r\n\r\nIn the case of a homepage, these metatags values are specified in a SEO settings panel whereas in the case of subpages, there are two settings available for both metatags:\r\n<ul>\r\n	<li><strong>Disabled</strong></li>\r\n	<li><strong>Enabled (custom field in the post editor)</strong></li>\r\n</ul>\r\nWhen you switch on these settings, under a posts editor two additional fields will appear:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-690\" title=\"Metaboxes\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"814\" height=\"315\" /></a>\r\n\r\nIf you fill them in, metatags used on one subpage with an entry will be created.','SEO settings','','publish','open','open','','seo-settings-2','','','2012-08-12 18:17:28','2012-08-12 18:17:28','',0,'{$page_url}/?p=413',0,'post','',0),(414,1,'2012-07-13 13:49:22','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-07-13 13:49:22','0000-00-00 00:00:00','',0,'{$page_url}/?p=414',0,'post','',0),(415,1,'2012-07-13 13:49:55','2012-07-13 13:49:55','GavernWP posiada wbudowane ustawienia SEO, które pozwalają nadpisać standardowe ustawienia SEO Wordpress. Po włączeniu opcji \"Use Gavern SEO settings\" pojawi się szereg opcji związanych z SEO:\n\n[screenshot]\n\nPierwsza grupa opcji związana jest z tytułem strony:\n<ul>\n	<li><strong>Use blogname in title</strong> - opcja ta pozwala włączyć pokazywanie nazwy bloga w tytule</li>\n	<li><strong>Separator used in title</strong> - określa znak znajdujący się pomiędzy opisem tytułu a nazwą strony</li>\n	<li><strong>Title - description</strong> - pozwala określić opis tytułu strony (pierwsza część tytułu - przed separatorem)</li>\n	<li><strong>Title - blogname</strong> - pozwala określić nazwę strony (druga część tytułu - po separatorze)</li>\n</ul>\nPozostałe opcje pozwalają włączyć zaawansowane zarządzanie metatagami <strong>keywords</strong> i <strong>description</strong>:\n\n[screenshot]\n\nW wypadku strony głównej wartości tych metatagów określane są od razu w panelu ustawień SEO, natomiast w wypadku podstron dla obu metatagów dostępne są dwa ustawienia:\n<ul>\n	<li><strong>Disabled</strong></li>\n	<li><strong>Enabled (custom field in the post editor)</strong></li>\n</ul>\nW wypadku włączenia tych ustawień pod edytorem postów pojawią się dwa dodatkowe pola:\n\n[screenshot]\n\nIch wypełnienie spowoduje stworzenie metatagów wykorzystywanych tylko n','SEO settings','','inherit','open','open','','413-revision','','','2012-07-13 13:49:55','2012-07-13 13:49:55','',413,'{$page_url}/uncategorized/413-revision/',0,'revision','',0),(416,1,'2012-07-13 14:02:25','2012-07-13 14:02:25','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-664\" title=\"Basic settings\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"541\" height=\"404\" /></a>\r\n\r\nThe first option allows to choose a color version of a theme. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing theme\'s styles  - it is an element allowing for a website\'s user to choose a theme style himself/herself.\r\n\r\nThe next option is connected with switching on breadcrumbs element on a website. There are the following options to choose from: <strong>Enabled</strong>, <strong>Disabled</strong> and <strong>Conditional rule</strong> - then, you have to set a rule using <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of PHP language in a <strong>Conditional rule</strong> field, e.g. a rule displayinga a breadcrumbs element on the homepage and in the \"Meet GavernWP\" category will be in the following form: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\n\"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" option is useful when you want to place a widget instead of entries on the homepage - then  you have to switch it on <strong>mainbody</strong> widget position, place a widget needed which will replace a standard list of posts generated by Wordpress.\r\n\r\nThe last option, namely <strong>\"Show author info\"</strong> allows to display information about its author under each post in the following form:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Main-front-end-features-»-Free-WordPress-template.jpg\"><img class=\"aligncenter size-full wp-image-665\" title=\"Author block\" src=\"{$page_url}/wp-content/uploads/2012/07/Main-front-end-features-»-Free-WordPress-template.jpg\" alt=\"\" width=\"706\" height=\"123\" /></a>\r\n\r\n&nbsp;','Basic settings','','publish','open','open','','basic-settings-2','','','2012-08-12 17:52:58','2012-08-12 17:52:58','',0,'{$page_url}/?p=416',0,'post','',0),(417,1,'2012-07-13 14:01:32','2012-07-13 14:01:32','Podstawowe ustawienia frameworka GavernWP pozwalają na określenie podstawowych parametrów związanych z wyświetlaniem strony:\n\n[screenshot]\n\nPierwsza opcja pozwala na wybór wersji kolorystycznej szablonu. W jej miejsce może pojawić się kilka różnych pól zależnie od zawartości pliku konfiguracyjnego <strong>styles.json</strong>.\n\nPo opcji/opcjach wyboru styli szablonu znajduje się opcja pozwalająca włączyć style-switcher - jest to element pozwalający użytkownikowi strony samodzielnie wybrać styl szablonu.\n\nOpcja \"<strong>Use header image</strong>\" pozwala określić czy na pozycji widżetów header w sytuacji gdy nie ma włączonego żadnego widżetu ma pojawiać się grafika. Grafikę tę można określić w live editorze szablonów w sekcji <strong>Header Image</strong>.\n\nKolejne dwie opcje związane są z włączeniem elementów breadcrumbs i font-size switcher na stronie. Do wyboru mamy opcje <strong>Enabled</strong>, <strong>Disabled</strong> oraz <strong>Conditional rule</strong> - wtedy w polu <strong>Conditional rule</strong> należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca element breadcrumbs tylko na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\n\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\n\nOstatnia o','Basic settings','','inherit','open','open','','416-revision','','','2012-07-13 14:01:32','2012-07-13 14:01:32','',416,'{$page_url}/uncategorized/416-revision/',0,'revision','',0),(644,1,'2012-08-12 15:56:32','2012-08-12 15:56:32','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing template\'s styles  - it is an element allowing for a website\'s user to choose a template style himself/herself.\r\n\r\nThe next option is connected with switching on breadcrumbs element on a website. There are the following options to choose from: <strong>Enabled</strong>, <strong>Disabled</strong> and <strong>Conditional rule</strong> - then, you have to set a rule using <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of PHP language in a <strong>Conditional rule</strong> field, e.g. a rule displayinga a breadcrumbs element on the homepage and in the \"Meet GavernWP\" category will be in the following form: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\n\"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" option is useful when you want to place a widget instead of entries on the homepage - then  you have to switch it on <strong>mainbody</strong> widget position, place a widget needed which will replace a standard list of posts generated by Wordpress.\r\n\r\nThe last option, namely <strong>\"Show author info\"</strong> allows to display information about its author under each post in the following form:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-10','','','2012-08-12 15:56:32','2012-08-12 15:56:32','',416,'{$page_url}/uncategorized/416-revision-10/',0,'revision','',0),(418,1,'2012-08-12 17:52:55','2012-08-12 17:52:55','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-664\" title=\"Basic settings\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"541\" height=\"404\" /></a>\n\nThe first option allows to choose a color version of a theme. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\n\nThere is an option allowing to switch a style-switcher after an option/options of choosing theme\'s styles  - it is an element allowing for a website\'s user to choose a theme style himself/herself.\n\nThe next option is connected with switching on breadcrumbs element on a website. There are the following options to choose from: <strong>Enabled</strong>, <strong>Disabled</strong> and <strong>Conditional rule</strong> - then, you have to set a rule using <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of PHP language in a <strong>Conditional rule</strong> field, e.g. a rule displayinga a breadcrumbs element on the homepage and in the \"Meet GavernWP\" category will be in the following form: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\n\n\"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" option is useful when you want to place a widget instead of entries on the homepage - then  you have to switch it on <strong>mainbody</strong> widget position, place a widget needed which will replace a standard list of posts generated by Wordpress.\n\nThe last option, namely <strong>\"Show author info\"</strong> allows to display information about its author under each post in the following form:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Main-front-end-features-»-Free-WordPress-template.jpg\"><img class=\"aligncenter size-full wp-image-665\" title=\"Author block\" src=\"{$page_url}/wp-content/uploads/2012/07/Main-front-end-features-»-Free-WordPress-template.jpg\" alt=\"\" width=\"706\" height=\"123\" /></a>\n\n&nbsp;','Basic settings','','inherit','open','open','','416-autosave','','','2012-08-12 17:52:55','2012-08-12 17:52:55','',416,'{$page_url}/uncategorized/416-autosave/',0,'revision','',0),(643,1,'2012-08-07 10:29:13','2012-08-07 10:29:13','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing template\'s styles  - it is an element allowing for a website\'s user to choose a template style himself/herself.\r\n\r\n<strong>\"Use header image\"</strong> option allows to specify whether there are some images in the case where there are no widgets switched on, on a header widget position. These images can be specified in a templates live editor in a <strong>Header Image</strong> section.\r\n\r\nThe next two options are connected with switching on breadcrumbs and font-size switcher elements on a website. There are the following options to choose from: <strong>Enabled</strong>, <strong>Disabled</strong> and <strong>Conditional rule</strong> - then, you have to set a rule using <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of PHP language in a <strong>Conditional rule</strong> field, e.g. a rule displayinga a breadcrumbs element on the homepage and in the \"Meet GavernWP\" category will be in the following form: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\n\"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" option is useful when you want to place a widget instead of entries on the homepage - then  you have to switch it on <strong>mainbody</strong> widget position, place a widget needed which will replace a standard list of posts generated by Wordpress.\r\n\r\nThe last option, namely <strong>\"Show author info\"</strong> allows to display information about its author under each post in the following form:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-9','','','2012-08-07 10:29:13','2012-08-07 10:29:13','',416,'{$page_url}/uncategorized/416-revision-9/',0,'revision','',0),(419,1,'2012-07-13 14:36:32','2012-07-13 14:36:32','GavernWP has an advanced panel for managing theme\'s options in an administration panel. These options have been divided into a few main groups:\r\n<ul>\r\n	<li>Basic settings</li>\r\n	<li>Layout settings</li>\r\n	<li>Fonts settings</li>\r\n	<li>Navigation settings</li>\r\n	<li>Advanced settings</li>\r\n	<li>Shortcodes settings</li>\r\n	<li>Social API settings</li>\r\n	<li>Theme branding settings</li>\r\n	<li>Back-end branding settings</li>\r\n	<li>SEO settings</li>\r\n</ul>\r\nAlso, some additional elements generated by a framework in an administration panel in some various places appear, namely:\r\n<ul>\r\n	<li>Typography button</li>\r\n	<li>Widget rules</li>\r\n	<li>Open Graph metabox</li>\r\n	<li>GavernWP SEO settings metaboxes</li>\r\n</ul>\r\nIt is also worth getting acquainted with a theme configuration with files use in JSON format:\r\n<ul>\r\n	<li>Option files</li>\r\n	<li>Theme configuration</li>\r\n</ul>\r\nThe ability of these files edition, gives a possibility of deep interference in websites work based on GaverWP.','Main back-end features','','publish','open','open','','main-back-end-features','','','2012-11-20 13:08:03','2012-11-20 13:08:03','',0,'{$page_url}/?p=419',0,'post','',0),(421,1,'2012-11-20 13:09:05','2012-11-20 13:09:05','GavernWP has an advanced panel for managing theme\'s options in an administration panel. These options have been divided into a few main groups:\n<ul>\n	<li>Basic settings</li>\n	<li>Layout settings</li>\n	<li>Fonts settings</li>\n	<li>Navigation settings</li>\n	<li>Advanced settings</li>\n	<li>Shortcodes settings</li>\n	<li>Social API settings</li>\n	<li>Theme branding settings</li>\n	<li>Back-end branding settings</li>\n	<li>SEO settings</li>\n</ul>\nAlso, some additional elements generated by a framework in an administration panel in some various places appear, namely:\n<ul>\n	<li>Typography button</li>\n	<li>Widget rules</li>\n	<li>Open Graph metabox</li>\n	<li>GavernWP SEO settings metaboxes</li>\n</ul>\nIt is also worth getting acquainted with a theme configuration with files use in JSON format:\n<ul>\n	<li>Option files</li>\n	<li>Theme configuration</li>\n</ul>\nThe ability of these files edition, gives a possibility of deep interference in websites work based on GaverWP.','Main back-end features','','inherit','open','open','','419-autosave','','','2012-11-20 13:09:05','2012-11-20 13:09:05','',419,'{$page_url}/uncategorized/419-autosave/',0,'revision','',0),(422,1,'2012-07-14 08:04:05','2012-07-14 08:04:05','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-659\" title=\"Advanced settings\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"595\" height=\"571\" /></a>\r\n<ul>\r\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - it switches on a metatag forcing use of  <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> plugin on Internet Explorer browsers if it is installed.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - it activates parsing emoticons to a graphic form in widgets.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - it activates parsing of <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> in widgets.</li>\r\n	<li><strong>Use Thickbox</strong> - it allows to switch on Thickbox  script for presenting images included in posts.</li>\r\n	<li><strong>Value for the $content_width variable</strong> -  <strong>$content_width</strong> variable is used while creating thumbnails of images for posts, that\'s why it has to be defined as an appropriate value - we recommend to set the value not bigger than the max. page\'s width.</li>\r\n	<li><strong>Use the override.css file</strong> - thanks to switching on this option, an <strong>override.css</strong> file will appear at the end of the list of CSS files which allows to overwrite theme\'s CSS rules easily without interference in existing CSS code.</li>\r\n	<li><strong>Enable support for Open Search</strong> - it allows to switch on support for  <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> technology.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - it allows to switch on support for <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph </a> technology - after switching on this option, an additional metabox will appear on a page for editing posts: <a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-692\" title=\"OpenGraph metabox\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"810\" height=\"554\" /></a></li>\r\n</ul>','Advanced settings','','publish','open','open','','advanced-settings-2','','','2012-08-12 18:19:22','2012-08-12 18:19:22','',0,'{$page_url}/?p=422',0,'post','',0),(423,1,'2012-07-14 08:03:31','2012-07-14 08:03:31','Sekcja ustawień zaawansowanych zawiera ustawienia, które są związane z wieloma różnymi aspektami działania frameworka GavernWP:\n\n[screenshot]\n\n<strong>Widget rules</strong> pozwala wyłączyć ten mechanizm. Zalecamy wyłączenie tej opcji wtedy, kiedy nie potrzebujemy korzystać z widżetów widocznych tylko na wybranych podstronach. Należy zauważyć, że pozwoli to lekko zoptymalizować szybkość działania strony, gdyż operacje sprawdzania reguł dla każdego widżetu nie będą wykonywane.\n\n<strong>Support for Google Chrome Frame</strong> - włącza metatag wymuszający użycie plugina <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> na przeglądarkach Internet Explorer o ile jest on zainstalowany.\n\n<strong>Parse emoticons in the text widgets</strong> - aktywuje parsowanie emotikon do postaci graficznej w widżetach.\n\n<strong>Parse shortcodes in the text widgets</strong> - aktywuje parsowanie <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> w widżetach.\n\n<strong>Use Thickbox</strong> - pozwala na włączenie użycia skryptu Thickbox do prezentacji grafik zawartych w postach.\n\n<strong>Value for the $content_width variable</strong> - zmienna <strong>$content_width</strong> jest wykorzystywana przy tworzeniu miniatur grafik dla postów, dlatego należy ją zdefiniować jako odpowiednią wartość - polecamy podać wartość nie większą niż maksymalna szerokość strony.\n\n<strong>Use the override.css file</strong> - dzięki włączeniu tej opcji na końcu listy plików CSS pojawi się plik <strong>override.css</strong>, który pozwala na łatwe nadpisywanie reguł CSS szablonu bez ingerencji w istniejący kod CSS.\n\n<strong>Enable support for Open Search</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a>.\n\n<strong>Enable support for Open Graph</strong> - pozwala na włączenie wsparcia dla technologii Open Graph - po włączeniu tej opcji na stronie edycji postów pojawi się dodatkowy metabox: [screenshot]','Advanced settings','','inherit','open','open','','422-revision','','','2012-07-14 08:03:31','2012-07-14 08:03:31','',422,'{$page_url}/uncategorized/422-revision/',0,'revision','',0),(424,1,'2012-07-14 08:18:41','2012-07-14 08:18:41','A section of options connected with Social API includes five groups of options:\r\n<ul>\r\n	<li>options connected with sharing at Facebook</li>\r\n	<li>options connected with sharing on G+</li>\r\n	<li>options connected with sharing on Twitter</li>\r\n	<li>options connected with sharing on Pinterest</li>\r\n	<li>options allowing to switch on/off Social API on particular subpages.</li>\r\n</ul>\r\nOptions connected with sharing are the equivalent of parameters available in online editors, used for creating buttons like:\r\n<ul>\r\n	<li><a href=\"https://developers.facebook.com/docs/reference/plugins/like/\" target=\"_blank\">Facebook - \'like it\' button</a></li>\r\n	<li><a href=\"https://developers.google.com/+/plugins/+1button/\" target=\"_blank\">Goggle Plus - \'+1\' button</a></li>\r\n	<li><a href=\"https://dev.twitter.com/docs/tweet-button\" target=\"_blank\">Twitter - \'tweet\' button</a></li>\r\n	<li><a href=\"http://pinterest.com/about/goodies/\" target=\"_blank\">Pinterest - \'pin it\' button</a></li>\r\n</ul>\r\nThe last group of options allows to specify where they will be displayed - thanks to <strong>Include/Exclude specified articles from Social API</strong> option, it is possible to switch off Social API completely or switch on/off this functionality only for chosen posts, subpages and categories.\r\n\r\nWe specify the list of posts, subpages and categories in three last options:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-656\" title=\"Social API\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"704\" height=\"268\" /></a>\r\n\r\nas a sequence of ID, slug or the names of posts given, subpages or categories separated with comas, e.g.  [code]1,5,25[/code] or [code]typography,theme-settings,theme-essentials[/code]','Social API settings','','publish','open','open','','social-api-settings-2','','','2012-08-12 17:34:03','2012-08-12 17:34:03','',0,'{$page_url}/?p=424',0,'post','',0),(425,1,'2012-07-14 08:18:00','2012-07-14 08:18:00','Sekcja opcji związanych z Social API zawiera 5 grup opcji:\n<ul>\n	<li>opcje związane z udostępnianiem na Facebook</li>\n	<li>opcje związane z udostępnianiem na G+</li>\n	<li>opcje związane z udostępnianiem na Twitter</li>\n	<li>opcje związane z udostępnianiem na Pinterest</li>\n	<li>opcje pozwalające na włączenie/wyłączenie Social API na poszczególnych podstronach.</li>\n</ul>\nOpcje związane z udostępnianiem są odpowiednikiem parametrów dostępnych w edytorach online, służących do tworzenia przycisków:\n<ul>\n	<li><a href=\"https://developers.facebook.com/docs/reference/plugins/like/\" target=\"_blank\">Facebook - \'like it\' button</a></li>\n	<li><a href=\"https://developers.google.com/+/plugins/+1button/\" target=\"_blank\">Goggle Plus - \'+1\' button</a></li>\n	<li><a href=\"https://dev.twitter.com/docs/tweet-button\" target=\"_blank\">Twitter - \'tweet\' button</a></li>\n	<li><a href=\"http://pinterest.com/about/goodies/\" target=\"_blank\">Pinterest - \'pin it\' button</a></li>\n</ul>\nOstatnia grupa opcji pozwala określić gdzie będą wyświetlane - dzięki opcji <strong>Include/Exclude specified articles from Social API</strong> można w ogóle wyłączyć Social API lub włączyć/wyłączyć tą funkcjonalność tylko dla wybranych postów, podstron i kategorii.\n\nListę postów, podstron i kategorii określamy w trzech ostatnich opcjach:\n\n[screenshot]\n\njako ciąg ID, slug lub nazw danych postów, podstron lub kategorii porozdzielanych przecinkami np. [code]1,5,25[/code] lub [code][/code]','Social API settings','','inherit','open','open','','424-revision','','','2012-07-14 08:18:00','2012-07-14 08:18:00','',424,'{$page_url}/uncategorized/424-revision/',0,'revision','',0),(426,1,'2012-08-12 17:32:46','2012-08-12 17:32:46','A section of options connected with Social API includes five groups of options:\n<ul>\n	<li>options connected with sharing at Facebook</li>\n	<li>options connected with sharing on G+</li>\n	<li>options connected with sharing on Twitter</li>\n	<li>options connected with sharing on Pinterest</li>\n	<li>options allowing to switch on/off Social API on particular subpages.</li>\n</ul>\nOptions connected with sharing are the equivalent of parameters available in online editors, used for creating buttons like:\n<ul>\n	<li><a href=\"https://developers.facebook.com/docs/reference/plugins/like/\" target=\"_blank\">Facebook - \'like it\' button</a></li>\n	<li><a href=\"https://developers.google.com/+/plugins/+1button/\" target=\"_blank\">Goggle Plus - \'+1\' button</a></li>\n	<li><a href=\"https://dev.twitter.com/docs/tweet-button\" target=\"_blank\">Twitter - \'tweet\' button</a></li>\n	<li><a href=\"http://pinterest.com/about/goodies/\" target=\"_blank\">Pinterest - \'pin it\' button</a></li>\n</ul>\nThe last group of options allows to specify where they will be displayed - thanks to <strong>Include/Exclude specified articles from Social API</strong> option, it is possible to switch off Social API completely or switch on/off this functionality only for chosen posts, subpages and categories.\n\nWe specify the list of posts, subpages and categories in three last options:\n\n[screenshot]\n\nas a sequence of ID, slug or the names of posts given, subpages or categories separated with comas, e.g.  [code]1,5,25[/code] or [code]typography,theme-settings,theme-essentials[/code]','Social API settings','','inherit','open','open','','424-autosave','','','2012-08-12 17:32:46','2012-08-12 17:32:46','',424,'{$page_url}/uncategorized/424-autosave/',0,'revision','',0),(427,1,'2012-07-14 09:17:02','2012-07-14 09:17:02','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li><strong>tabs.json</strong> file - it includes a list of sections visible on the right side of an administration panel: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-654\" title=\"Sidebar\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"231\" height=\"485\" /></a> each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element of a table is a section name displayed in a panel, the second element is a file name without \"<strong>.json</strong>\" extension which stores a list of options available in a section given and the third value refers to whether a section given is visible in a panel. In this case, there will be a <strong>Basic</strong> tab displayed in a panel based on content of <strong>options.basic.json</strong> file.</li>\r\n	<li><strong>options.*.json </strong>files - they include a list of options available in a section given - their names are strictly connected with the content of <strong>tabs.json</strong> file.</li>\r\n</ul>\r\nEach options.*.json file includes three main fields in an object stored:\r\n<ul>\r\n	<li><strong>groupname</strong> - it is a section title</li>\r\n	<li><strong>groupdesc</strong> - it specifies a section description displayed directly under a  section title</li>\r\n	<li><strong>fields</strong> - it includes a table of objects of fields displayed under the title and a section description</li>\r\n</ul>\r\nEach field defined by an object including the following fields:\r\n<ul>\r\n	<li><strong>name</strong> - it specifies an option name which will be connected with a particular field. There is a prefix added automatically to an option name which is a theme name (it is stored in a global variable - <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- it specifies a field type. Standard fields are:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - a field including a description text - it is not used for storing any option value</li>\r\n	<li><strong>Text</strong> - the easiest text field allowing to insert short text values</li>\r\n	<li><strong>Textarea</strong> - a text field used for inserting a greater number of text values</li>\r\n	<li><strong>Select</strong> - a select field</li>\r\n	<li><strong>Switcher</strong> - a checkbox restricted to two options: \"Enabled\" and \"Disabled\"</li>\r\n	<li><strong>Media</strong> - a field allowing to choose images</li>\r\n	<li><strong>WidthHeight</strong> - a field allowing to specify two values defining width and height (mostly used with a Media field)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nThese fields are defined in a <strong>gavern/form_elements/standard.php</strong> file and their code was derived from a <strong>GKFormInput</strong> field. It is worth remembering that files connected with options are parsed by a <strong>gavern/form.parser.php</strong> file. Additionally, you may create your own fields types in a <strong>gavern/form_elements</strong> catalog. In GavernWP, we have included the following fields types:\r\n<strong></strong>\r\n<ul>\r\n	<li><strong>Menu</strong> - a field allowing to generate options connected with page\'s menu - used in a Navigation section</li>\r\n	<li><strong>ThemeStyle</strong> - a field allowing to choose page\'s style - used at the beginning of a <strong>Basic</strong> section.</li>\r\n</ul>\r\nThe description of creating your own fields types we will describe in the further part of this article.\r\n<ul>\r\n	<li><strong>label</strong> - it specifies a label text visible next to a field</li>\r\n	<li><strong>tooltip</strong> - (optional) it allows to specify tooltip content which will appear after mousing over a label of a field given</li>\r\n	<li><strong>default</strong> - default value of a field given</li>\r\n	<li><strong>class</strong> - (optional) this field allows to specify CSS classes added to an element while generating it (if a field code supported such a functionality)</li>\r\n	<li><strong>format</strong> - (optional) a field specifying a desired field content in the form of a regular expression. e.g. value: [code][a-zA-Z]{2,5}[/code] specifies that a field given will be filled in correctly only when a user set as its value a sequence of capital or small letters from 2 to 5 symbols.</li>\r\n	<li><strong>required</strong> - (optional) allows to specify whether filling in a particular field was required</li>\r\n	<li><strong>visibility</strong> - (optional) specifies when a particular field is visible. Visibility rules are separated with commas and are created in <strong>FIELD_NAME=VALUE</strong> format - in the case of a few visibility rules, they are linked with <strong>AND</strong> operator. The value of  <strong>FIELD_NAME</strong> is a name without a prefix with a theme name. e.g. [code]option1=10,option2=20[/code] will cause that a field given will be visible when an option with <strong>option1</strong> name will be set to <strong>10</strong> and, at the same time, an <strong>option2</strong> option will have have value equals <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (optional) this field is used for storing additional values, e.g. in the case of a <strong>Select</strong> field, it is used for storing names and options values. This field is very useful when creating more advanced fields which may require additional configuration options.</li>\r\n</ul>\r\nAfter adding a new option, you have to remember about its support in the theme. Option value is loaded by using a get_option function of a schemata given:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\nwhen <strong>OPTION_NAME</strong> is an option name from a JSON file and <strong>DEFAULT_VALUE</strong> is default value of an option which will be used when a user does not specify a value of an option given. What is important, there is a \"<strong>_</strong>\" symbol which you cannot omit. A prefix with a theme name is added in order differentiate values of options of different themes.\r\n<h3>Creating your own field types options</h3>\r\nWhile creating a new field type, you have to start from creating a catalog compliant with a field name, e.g. <strong>CustomField</strong> in a <strong>gavern/form_elements</strong> catalog. Then, you have to create a config.json file in this catalog and fill it in according to the schemata below:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\n<strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> fields have to include particular values; js and css fields are optional - they allow to specify whether a field given has to use additional CSS and JavaScript code (then, a name of files from a field catalog has to be set as a value). Also, you have to create a <strong>customfield.php</strong> file including a <strong>GKFormInputCustomField</strong> class derived after a <strong>GKFormInput</strong> class.\r\n\r\nAlso, a <strong>customfield.css</strong> file must include a safety code at the beginning:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nEach field class has to include at least one public method - <strong>output</strong> not loading any additional arguments. This method must return HTML code of a field given. Field properties froma JSON file are available as class fields, e.g. <strong>required</strong> is available as:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nThe second important public methid of each class of a form field is a <strong>getValue</strong> method which loads one argument - <strong>$default</strong>. Its use is optional and useful only when a value of a field given uses more than one field in the data base. Then, it is useful to overwrite this method - as an example we recommend a standard code of a <strong>WidthHeight</strong> field where overwritting a getValue method was used for storing values of two form fields in one main field created by a <strong>GKInputFormWidthHeight</strong> class.\r\n\r\nThe remaining class methods have to be created according to the needs of the author of a form  field given.','Option files','','publish','open','open','','option-files','','','2012-08-12 17:43:11','2012-08-12 17:43:11','',0,'{$page_url}/?p=427',0,'post','',8),(428,1,'2012-07-14 09:16:11','2012-07-14 09:16:11','W GavernWP modyfikacja zawartości panelu administracyjnego jest bardzo łatwa - opiera się na plikach JSON, zawierających listę opcji. Dzięki temu tworzenie nowych opcji dostępnych w panelu administracyjnym jest bardzo łatwe.\n\nPliki opcji znajdują się w katalogu gavern/options w folderze związanym z aktualnie używanym językiem. W katalogu znajdziemy dwie główne grupy plików:\n<ul>\n	<li>plik <strong>tabs.json</strong> - zawiera on listę sekcji widocznych w panelu administracyjnym po prawej stronie: [screensthot] każda sekcja jest opisana tablicą postaci [code][\"Basic\", \"options.basic\", \"enabled\"][/code] pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\n</ul>\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\n<ul>\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\n</ul>\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\n<ul>\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\n<ul>\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\n	<li><strong>Select</strong> - pole wyboru</li>\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\n</ul>\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\n<ul>\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\n</ul>\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\n</ul>\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\n\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\n\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\n<h3>Tworzenie własnych pól opcji</h3>\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\n\n[code]{\n\n\"name\": \"CustomField\",\n\n\"description\": \"Example Custom Field\",\n\n\"js\": false,\n\n\"css\": false,\n\n\"php\": \"customfield.php\",\n\n\"class\": \"GKFormInputCustomField\"\n\n}[/code]\n\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\n\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\n\n[code]// disable direct access to the file\n\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\n\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\n\n[code]$this-&gt;required[/code]\n\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\n\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision','','','2012-07-14 09:16:11','2012-07-14 09:16:11','',427,'{$page_url}/uncategorized/427-revision/',0,'revision','',0),(429,1,'2012-08-12 17:30:43','2012-08-12 17:30:43','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\n\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\n<ul>\n	<li><strong>tabs.json</strong> file - it includes a list of sections visible on the right side of an administration panel:  [screensthot] each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element of a table is a section name displayed in a panel, the second element is a file name without \"<strong>.json</strong>\" extension which stores a list of options available in a section given and the third value refers to whether a section given is visible in a panel. In this case, there will be a <strong>Basic</strong> tab displayed in a panel based on content of <strong>options.basic.json</strong> file.</li>\n	<li><strong>options.*.json </strong>files - they include a list of options available in a section given - their names are strictly connected with the content of <strong>tabs.json</strong> file.</li>\n</ul>\nEach options.*.json file includes three main fields in an object stored:\n<ul>\n	<li><strong>groupname</strong> - it is a section title</li>\n	<li><strong>groupdesc</strong> - it specifies a section description displayed directly under a  section title</li>\n	<li><strong>fields</strong> - it includes a table of objects of fields displayed under the title and a section description</li>\n</ul>\nEach field defined by an object including the following fields:\n<ul>\n	<li><strong>name</strong> - it specifies an option name which will be connected with a particular field. There is a prefix added automatically to an option name which is a theme name (it is stored in a global variable - <strong>$tpl-&gt;name</strong>).</li>\n	<li><strong>type</strong>- it specifies a field type. Standard fields are:\n<ul>\n	<li><strong>TextBlock</strong> - a field including a description text - it is not used for storing any option value</li>\n	<li><strong>Text</strong> - the easiest text field allowing to insert short text values</li>\n	<li><strong>Textarea</strong> - a text field used for inserting a greater number of text values</li>\n	<li><strong>Select</strong> - a select field</li>\n	<li><strong>Switcher</strong> - a checkbox restricted to two options: \"Enabled\" and \"Disabled\"</li>\n	<li><strong>Media</strong> - a field allowing to choose images</li>\n	<li><strong>WidthHeight</strong> - a field allowing to specify two values defining width and height (mostly used with a Media field)</li>\n</ul>\n</li>\n</ul>\nThese fields are defined in a <strong>gavern/form_elements/standard.php</strong> file and their code was derived from a <strong>GKFormInput</strong> field. It is worth remembering that files connected with options are parsed by a <strong>gavern/form.parser.php</strong> file. Additionally, you may create your own fields types in a <strong>gavern/form_elements</strong> catalog. In GavernWP, we have included the following fields types:\n<strong></strong>\n<ul>\n	<li><strong>Menu</strong> - a field allowing to generate options connected with page\'s menu - used in a Navigation section</li>\n	<li><strong>TemplateStyle</strong> - a field allowing to choose page\'s style - used at the beginning of a <strong>Basic</strong> section.</li>\n</ul>\nThe description of creating your own fields types we will describe in the further part of this article.\n<ul>\n	<li><strong>label</strong> - it specifies a label text visible next to a field</li>\n	<li><strong>tooltip</strong> - (optional) it allows to specify tooltip content which will appear after mousing over a label of a field given</li>\n	<li><strong>default</strong> - default value of a field given</li>\n	<li><strong>class</strong> - (optional) this field allows to specify CSS classes added to an element while generating it (if a field code supported such a functionality)</li>\n	<li><strong>format</strong> - (optional) a field specifying a desired field content in the form of a regular expression. e.g. value: [code][a-zA-Z]{2,5}[/code] specifies that a field given will be filled in correctly only when a user set as its value a sequence of capital or small letters from 2 to 5 symbols.</li>\n	<li><strong>required</strong> - (optional) allows to specify whether filling in a particular field was required</li>\n	<li><strong>visibility</strong> - (optional) specifies when a particular field is visible. Visibility rules are separated with commas and are created in <strong>FIELD_NAME=VALUE</strong> format - in the case of a few visibility rules, they are linked with <strong>AND</strong> operator. The value of  <strong>FIELD_NAME</strong> is a name without a prefix with a theme name. e.g. [code]option1=10,option2=20[/code] will cause that a field given will be visible when an option with <strong>option1</strong> name will be set to <strong>10</strong> and, at the same time, an <strong>option2</strong> option will have have value equals <strong>20</strong>.</li>\n	<li><strong>other</strong> - (optional) this field is used for storing additional values, e.g. in the case of a <strong>Select</strong> field, it is used for storing names and options values. This field is very useful when creating more advanced fields which may require additional configuration options.</li>\n</ul>\nAfter adding a new option, you have to remember about its support in the theme. Option value is loaded by using a get_option function of a schemata given:\n\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\n\nwhen <strong>OPTION_NAME</strong> is an option name from a JSON file and <strong>DEFAULT_VALUE</strong> is default value of an option which will be used when a user does not specify a value of an option given. What is important, there is a \"<strong>_</strong>\" symbol which you cannot omit. A prefix with a theme name is added in order differentiate values of options of different themes.\n<h3>Creating your own field types options</h3>\nWhile creating a new field type, you have to start from creating a catalog compliant with a field name, e.g. <strong>CustomField</strong> in a <strong>gavern/form_elements</strong> catalog. Then, you have to create a config.json file in this catalog and fill it in according to the schemata below:\n\n[code]{\n\n\"name\": \"CustomField\",\n\n\"description\": \"Example Custom Field\",\n\n\"js\": false,\n\n\"css\": false,\n\n\"php\": \"customfield.php\",\n\n\"class\": \"GKFormInputCustomField\"\n\n}[/code]\n\n<strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> fields have to include particular values; js and css fields are optional - they allow to specify whether a field given has to use additional CSS and JavaScript code (then, a name of files from a field catalog has to be set as a value). Also, you have to create a <strong>customfield.php</strong> file including a <strong>GKFormInputCustomField</strong> class derived after a <strong>GKFormInput</strong> class.\n\nAlso, a <strong>customfield.css</strong> file must include a safety code at the beginning:\n\n[code]// disable direct access to the file\n\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\n\nEach field class has to include at least one public method - <strong>output</strong> not loading any additional arguments. This method must return HTML code of a field given. Field properties froma JSON file are available as class fields, e.g. <strong>required</strong> is available as:\n\n[code]$this-&gt;required[/code]\n\nThe second important public methid of each class of a form field is a <strong>getValue</strong> method which loads one argument - <strong>$default</strong>. Its use is optional and useful only when a value of a field given uses more than one field in the data base. Then, it is useful to overwrite this method - as an example we recommend a standard code of a <strong>WidthHeight</strong> field where overwritting a getValue method was used for storing values of two form fields in one main field created by a <strong>GKInputFormWidthHeight</strong> class.\n\nThe remaining class methods have to be created according to the needs of the author of a form  field given.','Option files','','inherit','open','open','','427-autosave','','','2012-08-12 17:30:43','2012-08-12 17:30:43','',427,'{$page_url}/uncategorized/427-autosave/',0,'revision','',0),(593,1,'2012-08-11 00:33:03','2012-08-11 00:33:03','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - it includes a list of sections visible on the right side of an administration panel:  [screensthot] each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element of a table is a section name displayed in a panel, the second element is a file name without \"<strong>.json</strong>\" extension which stores a list of options available in a section given and the third value refers to whether a section given is visible in a panel. In this case, there will be a <strong>Basic</strong> tab displayed in a panel based on content of <strong>options.basic.json</strong> file.</li>\r\n	<li><strong>options.*.json </strong>files - they include a list of options available in a section given - their names are strictly connected with the content of <strong>tabs.json</strong> file.</li>\r\n</ul>\r\nEach options.*.json file includes three main fields in an object stored:\r\n<ul>\r\n	<li><strong>groupname</strong> - it is a section title</li>\r\n	<li><strong>groupdesc</strong> - it specifies a section description displayed directly under a  section title</li>\r\n	<li><strong>fields</strong> - it includes a table of objects of fields displayed under the title and a section description</li>\r\n</ul>\r\nEach field defined by an object including the following fields:\r\n<ul>\r\n	<li><strong>name</strong> - it specifies an option name which will be connected with a particular field. There is a prefix added automatically to an option name which is a template name (it is stored in a global variable - <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- it specifies a field type. Standard fields are:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - a field including a description text - it is not used for storing any option value</li>\r\n	<li><strong>Text</strong> - the easiest text field allowing to insert short text values</li>\r\n	<li><strong>Textarea</strong> - a text field used for inserting a greater number of text values</li>\r\n	<li><strong>Select</strong> - a select field</li>\r\n	<li><strong>Switcher</strong> - a checkbox restricted to two options: \"Enabled\" and \"Disabled\"</li>\r\n	<li><strong>Media</strong> - a field allowing to choose images</li>\r\n	<li><strong>WidthHeight</strong> - a field allowing to specify two values defining width and height (mostly used with a Media field)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nThese fields are defined in a <strong>gavern/form_elements/standard.php</strong> file and their code was derived from a <strong>GKFormInput</strong> field. It is worth remembering that files connected with options are parsed by a <strong>gavern/form.parser.php</strong> file. Additionally, you may create your own fields types in a <strong>gavern/form_elements</strong> catalog. In GavernWP, we have included the following fields types:\r\n<strong></strong>\r\n<ul>\r\n	<li><strong>Menu</strong> - a field allowing to generate options connected with page\'s menu - used in a Navigation section</li>\r\n	<li><strong>TemplateStyle</strong> - a field allowing to choose page\'s style - used at the beginning of a <strong>Basic</strong> section.</li>\r\n</ul>\r\nThe description of creating your own fields types we will describe in the further part of this article.\r\n<ul>\r\n	<li><strong>label</strong> - it specifies a label text visible next to a field</li>\r\n	<li><strong>tooltip</strong> - (optional) it allows to specify tooltip content which will appear after mousing over a label of a field given</li>\r\n	<li><strong>default</strong> - default value of a field given</li>\r\n	<li><strong>class</strong> - (optional) this field allows to specify CSS classes added to an element while generating it (if a field code supported such a functionality)</li>\r\n	<li><strong>format</strong> - (optional) a field specifying a desired field content in the form of a regular expression. e.g. value: [code][a-zA-Z]{2,5}[/code] specifies that a field given will be filled in correctly only when a user set as its value a sequence of capital or small letters from 2 to 5 symbols.</li>\r\n	<li><strong>required</strong> - (optional) allows to specify whether filling in a particular field was required</li>\r\n	<li><strong>visibility</strong> - (optional) specifies when a particular field is visible. Visibility rules are separated with commas and are created in <strong>FIELD_NAME=VALUE</strong> format - in the case of a few visibility rules, they are linked with <strong>AND</strong> operator. The value of  <strong>FIELD_NAME</strong> is a name without a prefix with a template name. e.g. [code]option1=10,option2=20[/code] will cause that a field given will be visible when an option with <strong>option1</strong> name will be set to <strong>10</strong> and, at the same time, an <strong>option2</strong> option will have have value equals <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (optional) this field is used for storing additional values, e.g. in the case of a <strong>Select</strong> field, it is used for storing names and options values. This field is very useful when creating more advanced fields which may require additional configuration options.</li>\r\n</ul>\r\nAfter adding a new option, you have to remember about its support in the template. Option value is loaded by using a get_option function of a schemata given:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\nwhen <strong>OPTION_NAME</strong> is an option name from a JSON file and <strong>DEFAULT_VALUE</strong> is default value of an option which will be used when a user does not specify a value of an option given. What is important, there is a \"<strong>_</strong>\" symbol which you cannot omit. A prefix with a template name is added in order differentiate values of options of different templates.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nWhile creating a new field type, you have to start from creating a catalog compliant with a field name, e.g. <strong>CustomField</strong> in a <strong>gavern/form_elements</strong> catalog. Then, you have to create a config.json file in this catalog and fill it in according to the schemata below:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\n<strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> fields have to include particular values; js and css fields are optional - they allow to specify whether a field given has to use additional CSS and JavaScript code (then, a name of files from a field catalog has to be set as a value). Also, you have to create a <strong>customfield.php</strong> file including a <strong>GKFormInputCustomField</strong> class derived after a <strong>GKFormInput</strong> class.\r\n\r\nAlso, a <strong>customfield.css</strong> file must include a safety code at the beginning:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nEach field class has to include at least one public method - <strong>output</strong> not loading any additional arguments. This method must return HTML code of a field given. Field properties froma JSON file are available as class fields, e.g. <strong>required</strong> is available as:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nThe second important public methid of each class of a form field is a <strong>getValue</strong> method which loads one argument - <strong>$default</strong>. Its use is optional and useful only when a value of a field given uses more than one field in the data base. Then, it is useful to overwrite this method - as an example we recommend a standard code of a <strong>WidthHeight</strong> field where overwritting a getValue method was used for storing values of two form fields in one main field created by a <strong>GKInputFormWidthHeight</strong> class.\r\n\r\nThe remaining class methods have to be created according to the needs of the author of a form  field given.','Option files','','inherit','open','open','','427-revision-10','','','2012-08-11 00:33:03','2012-08-11 00:33:03','',427,'{$page_url}/uncategorized/427-revision-10/',0,'revision','',0),(592,1,'2012-07-27 12:15:12','2012-07-27 12:15:12','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - it includes a list of sections visible on the right side of an administration panel:  [screensthot] each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-9','','','2012-07-27 12:15:12','2012-07-27 12:15:12','',427,'{$page_url}/uncategorized/427-revision-9/',0,'revision','',0),(432,1,'2012-07-13 13:20:33','2012-07-13 13:20:33','Jednym z kluczowych elementów wpływających na wygląd strony WWW jest właściwy wybór czcionek zastosowanych do prezentacji tekstu.\r\n\r\nGavernWP umożliwia łatwy wybór czcionek przypisanych do określonych przez użytkownika selektorów CSS.\r\n\r\nAby ułatwić obsługę wielu różnych czcionek na jednej stronie GavernWP obsługuje grupy czcionek - każa grupa pozwala na przypisanie danej czcionki do wybranych przez użytkownika selektorów:\r\n\r\n[screenshot]\r\n\r\nGrupy czcionek zdefiniowane są w pliku konfiguracyjnym <strong>fonts.json</strong>. Dodanie nowej grupy czcionek jest bardzo proste - wystarczy zdefiniować kolejny obiekt postaci:\r\n\r\n[code]{\r\n\"full_name\": \"Full name of the fonts group\",\r\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\"\r\n}[/code]\r\n\r\nPo dodaniu takiego obiektu w tablicy zawartej w pliku <strong>fonts.json </strong>ujrzymy w panelu administracyjnym kolejną grupę czcionek, którą można zarządzać.\r\n\r\nDla każdej grupy czcionek należy określić trzy podstawowe wartości:\r\n<ul>\r\n	<li>rodzaj zastosowanej czcionki</li>\r\n	<li>czcionka danego rodzaju</li>\r\n	<li>selektory powiązane z daną czcionką</li>\r\n</ul>\r\nOkreślenie rodzaju czcionki ogranicza się do wyboru jednego z trzech typów czcionek:\r\n<ul>\r\n	<li><strong>Standard fonts</strong> - standardowe zestawy czcionek dostępne na większości komputerów - należy wybrać daną czcionkę z listy pojawiającej się pod polem wyboru rodzaju czcionki: [screenshot]</li>\r\n	<li><strong>Fonts Squirrel</strong> - czcionki pobrane ze strony <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> - należy pobrać @font-face kit danej czcionki i umieścić jego zawartość w katalogu <strong>fonts</strong>. Ważne jest by folder miał taką samą nazwę jak nazwa czcionki zastosowana w pliku <strong>stylesheet.css</strong> znajdującym się w nowym katalogu. Po dodaniu tak przygotowanego katalogu dana czcionka pojawi się na liście wyboru: [screenshot]</li>\r\n	<li><strong>Google Web Fonts</strong> - czcionki pochodzace z zasobów strony <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> w tym wypadku należy określić adres URL danej czcionki: [screenshot]</li>\r\n</ul>\r\nOstatni etap to określenie selektorów zwiąanych z daną czcionką:\r\n\r\n[screenshot]\r\n\r\nPo zapisaniu ustawień efekty powinny być od razu widoczne na stronie - nie jest wymagane wykonywanie żadnych dodatkowych operacji.','Fonts settings','','inherit','open','open','','410-revision-2','','','2012-07-13 13:20:33','2012-07-13 13:20:33','',410,'{$page_url}/uncategorized/410-revision-2/',0,'revision','',0),(433,1,'2012-08-12 17:58:57','2012-08-12 17:58:57','Gavern Framework has a quite extensive files structure. It is similar to a standard structure of majority of the themes, however, because of many functionalities, there are some new elements.\n\n<!--more-->\n\nThe overall outline of files structure is presented below:\n<ol>\n	<li><strong>theme\'s catalog</strong>\n<small>It includes all basic files and catalogs for a theme. It is worth seeing that Custom Pages templats have a <strong>theme.</strong> prefix at the beginning of their names which helps to find them in files structure.</small>\n<ol>\n	<li><strong>css</strong>\n<small>There are all CSS theme\'s files in it. They are described in details in an entry about framework\'s CSS code.\n</small>\n<ol>\n	<li><strong>back-end</strong>\n<small>To have everything ordered, CSS files connected with an administration panel were placed in this catalog.\n</small></li>\n</ol>\n</li>\n	<li><strong>fonts</strong>\n<small>This catalog is used for storing files with additional fonts. You have to remember that each font must have its own catalog including a stylesheet.css file. More information about fonts service can be found in an entry about <strong>Fonts</strong> in an administration panel.<strong></strong>\n</small></li>\n	<li><strong>gavern</strong>\n<small>A catalog including the base of whole GavernWP framework work.\n</small>\n<ol>\n	<li><strong>classes</strong>\n<small>Files with supporting classes used in framework\'s code.\n</small></li>\n	<li><strong>config</strong>\n<small>Files including framework\'s configuration. It has to be remembered that there are additional catalogs used for making transalations.\n</small></li>\n	<li><strong>form_elements</strong>\n<small>It includes a main file with a code which generates basic form elements in an administration panel, as well as, catalogs with elements created by a user.\n</small></li>\n	<li><strong>helpers</strong>\n<small>A collection of classes connected with specific framework\'s tasks, e.g. with generating layout fragments.\n</small></li>\n	<li><strong>layouts</strong>\n<small>Files used for generating HTML code of an administration panel.\n</small></li>\n	<li><strong>options</strong>\n<small>Files which store options of particular sections of theme\'s administration panel. Similarly to <strong>config</strong> catalog; there are also additional catalogs used for making translations.<strong></strong>\n</small></li>\n</ol>\n</li>\n	<li><strong>images</strong>\n<small>Graphic files used with a theme\n</small>\n<ol>\n	<li><strong>back-end</strong>\n<small>Files connected with an administration panel.\n</small></li>\n	<li><strong>headers</strong>\n<small>Default header\'s images.\n</small></li>\n	<li><strong>post_formats</strong>\n<small>Images connected with entries formats.\n</small></li>\n</ol>\n</li>\n	<li><strong>js</strong>\n<small>JavaScript scripts files used in a the\n</small>\n<ol>\n	<li><strong>back-end</strong>\n<small>Likewise in <strong>css</strong> and <strong>images</strong> catalogs there are files included used in an administration panel.<strong></strong><strong></strong>\n</small></li>\n	<li><strong>templates</strong>\n<small>Additional JavaScript files used by some Custom Pages.\n</small></li>\n</ol>\n</li>\n	<li><strong>languages</strong>\n<small>Main files used for creating translations.\n</small></li>\n	<li><strong>layouts</strong>\n<small>Files used for generating subpages; they include elements which are used very often; e.g. a head section.\n</small></li>\n</ol>\n</li>\n</ol>\n&nbsp;','Framework structure','','inherit','open','open','','330-autosave','','','2012-08-12 17:58:57','2012-08-12 17:58:57','',330,'{$page_url}/uncategorized/330-autosave/',0,'revision','',0),(434,1,'2012-07-09 09:44:17','2012-07-09 09:44:17','Framework GavernWP posiada dość rozbudowaną strukturę plików. Jest ona w dużej mierze podobna do standardowej struktury większości szablonów jednak z racji wielu funkcjonalności pojawiają się w niej nowe elementy.\r\n\r\n<!--more-->\r\n\r\nOgólny zarys struktury plików prezentuje się następująco:\r\n<ol>\r\n	<li><strong>katalog szablonu</strong>\r\n<small>Zawiera on wszystkie podstawowe pliki i katalogi dla szablonu. Warto zauważyć, że szablony Custom Pages posiadają na poczatku nazwy prefiks <strong>template.</strong>, który ułatwia ich odnalezienie w strukturze plików.</small>\r\n<ol>\r\n	<li><strong>css</strong>\r\n<small>Znajdują się w nim wszystkie pliki CSS szablonu. Zostały one dokładniej omówione we wpisie dotyczącym kodu CSS frameworka.</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Dla większego porządku pliki CSS dotyczące panelu administracyjnego zostały umieszczone w tym katalogu.</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>fonts</strong>\r\n<small>Katalog ten jest przeznaczony do przechowywania plików z dodatkowymi fontami. Należy pamiętać by każdy font posiadał swój katalog zawierający plik stylesheet.css. Więcej o obsłudze fontów zostało napisane we wpisie dotyczącym sekcji <strong>Fonts</strong> w panelu administracyjnym.</small></li>\r\n	<li><strong>gavern</strong>\r\n<small>Katalog zawierający podstawę działania całego frameworka GavernWP.</small>\r\n<ol>\r\n	<li><strong>classes</strong>\r\n<small>Pliki z klasami pomocniczymi, używanymi w kodzie frameworka.</small></li>\r\n	<li><strong>config</strong>\r\n<small>Pliki zawierające konfigurację frameworka. Należy pamiętać o tym, że stosowane są dodatkowe katalogi wykorzystywane do wykonywania tłumaczeń</small></li>\r\n	<li><strong>form_elements</strong>\r\n<small>Poza głównym plikiem zawierającym kod generujący podstawowe elementy formularzy w panelu administracyjnym, zawiera on katalogi z elementami stworzonymi przez użytkownika.</small></li>\r\n	<li><strong>helpers</strong>\r\n<small>Zbiór klas związanych z konkretnymi zadaniami frameworka np. generowaniem fragmentów layoutu.</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Pliki wykorzystywane do generowania kodu HTML panelu administracyjnego.</small></li>\r\n	<li><strong>options</strong>\r\n<small>Pliki przechowujące opcje poszczególnych sekcji panelu administracyjnego szablonu. Podobnie jak katalog <strong>config</strong> - tutaj także stosowane są dodatkowe katalogi wykorzystywane do wykonywania tłumaczeń.</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>images</strong>\r\n<small>Pliki graficzne wykorzystywane przez szablon</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Pliki związane z panelem administracyjnym</small></li>\r\n	<li><strong>headers</strong>\r\n<small>Domyślne grafiki headera</small></li>\r\n	<li><strong>post_formats</strong>\r\n<small>Grafiki związane z formatami wpisów.</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>js</strong>\r\n<small>Pliki skryptów JavaScript wykorzystywane w szablonie</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Podobnie jak w katalogach <strong>css</strong> oraz <strong>images</strong> zawarte są tutaj pliki wykorzystywane w panelu administracyjnym</small></li>\r\n	<li><strong>templates</strong>\r\n<small>Dodatkowe pliki JavaScript wykorzystywane przez niektóre Custom Pages</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>languages</strong>\r\n<small>Główne pliki wykorzystywane do tworzenia tłumaczeń</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Pliki wykorzystywane do generowania podstron - zawierają elementy, które są wielokrotnie wykorzystywane - np. sekcja head.</small></li>\r\n</ol>\r\n</li>\r\n</ol>\r\n&nbsp;','Framework structure','','inherit','open','open','','330-revision-3','','','2012-07-09 09:44:17','2012-07-09 09:44:17','',330,'{$page_url}/uncategorized/330-revision-3/',0,'revision','',0),(436,1,'2012-07-09 09:42:35','2012-07-09 09:42:35','oEmbeds to ważne udogodnienie wykorzystywane przy tworzeniu postów. Dzięki nim użytkownik w łatwy sposób może osadzić we wpisie np. film z serwisu YouTube podając jedynie link do filmu - Wordpress automatycznie wygeneruje z takiego linka film.\r\n\r\nPrzykłady prezentujemy poniżej:\r\n\r\nYouTube\r\n\r\nhttp://www.youtube.com/watch?v=MdrC7kYTAX4\r\n\r\nTwitter\r\n\r\nhttps://twitter.com/gavickpro/status/221189052983025666\r\n\r\nFlickr\r\n\r\nhttp://www.flickr.com/photos/synectic/5489943396/','oEmbeds','','inherit','open','open','','332-revision-4','','','2012-07-09 09:42:35','2012-07-09 09:42:35','',332,'{$page_url}/uncategorized/332-revision-4/',0,'revision','',0),(437,1,'2012-07-09 09:42:00','2012-07-09 09:42:00','GavernWP posiada pełne wsparcie dla wykonywania tłumaczeń. Z racji pewnych różnic wynikających z wykorzystania plików JSON do generowania opcji szablonu tłumaczenie szablonu powinno odbywać się w trzech miejscach:\r\n<ol>\r\n	<li>z użyciem plików z katalogu lanugages</li>\r\n	<li>poprzez stworzenie katalogu danego języka w katalogu config</li>\r\n	<li>poprzez stworzenie katalogu danego języka w katalogu options</li>\r\n</ol>\r\nPierwszy etap jest standardową operacją opisaną dokładnie w dokumentacji Wordpressa. Skupmy się zatem na pozostałych dwóch etapach:\r\n\r\nStandardowo w katalogach <strong>config</strong> i <strong>options</strong> stworzony jest katalog <strong>en_US</strong>, który zawiera pliki konfiguracyjne JSON w języku angielskim. Aby więc przetłumaczyć szablon na inny język należy skopiować ten katalog i zmienić mu nazwę na odpowiadającą językowi używanemu w naszej instalacji np. <strong>pl_PL</strong>. Następnie należy zmienić wszystkie frazy anglojęzyczne na te w naszym języku.\r\n\r\nUWAGA! Nie wolno zmieniać nazw kluczy w plikach JSON jak też nazw własnych, gdyż są one wykorzystywane do poprawnego działania i odczytywania wartości.\r\n\r\nPrzykładowo w pliku widgets.json dla fragmentu:\r\n\r\n[code]{\r\n\"name\": \"Top widgets\",\r\n\"id\": \"top\",\r\n\"description\": \"Widgets area on under the header of website\",\r\n\"before_widget\": \"&lt;div id=\\\"%1$s\\\" class=\\\"box%2$s\\\"&gt;\",\r\n\"after_widget\": \"&lt;/div&gt;\",\r\n\"before_title\": \"&lt;h3 class=\\\"box-title\\\"&gt;\",\r\n\"after_title\": \"&lt;/h3&gt;\"\r\n},[/code]\r\n\r\nzmieniamy tylko frazy:\r\n<ul>\r\n	<li>\"Top widgets\"</li>\r\n	<li>\"Widgets area on under the header of website\"</li>\r\n</ul>\r\nPo tak wykonanej operacji w panelu administracyjnym pojawią się zdania w naszym rodzimym języku.\r\n\r\nWarto też pamietać, że w wypadku gdy GavernWP nie znajdzie katalogu odpowiadającego ustawionemu w konfiguracji językowi, zostaną wykorzystane pliki z katalogów <strong>en_US</strong>.','Translations','','inherit','open','open','','335-revision-3','','','2012-07-09 09:42:00','2012-07-09 09:42:00','',335,'{$page_url}/uncategorized/335-revision-3/',0,'revision','',0),(438,1,'2012-07-09 09:41:00','2012-07-09 09:41:00','Dla zapewnienia wysokiej elastyczności frameworka GavernWP, zdecydowaliśmy się na wykorzystanie plików w formacie JSON do przechowywania konfiguracji szablonu i układu opcji w panelu administracyjnym.\r\n\r\nW katalogu <strong>gavern/options/</strong> znajdziemy pliki odpowiadające za konfigurację szablonu:\r\n<ul>\r\n	<li><strong>fonts.json</strong> - plik przechowujący grupy czcionek szablonu. Domyślnie stworzone są trzy główne grupy. Aby stworzyć nową grupę wystarczy dodać kolejny obiekt do istniejącej w tym pliku tablicy obiektów.</li>\r\n	<li><strong>menus.json</strong> - w pliku tym znajdziemy miejsca na menu wykorzystywane w szablonie. Należy pamiętać, że w odróżnieniu do pliku fonts.json, poza dodaniem nowego obiektu trzeba też w kodzie szablonu dodać kod PHP generujący dane menu. Warto też pamiętać, że tylko jedno menu, może być menu głównym (pole <strong>main</strong> w obiekcie menu).</li>\r\n	<li><strong>opengraph.json</strong> - plik ten zawiera konfigurację pól używanych w bloku związanym z metabox-em używanym do generowania danych Open Graph. Nie zalecamy dokonywania w nim żadnych zmian bez poznania dokładnej implementacji tagów Open Graph we frameworku GavernWP.</li>\r\n	<li><strong>styles.json</strong> - plik ten jest wykorzystywany do generowania dodatkowych styli szablonu. Poza dodaniem nowego stylu, należy też pamietać o stworzeniu dodatkowego pliku CSS, który będzie ładowany przy zmianie stylu szablonu.</li>\r\n	<li><strong>template.json</strong> - najważniejszy plik konfiguracyjny. Zawiera on informacje o szablonie oraz pozwala wyłączyć wybrane elementy panelu administracyjnego szablonu. Nie jest zalecane dodawanie nowych pól do tego pliku gdyż bez dodatkowego kodu PHP nie zostaną one wykorzystane.</li>\r\n	<li><strong>widgets.json</strong> - plik zawierający listę wszystkich pozycji widżetów. Podobnie jak w wypadku pliku <strong>menus.json</strong>, należy pamietać, że poza dodaniem nowej pozycji widżetów, trzeba też dodać kod PHP generujący ją w szablonie.</li>\r\n	<li><strong>widgets.styles.json</strong> - plik stosowany do tworzenia nowych styli widżetów. Dzięki swojej implementacji pozwala przypisać dany styl tylko do danego typu widżetów lub też wykluczyć z danego stylu wybrane rodzaje widżetów.</li>\r\n</ul>\r\nBy lepiej zrozumieć format plików JSON polecamy lekturę oficjalne strony <a href=\"http://www.json.org/\">tego formatu</a>.\r\n\r\n&nbsp;','JSON Configuration','','inherit','open','open','','338-revision-3','','','2012-07-09 09:41:00','2012-07-09 09:41:00','',338,'{$page_url}/uncategorized/338-revision-3/',0,'revision','',0),(675,1,'2012-08-10 11:56:15','2012-08-10 11:56:15','In order to make GavernWP framework more flexible, we decided to use files in JSON format for storing template\'s configuration and options layout in an administration panel.\r\n\r\nYou may find files responsible for template\'s configuration in <strong>gavern/options/</strong> catalog:<strong></strong>\r\n<ul>\r\n	<li><strong>fonts.json</strong> - a file which stores template\'s groups of fonts. By default, there are three main gropus created. In order to create a new group, it is enough to add a next object to the object table existing in this file.plik przechowujący grupy czcionek szablonu.</li>\r\n	<li><strong>menus.json</strong> - you will find space for menu used in a template in this file. You have to remember that except adding a new object, you have to add PHP code generating menu data in template\'s code. It is also worth remembering that there could be one main menu (<strong>main</strong> field in menu object).<strong></strong></li>\r\n	<li><strong>opengraph.json</strong> - this file includes configuration of fields used in a block connected with metabox which is used for generating Open Graph data. We do not recommend to make any changes in it before you get acquainted with Open Graph tags implementation in GavernWP framework.</li>\r\n	<li><strong>styles.json</strong> - this file is used for generating additional template\'s styles. Except adding a new style, you have to remember about creating an additional CSS file which will be loaded while changing template\'s style.</li>\r\n	<li><strong>template.json</strong> - it is the most important configuration file. It includes information about a template and it allows to switch off chosen elements of template administration panel. It is NOT recommended to add new fields to this files because they will not be used without additional PHP code.</li>\r\n	<li><strong>widgets.json</strong> - a file including a list of all positions of widgets. Similarly to <strong>menus.json</strong> file, you have to remember that except adding a new widget position, you have to also add PHP code which generates it in a template.</li>\r\n	<li><strong>widgets.styles.json</strong> - a file used for creating new widget styles. Thanks to its implementation, it allows to assign a style given to one widget type only or exclude some widget types from a style given.</li>\r\n</ul>\r\nIn order to understand better JSON files format, we recommend to visit the official website of  <a href=\"http://www.json.org/\">this format</a>.\r\n\r\n&nbsp;','JSON Configuration','','inherit','open','open','','338-revision-6','','','2012-08-10 11:56:15','2012-08-10 11:56:15','',338,'{$page_url}/uncategorized/338-revision-6/',0,'revision','',0),(439,1,'2012-08-12 17:28:48','2012-08-12 17:28:48','GavernWP has built - in support for <a title=\"Open Graph\" href=\"http://opengraphprotocol.org/\" target=\"_blank\">Open Graph</a> protocol. Thanks to it, each post added may have metatags specified and during publishing a post given on Facebook, there will be information specified earlier by an author of an entry displayed:\n<ul>\n	<li>title</li>\n	<li>entry description</li>\n	<li>thumbnail connected with an entry</li>\n</ul>\nThanks to it, an author of a post has better influence on the information displayed on social media services. It\'s also worth remembering that in the case when fields connected with Open Graph will not be filled, then GavernWP will try to fill them automatically basing on the entry data.\n\nSupport for Open Graph is a great supplement for a Social API system implemented in GavernWP.','Open Graph support','','inherit','open','open','','341-autosave','','','2012-08-12 17:28:48','2012-08-12 17:28:48','',341,'{$page_url}/uncategorized/341-autosave/',0,'revision','',0),(676,1,'2012-08-11 07:41:18','2012-08-11 07:41:18','GavernWP has an extensive mechanism allowing to create additional template styles. We may distinguish two main groups of styles in this mechanism:\r\n<ul>\r\n	<li>style family</li>\r\n	<li>styles included in style family given</li>\r\n</ul>\r\nThe whole configuration is included in <strong>styles.json</strong> file:\r\n\r\n[code][{\r\n\r\n\"family\": \"color\",\r\n\"family_desc\": \"Template color\",\r\n\"family_tooltip\": \"You can select one of the template colors\",\r\n\"styles\": [\r\n{\r\n\"name\": \"Color I\",\r\n\"value\": \"color1\",\r\n\"file\": \"style1.css\"\r\n},\r\n{\r\n\"name\": \"Color II\",\r\n\"value\": \"color2\",\r\n\"file\": \"style2.css\"\r\n}\r\n]\r\n}][/code]\r\n\r\nAs you can see, it includes <strong>color</strong> style family which has two styles, namely: <strong>Color I</strong> and <strong>Color II</strong>.\r\n\r\nIn order to create new style family or a style for style family given, it is enough to create a next object in <strong>styles.json</strong> file and then create CSS files connected with a family given - in the case of <strong>color</strong> family, these are <strong>style1.css</strong> and <strong>style2.css</strong> files.\r\n\r\nGavernWP will load CSS files of a style given in a <strong>head</strong> section - chosen in an administration panel or, if there is a tool for choosing user\'s styles switched on, they will be loaded based on a Cookie file storing data about a style used by a user.\r\n\r\nYou have to remember that for each style family there is at least one CSS file loaded. Therefore, creating coexisting style families like:\r\n<ul>\r\n	<li><strong>dark styles</strong> and <strong>light styles</strong></li>\r\n	<li><strong>blue styles</strong> and <strong>green styles</strong></li>\r\n</ul>\r\nis incorrect because at least one CSS style from each family will be loaded immediately. So the correct one is creating style families responsible for some elements of website styling, e.g. a separate family responsible for website coloring (<strong>colors</strong>) and a separate one for website background (<strong>patterns</strong>).\r\n\r\nGenerally, you have to care about particular style families in order not to overwrite one another.','Color Styles','','inherit','open','open','','349-revision-4','','','2012-08-11 07:41:18','2012-08-11 07:41:18','',349,'{$page_url}/uncategorized/349-revision-4/',0,'revision','',0),(440,1,'2012-08-12 18:03:08','2012-08-12 18:03:08','GavernWP has an extensive mechanism allowing to create additional theme styles. We may distinguish two main groups of styles in this mechanism:\n<ul>\n	<li>style family</li>\n	<li>styles included in style family given</li>\n</ul>\nThe whole configuration is included in <strong>styles.json</strong> file:\n\n[code][{\n\n\"family\": \"color\",\n\"family_desc\": \"Theme color\",\n\"family_tooltip\": \"You can select one of the theme colors\",\n\"styles\": [\n{\n\"name\": \"Color I\",\n\"value\": \"color1\",\n\"file\": \"style1.css\"\n},\n{\n\"name\": \"Color II\",\n\"value\": \"color2\",\n\"file\": \"style2.css\"\n}\n]\n}][/code]\n\nAs you can see, it includes <strong>color</strong> style family which has two styles, namely: <strong>Color I</strong> and <strong>Color II</strong>.\n\nIn order to create new style family or a style for style family given, it is enough to create a next object in <strong>styles.json</strong> file and then create CSS files connected with a family given - in the case of <strong>color</strong> family, these are <strong>style1.css</strong> and <strong>style2.css</strong> files.\n\nGavernWP will load CSS files of a style given in a <strong>head</strong> section - chosen in an administration panel or, if there is a tool for choosing user\'s styles switched on, they will be loaded based on a Cookie file storing data about a style used by a user.\n\nYou have to remember that for each style family there is at least one CSS file loaded. Therefore, creating coexisting style families like:\n<ul>\n	<li><strong>dark styles</strong> and <strong>light styles</strong></li>\n	<li><strong>blue styles</strong> and <strong>green styles</strong></li>\n</ul>\nis incorrect because at least one CSS style from each family will be loaded immediately. So the correct one is creating style families responsible for some elements of website styling, e.g. a separate family responsible for website coloring (<strong>colors</strong>) and a separate one for website background (<strong>patterns</strong>).\n\nGenerally, you have to care about particular style families in order not to overwrite one another.','Color Styles','','inherit','open','open','','349-autosave','','','2012-08-12 18:03:08','2012-08-12 18:03:08','',349,'{$page_url}/uncategorized/349-autosave/',0,'revision','',0),(441,1,'2012-08-12 17:28:45','2012-08-12 17:28:45','GavernWP makes possible to create templates based on Responsive Web Design. That\'s why, it has two additional CSS styles:\n<ul>\n	<li>tablet.css</li>\n	<li>mobile.css</li>\n</ul>\nThanks to options available in an administration panel, it is possible to specify when these styles will be loaded.\n\nTwo column layout (if a column is switched on) is loaded when tablet.css file is not loaded.\n\nAt the moment of reaching maximum width for tablet.css file, page\'s layout is changed into one column and the column itself is placed before or after page\'s main content.\n\nAdditionally, in widget positions like top or bottom1/2/3, modules from three column layout are changed into one column  layout.\n\nAfter loading mobile.css file there is one column layout used everywhere.\n\nA very important improvement is a possibility of specifying whether a module will be loaded in tablet or mobile mode. More information can be found in Widget Rules entry.','Responsive Layout','','inherit','open','open','','351-autosave','','','2012-08-12 17:28:45','2012-08-12 17:28:45','',351,'{$page_url}/uncategorized/351-autosave/',0,'revision','',0),(442,1,'2012-08-12 17:28:37','2012-08-12 17:28:37','Each template\'s subpage in GavernWP is created and based on one file from template\'s main catalog, e.g. <strong>single.php</strong> and at least four additional files from <strong>layouts</strong> catalog:\n<ul>\n	<li><strong>header.php</strong> - this file includes starting page\'s structure i.e. a head section and the whole headline with elements such as: logo, main menu, etc.</li>\n	<li><strong>before.php</strong> - there are all widget positions included in this file which are before page\'s main content.</li>\n	<li><strong>after.php</strong> - this file is an equivalent of <strong>before.php</strong> file but with one difference - it includes widget positions which are after page\'s main content.</li>\n	<li><strong>footer.php</strong> - similarly to <strong>header.php</strong> file, it includes a starting page\'s structure as footer.php includes the ending page\'s structure, i.e. a footer and and elements below.</li>\n</ul>\nThe above files with a file given from a main catalog, create a basic structure of each page. The remaining elements are generated by additional files or functions. The majority of of such files can be found in <strong>layouts</strong> catalog; e.g. files with names content.post.*.php, include constituents of each post. . Using these files allowed to restrict the amount of code in template\'s main files and simplify its modification as change e.g. an entry footer requires modification of one or two files only.\n\nFunctions used for generating additional information displayed in posts are in <strong>gavern/helpers/helpers.layout.fragments.php</strong> file.','Template structure','','inherit','open','open','','359-autosave','','','2012-08-12 17:28:37','2012-08-12 17:28:37','',359,'{$page_url}/uncategorized/359-autosave/',0,'revision','',0),(462,1,'2012-07-20 08:46:20','2012-07-20 08:46:20','Each template\'s subpage in GavernWP is created and based on one file from template\'s main catalog, e.g. <strong>single.php</strong> and at least four additional files from <strong>layouts</strong> catalog:\r\n<ul>\r\n	<li><strong>header.php</strong> - this file includes starting page\'s structure i.e. a head sectionplik ten zawiera początkową strukturę strony tj. sekcję head oraz cały nagłówek strony z elementami takimi jak logo, menu główne itd.</li>\r\n	<li><strong>before.php</strong> - w pliku tym zawarte są wszystkie pozycje widżetów, które znajdują się przed główną treścią strony.</li>\r\n	<li><strong>after.php</strong> - plik ten jest odpowiednikiem pliku <strong>before.php</strong>, z tą różnicą, że zawiera pozycje widżetów, które znajdują się po głównej treści strony.</li>\r\n	<li><strong>footer.php</strong> - tak jak plik <strong>header.php</strong> zawiera początkową strukturę strony tak <strong>footer.php</strong> zawiera końcową strukturę strony tj. stopkę i elementy znajdujące się pod nią.</li>\r\n</ul>\r\nPowyższe pliki wraz z danym plikiem z katalogu głównego, tworzą podstawową strukturę każdej strony. Pozostałe elementy są generowane przez dodatkowe pliki lub funkcje. Większość takich plików można znaleźć w katalogu <strong>layouts</strong> - dla przykładu pliki o nazwach <strong>content.post.*.php</strong> zawierają składowe elementy każdego posta. Zastosowanie takich plików pozwoliło na znaczne ograniczenie ilości kodu w głównych plikach szablonu oraz ułatwia jego modyfikację gdyż zmiana np. stopki wpisu wymaga modyfikacji jednego lub dwóch a nie kilkunastu plików.\r\n\r\nFunkcje używane do generowania dodatkowych informacji wyświetlanych w postach, znajdują się w pliku <strong>gavern/helpers/helpers.layout.fragments.php</strong>.','Template structure','','inherit','open','open','','359-revision-3','','','2012-07-20 08:46:20','2012-07-20 08:46:20','',359,'{$page_url}/uncategorized/359-revision-3/',0,'revision','',0),(443,1,'2012-08-12 17:54:30','2012-08-12 17:54:30','Widget rules is a mechanism which introduces a completely new way to manage widgets on a website. Thanks to it, it is possible to specify widget features such as:\n<ul>\n	<li>displaying on subpages chosen,</li>\n	<li>displaying on devices chosen,</li>\n	<li>displaying for a group of users chosen,</li>\n	<li>displaying with a widget style use chosen.</li>\n</ul>\nAfter switching on widget rules in theme\'s advanced settings, under each widget, the following options should be displayed:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\n\nThe most extensive options are those connected with a widget visibility on subpages chosen - after choosing an option to show a widget on pages chosen (or an option not showing a widget on pages chosen), such a panel will appear:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\n\nThen, you have to choose a page\'s type to add, e.g. Category, and then give category ID:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\n\nAfter clicking \"Add page\" button, a page will appear on a list of pages chosen on which in our case a widget will be displayed:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\n\nOf course, it is possible to add more pages:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\n\nTo make it clearer, , each page\'s type is displayed with a different color. A page added can be removed by clicking a removing icon placed on the right side of each page.\n\nIn this way, you may set a widget so as to be shown on pages chosen or to be shown on all pages except the chosen ones.\n\nGenerally, widgets are shown on all pages.\n\nAn option of displaying a widget on devices chosen has five options to choose:\n<ul>\n	<li><strong>All devices</strong> - a widget will be displayed everytwhere - on every device</li>\n	<li><strong>Desktop</strong> - a widget will be displayed only when neither a <strong>tablet.css</strong> file nor a <strong>mobile.css</strong> is loaded <strong></strong></li>\n	<li><strong>Tablets</strong> - a widget displays only when a <strong>tablet.css</strong> file will be loaded and, at the same time, a <strong>mobile.css</strong> file will not be loaded <strong></strong></li>\n	<li><strong>Smartphones</strong> - a widget will be displayed only when a <strong>mobile.css</strong> file will be loaded</li>\n	<li><strong>Tablets/Smartphones</strong> - a widget will be displayed when at least one file will be loaded: <strong>tablet.css</strong> or <strong>mobile.css</strong>.</li>\n</ul>\nThanks to these settings, it is possible to limit significantly the amount of content displayed on devices with small screens.\n\nAn option of displaying widget for a chosen groups of users has four options to choose:\n<ul>\n	<li><strong>All users</strong> - a widget will be displayed to all users</li>\n	<li><strong>Only guests</strong> - a widget will be displayed to not logged in users</li>\n	<li><strong>Only registered users</strong> - a widget will be displayed to logged in users only</li>\n	<li><strong>Only administrator</strong> - a widget will be displayed to administrators only</li>\n</ul>\nThanks to this option, it is possible e.g. to display messages specified by using widgets for a group of users chosen.\n\nThe last optio from widget rules is an option for choosing a widget style - it causes appending to a widget main container an additional class giving styling specified by a user.\n\nWidget styles are defined in widget.styles.json file and in CSS code - in this case in <strong>css/wp.extensions.css</strong>.<strong></strong>','Widget rules','','inherit','open','open','','370-autosave','','','2012-08-12 17:54:30','2012-08-12 17:54:30','',370,'{$page_url}/uncategorized/370-autosave/',0,'revision','',0),(473,1,'2012-07-23 09:56:53','2012-07-23 09:56:53','Widget rules is a mechanism which introduces a completely new way to manage widgets on a website. Thanks to it, it is possible to specify widget features such as:\r\n<ul>\r\n	<li>displaying on subpages chosen,</li>\r\n	<li>displaying on devices chosen,</li>\r\n	<li>displaying for a group of users chosen,</li>\r\n	<li>displaying with a widget style use chosen.</li>\r\n</ul>\r\nAfter switching on widget rules in template\'s advanced settings, under each widget, the following options should be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\r\n\r\nThe most extensive options are those connected with a widget visibility on subpages chosen - after choosing an option to show a widget on pages chosen (or an option not showing a widget on pages chosen), such a panel will appear:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\r\n\r\nThen, you have to choose a page\'s type to add, e.g. Category, and then give category ID:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\r\n\r\nAfter clicking \"Add page\" button, a page will appear on a list of pages chosen on which in our case a widget will be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\r\n\r\nOf course, it is possible to add more pages:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\r\n\r\nDla zwiększenia czytelności każdy rodzaj strony wyświetlany jest w innym kolorze. Dodaną już stronę można usunąć klikając ikonę usuwania umieszczoną po prawej stronie każdej ze stron.\r\n\r\nW ten sposób można ustawić widżet tak by pojawiał się na wybranych stronach lub żeby pojawiał się on na wszystkich strona poza tymi wybranymi.\r\n\r\nStandardowo widżety pokazywane są na wszystkich podstronach.\r\n\r\nOpcja wyświetlania widżetu na wybranych urządeniach posiada pięć opcji do wyboru:\r\n<ul>\r\n	<li><strong>All devices</strong> - widżet będzie wyświetlany wszędzie - na każdym urządzeniu</li>\r\n	<li><strong>Desktop</strong> - widżet będzie wyświetlany tylko wtedy gdy nie jest wczytany ani plik <strong>tablet.css</strong> ani plik <strong>mobile.css</strong></li>\r\n	<li><strong>Tablets</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>tablet.css</strong> i jednocześnie nie będzie wczytany plik <strong>mobile.css</strong></li>\r\n	<li><strong>Smartphones</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>mobile.css</strong>.</li>\r\n	<li><strong>Tablets/Smartphones</strong> - widżet wyświetli się gdy wczytany będzie co najmniej jeden z plików <strong>tablet.css</strong> lub <strong>mobile.css</strong>.</li>\r\n</ul>\r\nDzięki tym ustawieniom można znacząco ograniczyć ilość treści wyświetlanych na urządzeniach o małych ekranach.\r\n\r\nOpcja wyświetlania widżetu dla wybranych grup użytkowników posiada cztery opcje do wyboru:\r\n<ul>\r\n	<li><strong>All users</strong> - widżet pojawi się wszystkim użytkownikom</li>\r\n	<li><strong>Only guests</strong> - widżet pojawi się tylko niezalogowanym użytkownikom</li>\r\n	<li><strong>Only registered users</strong> - widżet pojawi się tylko zalogowanym użytkownikom</li>\r\n	<li><strong>Only administrator</strong> - widżet pojawi się tylko administratorom</li>\r\n</ul>\r\nDzięki tej opcji można np. wyświetlać określone wiadomości poprzeż użycie widżetów przeznaczone dla wybranej grupy użytkowników.\r\n\r\nOstatnią opcję składającą się na widget rules stanowi opcja wyboru stylu widżetu - powoduje ona dopisanie do głównego kontenera widżetu dodatkowej klasy nadającej określone przez użytkownika stylowanie.\r\n\r\nStyle widżetów zdefiniowane są w pliku widget.styles.json oraz w kodzie CSS - w tym wypadku w <strong>css/wp.extensions.css</strong>.','Widget rules','','inherit','open','open','','370-revision-5','','','2012-07-23 09:56:53','2012-07-23 09:56:53','',370,'{$page_url}/uncategorized/370-revision-5/',0,'revision','',0),(444,1,'2012-08-12 18:07:28','2012-08-12 18:07:28','GavernWP makes accessible options allowing for theme\'s branding. Branding options are divided into two groups:\n<ul>\n	<li>theme\'s branding</li>\n	<li>administration panel branding</li>\n</ul>\nThanks to theme\'s branding options, a user may specify:\n<ul>\n	<li>specify page\'s logo</li>\n	<li>specify theme\'s footer content</li>\n	<li>decide about displaying a framework logo under page\'s footer</li>\n</ul>\nMore information about branding options for a templat can be found in an entry devoted to a \"Template branding\" tab in an administration panel.\n\nAdministration panel branding options allow to define:\n<ul>\n	<li>a logo displayed next to a template\'s name in an administration panel sidebar</li>\n	<li>a logo visible over a log in form to an administration panel</li>\n</ul>\nMore about branding options for an administration panel can be found in an entry devoted to \"Back-end branding\"  in an administration panel.','Branding','','inherit','open','open','','377-autosave','','','2012-08-12 18:07:28','2012-08-12 18:07:28','',377,'{$page_url}/uncategorized/377-autosave/',0,'revision','',0),(445,1,'2012-08-12 18:11:21','2012-08-12 18:11:21','GavernWP has an update section which allows to access information whether a template was updated to the latest version. In order to access an updates panel, you have to use \"Updates\" submenu from a main menu of template\'s options:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-6.jpg\"><img class=\"aligncenter size-full wp-image-685\" title=\"Updates\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-6.jpg\" alt=\"\" width=\"202\" height=\"171\" /></a>\n\nIf a theme was not updated, a list of updates will appear; which are newer than your theme version.\n\nHowever, when you have a theme in the latest version, you will see an appropriate message that a theme does not have any new updates to download.\n\nIt\'s worth remembering that a free theme - MeetGavernWP is available through a public repository in a github service which allows to easy analysis of changes implemented in particular files. In the case of commercial themes, it is recommended to use tools like WinMerge (Windows) or File Merge (MacOS X) to compare changes in files. Each update in our update system has information about the list of modified files. Generally, it is recommended to compare only these files which you modified manually after loading a theme.','Updates','','inherit','open','open','','382-autosave','','','2012-08-12 18:11:21','2012-08-12 18:11:21','',382,'{$page_url}/uncategorized/382-autosave/',0,'revision','',0),(446,1,'2012-08-12 18:37:21','2012-08-12 18:37:21','Sometimes, there is a situation when you have to copy a configuration from one installation to another one. In order to simplify it, GavernWP has been equipped with import and export options of theme\'s settings in \"Import/Export\" tab of a theme\'s main menu:\n\n[screenshot]\n\nAfter entering a page of these settings, you will see the following form:\n\n[screenshot]\n\nIn order to export settings, it is enough to copy a text from an \"Export\" field and copy it to an \"Import\" field in a different theme.\n\n<strong>Note!</strong> While exporting settings, you have to remember that it is possible to copy settings between the same themes.\nTheme\'s settings are available in JSON format, so it is possible to save these settings to a file and then modify them manually before loading to a different theme.\n\nTip: we recommend to make a dump of theme\'s settings, thanks to it, you will be secured against not desired effects of greater changes in a theme\'s configuration. Such settings dumps should be saved in a file which has in its name the date of making a dump, e.g.  <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','inherit','open','open','','384-autosave','','','2012-08-12 18:37:21','2012-08-12 18:37:21','',384,'{$page_url}/uncategorized/384-autosave/',0,'revision','',0),(447,1,'2012-08-12 18:31:13','2012-08-12 18:31:13','To simplify shortcodes use available in themes based on GavernWP framework, a button for theme\'s typography has been implemented which is available in a posts editor:\n\n&nbsp;\n\nBy clicking this button, you will see a list of available typography elements:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\n\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content by scripts to structure styled in a way given.\n\nPlease, note that adding a new Shortcode code requires three operations:\n<ul>\n	<li>adding an entry in shortcodes.js configuration file</li>\n	<li>adding PHP code supporting a shortcode given</li>\n	<li>adding optional CSS and JavaScript code (if a shortcode given requires it)</li>\n</ul>\n<strong>shortcodes.js</strong> file in <strong>config</strong> catalog includes entries which are replaced to menu structure visible after clicking a typography button - it includes <strong>$GAVERNWP_SHORTCODES</strong> variable which is a table including objects representing elements of a menu. Each object has three features: <strong>title</strong>, <strong>code</strong> and <strong>submenu</strong>. Let\'s analyze this structure with a <strong>Highlight</strong> position:\n\n[code]{\n\n\"title\": \"Highlight\",\n\"code\": \"[highlight]Your text[/highlight]\",\n\"submenu\": [\n{\n\"title\": \"Style I\",\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\n},\n{\n\"title\": \"Style II\",\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\n},\n{\n\"title\": \"Style III\",\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\n}\n]\n},[/code]\n<ul>\n	<li><strong>title</strong> - it includes a menu positon name displayed by a script</li>\n	<li><strong>code</strong> - it is a shortcode code which will be added to an entry when clicking a menu position given - you have to remember that not all menu positions on the first level have a value in this field - if it was an empty sequence of symbols, it means for a script that clicking on a menu position given does not request any action.</li>\n	<li><strong>submenu</strong> - it is a table  of a submenu of a menu position given. Each submenu position is built the same as menu positions as these on the first level but with one difference - a submenu cannot have the next submenu, so you do not add a <strong>submenu</strong> feature in a submenu object.</li>\n</ul>\nLet\'s say, we added our shortcode to a typography button using shortcodes.js file. So, there is one thing left to do - support our shortcode from a theme side.\n\nTo do this, you have to open <strong>gavern/helpers/helpers.shortcodes.php</strong> file.\n\nThis file is divided into three main sections starting with lines similar to:\n\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\n\nIt is a conditional  IF instruction connected with a group of typography elements given. Gavern icludes three groups:\n<ul>\n	<li>typography elements - functions connected with it have <strong>gavern_ts_</strong> prefix in the title</li>\n	<li>interactive elements - functions connected with it have <strong>gavern_ies_</strong> prefix in the title</li>\n	<li>elements characteristic for a particular theme - functions connected with it have <strong>gavern_tss_</strong> prefix in the title</li>\n</ul>\nWe recommend to add new typography elements in the last group - in Meet GavernWP theme, it is empty by default. Please, remember about using an appropriate prefix in a function name for a group given, e.g. in the case of the third group, it will be <strong>gavern_tss_</strong>. The code itself of a shortcode given has to be created according to guidelines described in<a href=\"http://codex.wordpress.org/Shortcode_API\"> Shortcode API</a>.\n\nThe last step is rather optional and depends on your Shortcode type. If your Shortcode requires additional CSS or JavaScript code, you have to define it in <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong> files, where <strong>*</strong> is a group name to which a Shortcode given was assigned.\n\nIt is very important to place elements of CSS and JavaScript code in an appropriate file, as it will give a possibility of optimizing whole theme code when switching off given group of Shortcodes codes.','Typography button','','inherit','open','open','','386-autosave','','','2012-08-12 18:31:13','2012-08-12 18:31:13','',386,'{$page_url}/uncategorized/386-autosave/',0,'revision','',0),(705,1,'2012-08-12 18:32:07','2012-08-12 18:32:07','','button typo','','inherit','open','open','','edit-post-meet-gavern-wp-wordpress-4','','','2012-08-12 18:32:07','2012-08-12 18:32:07','',386,'{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-4.jpg',0,'attachment','image/jpeg',0),(706,1,'2012-08-12 18:32:21','2012-08-12 18:32:21','','typo button popup','','inherit','open','open','','edit-post-meet-gavern-wp-wordpress-5','','','2012-08-12 18:32:21','2012-08-12 18:32:21','',386,'{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-5.jpg',0,'attachment','image/jpeg',0),(448,1,'2012-08-12 18:40:15','2012-08-12 18:40:15','In order to adjust stylistics of an administration panel to a GavernWP page, there are some options allowing to adjust the look of administration panel elements to a theme of a page given.\n\nYou will find the following options in a back-end branding tab:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-19.jpg\"><img class=\"aligncenter size-full wp-image-715\" title=\"Back-end branding\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-19.jpg\" alt=\"\" width=\"711\" height=\"335\" /></a>\n\nThe first two options are connected with a logotype displayed on a log in page. You have to choose an image which will be used as a logo and then insert the size of the image chosen. In this way, you may achieve, e.g. the following log in panel:\n\n&nbsp;\n\nThe remaining two options are connected with template\'s login displayed in a main menu of an administration panel:\n\n[screenshot]\n\nWe recommend to use an image in 16x16 size - bigger or smaller images may cause problems with menu layout.\n\n&nbsp;','Back-end branding settings','','inherit','open','open','','392-autosave','','','2012-08-12 18:40:15','2012-08-12 18:40:15','',392,'{$page_url}/uncategorized/392-autosave/',0,'revision','',0),(449,1,'2012-08-12 18:09:22','2012-08-12 18:09:22','GavernWP has basic support for a new option available in Wordpress 3.4 - an options editor with themes preview. Now, the most important options connected with theme\'s style and its layout has been implemented to a live editor.\n\nIn order to reach it easier, we placed a direct link to this editor in the top part of themes\' options:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-5.jpg\"><img class=\"aligncenter size-full wp-image-683\" title=\"Live Editor\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-5.jpg\" alt=\"\" width=\"217\" height=\"206\" /></a>\n\nAll options included in this editor are also available via traditional theme\'s options panel.\n\nIn order to simplify adding your own options to a live editor, the whole code generating options is placed in a separate file: <strong>gavern/helpers/helpers.customizer.php</strong>.\n\nYou have to remember that all options and settings from a live editor are stored in the same place as their equivalents from an administration panel so settings change with a live editor causes changes in an options panel. That\'s why, it is recommended not to use a traditional administration panel and a live editor at the same time because saving options with various values in two different places at the same time may not give the expected result.','Theme live editor','','inherit','open','open','','380-autosave','','','2012-08-12 18:09:22','2012-08-12 18:09:22','',380,'{$page_url}/uncategorized/380-autosave/',0,'revision','',0),(450,1,'2012-10-28 10:04:52','2012-10-28 10:04:52','Themes based on GavernWP framework have support for many useful solutions and technologies. The most important ones are:\n<ul>\n	<li><a title=\"Custom Page Styles\" href=\"{$page_url}/template-features/custom-page-styles-2/\">Custom page styles</a> - they extend functionality of standard subpages.</li>\n	<li><a title=\"Typography\" href=\"{$page_url}/template-features/typography/\">Typography</a> - an advanced list of elements gives a possibility to enhance posts about various add ons.</li>\n	<li><a title=\"Social API\" href=\"{$page_url}/template-features/social-api/\">Social API</a> - it allows to add buttons for sharing posts in social network services very easily.</li>\n	<li><a title=\"Open Graph support\" href=\"{$page_url}/template-features/open-graph-support/\">Open Graph</a> - it allows to specify the way in which content shared on Facebook will be visible.</li>\n	<li><a title=\"Threaded comments\" href=\"{$page_url}/template-features/threaded-comments-2/\">Threaded comments</a> - they allow to make discussions under posts in a clear way.</li>\n	<li><a title=\"Branding\" href=\"{$page_url}/template-features/branding/\">Branding</a> - it simplifies setting key elements of a website connected with its name or brand.</li>\n	<li><a title=\"Color Styles\" href=\"{$page_url}/uncategorized/color-styles/\">Color styles</a> - thanks to color styles, it is possible to create many various color and stylistic versions of a theme.</li>\n</ul>\n&nbsp;','Main front-end features','','inherit','open','open','','408-autosave','','','2012-10-28 10:04:52','2012-10-28 10:04:52','',408,'{$page_url}/uncategorized/408-autosave/',0,'revision','',0),(451,1,'2012-08-12 18:19:19','2012-08-12 18:19:19','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-659\" title=\"Advanced settings\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"595\" height=\"571\" /></a>\n<ul>\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\n	<li><strong>Support for Google Chrome Frame</strong> - it switches on a metatag forcing use of  <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> plugin on Internet Explorer browsers if it is installed.</li>\n	<li><strong>Parse emoticons in the text widgets</strong> - it activates parsing emoticons to a graphic form in widgets.</li>\n	<li><strong>Parse shortcodes in the text widgets</strong> - it activates parsing of <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> in widgets.</li>\n	<li><strong>Use Thickbox</strong> - it allows to switch on Thickbox  script for presenting images included in posts.</li>\n	<li><strong>Value for the $content_width variable</strong> -  <strong>$content_width</strong> variable is used while creating thumbnails of images for posts, that\'s why it has to be defined as an appropriate value - we recommend to set the value not bigger than the max. page\'s width.</li>\n	<li><strong>Use the override.css file</strong> - thanks to switching on this option, an <strong>override.css</strong> file will appear at the end of the list of CSS files which allows to overwrite theme\'s CSS rules easily without interference in existing CSS code.</li>\n	<li><strong>Enable support for Open Search</strong> - it allows to switch on support for  <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> technology.</li>\n	<li><strong>Enable support for Open Graph</strong> - it allows to switch on support for <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph </a> technology - after switching on this option, an additional metabox will appear on a page for editing posts: <a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-692\" title=\"OpenGraph metabox\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"810\" height=\"554\" /></a></li>\n</ul>','Advanced settings','','inherit','open','open','','422-autosave','','','2012-08-12 18:19:19','2012-08-12 18:19:19','',422,'{$page_url}/uncategorized/422-autosave/',0,'revision','',0),(452,1,'2012-08-12 18:16:58','2012-08-12 18:16:58','GavernWP has SEO settings built - in which allow to overwrite Wordpress standard SEO settings. After switching on \"Use Gavern SEO settings\" option, a lot of options connected with SEO will appear:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-7.jpg\"><img class=\"aligncenter size-full wp-image-688\" title=\"SEO settings\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-7.jpg\" alt=\"\" width=\"575\" height=\"617\" /></a>\n\nThe first group of options is connected with page\'s title:\n<ul>\n	<li><strong>Use blogname in title</strong> - this option allows to switch on showing a blogname in the title</li>\n	<li><strong>Separator used in title</strong> - it specifies a separator which is between a title description and a pages\'s name</li>\n	<li><strong>Title - description</strong> - it allows to specify page\'s title description (the first part of a title - before a separator)</li>\n	<li><strong>Title - blogname</strong> - it allows to specify page\'s name (the second part of a title after a separator)</li>\n</ul>\nThe remaining options allow to switch on advanced management of <strong>keywords</strong> and <strong>description</strong> metatags:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-8.jpg\"><img class=\"aligncenter size-full wp-image-689\" title=\"Metatags\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-8.jpg\" alt=\"\" width=\"579\" height=\"234\" /></a>\n\nIn the case of a homepage, these metatags values are specified in a SEO settings panel whereas in the case of subpages, there are two settings available for both metatags:\n<ul>\n	<li><strong>Disabled</strong></li>\n	<li><strong>Enabled (custom field in the post editor)</strong></li>\n</ul>\nWhen you switch on these settings, under a posts editor two additional fields will appear:\n\n&nbsp;\n\nIf you fill them in, metatags used on one subpage with an entry will be created.','SEO settings','','inherit','open','open','','413-autosave','','','2012-08-12 18:16:58','2012-08-12 18:16:58','',413,'{$page_url}/uncategorized/413-autosave/',0,'revision','',0),(453,1,'2012-07-17 12:25:24','2012-07-17 12:25:24','In order to make GavernWP framework more flexible, we decided to use files in JSON format for storing template\'s configuration and options layout in an administration panel.\r\n\r\nYou may find files responsible for template\'s configuration in <strong>gavern/options/</strong> catalog:<strong></strong>\r\n<ul>\r\n	<li><strong>fonts.json</strong> - a file which stores template\'s groups of fonts. By default, there are three main gropus created. In order to create a new group, it is enough to add a next object to the object table existing in this file.plik przechowujący grupy czcionek szablonu.</li>\r\n	<li><strong>menus.json</strong> - you will find space for menu used in a template in this file. You have to remember that except adding a new object, you have to add PHP code generating menu data in template\'s code. It is also worth remembering that there could be one main menu (<strong>main</strong> field in menu object).<strong></strong></li>\r\n	<li><strong>opengraph.json</strong> - plik ten zawiera konfigurację pól używanych w bloku związanym z metabox-em używanym do generowania danych Open Graph. Nie zalecamy dokonywania w nim żadnych zmian bez poznania dokładnej implementacji tagów Open Graph we frameworku GavernWP.</li>\r\n	<li><strong>styles.json</strong> - plik ten jest wykorzystywany do generowania dodatkowych styli szablonu. Poza dodaniem nowego stylu, należy też pamietać o stworzeniu dodatkowego pliku CSS, który będzie ładowany przy zmianie stylu szablonu.</li>\r\n	<li><strong>template.json</strong> - najważniejszy plik konfiguracyjny. Zawiera on informacje o szablonie oraz pozwala wyłączyć wybrane elementy panelu administracyjnego szablonu. Nie jest zalecane dodawanie nowych pól do tego pliku gdyż bez dodatkowego kodu PHP nie zostaną one wykorzystane.</li>\r\n	<li><strong>widgets.json</strong> - plik zawierający listę wszystkich pozycji widżetów. Podobnie jak w wypadku pliku <strong>menus.json</strong>, należy pamietać, że poza dodaniem nowej pozycji widżetów, trzeba też dodać kod PHP generujący ją w szablonie.</li>\r\n	<li><strong>widgets.styles.json</strong> - plik stosowany do tworzenia nowych styli widżetów. Dzięki swojej implementacji pozwala przypisać dany styl tylko do danego typu widżetów lub też wykluczyć z danego stylu wybrane rodzaje widżetów.</li>\r\n</ul>\r\nBy lepiej zrozumieć format plików JSON polecamy lekturę oficjalne strony <a href=\"http://www.json.org/\">tego formatu</a>.\r\n\r\n&nbsp;','JSON Configuration','','inherit','open','open','','338-revision-4','','','2012-07-17 12:25:24','2012-07-17 12:25:24','',338,'{$page_url}/uncategorized/338-revision-4/',0,'revision','',0),(454,1,'2012-07-09 09:40:13','2012-07-09 09:40:13','GavernWP posiada wbudowane wsparcie dla protokołu <a title=\"Open Graph\" href=\"http://opengraphprotocol.org/\" target=\"_blank\">Open Graph</a>. Dzięki temu każdy dodawany post może posiadać określone metatagi, które sprawią, że podczas udostępniania danego posta na Facebooku pojawią się określone wcześniej przez autora wpisu informacje:\r\n<ul>\r\n	<li>tytuł</li>\r\n	<li>opis wpisu</li>\r\n	<li>miniaturka związana z wpisem</li>\r\n</ul>\r\nDzięki temu autor posta może lepiej wpływać na to co pojawia się w mediach społecznościowych. Dodatkowo warto pamiętać, że w wypadku gdy pola związane z Open Graph, nie zostaną wypełnione, wtedy GavernWP spróbuje wypełnić je automatycznie na bazie danych wpisu.\r\n\r\nWsparcie dla Open Graph jest świetnym uzupełnieniem dla zaimplementowanego w GavernWP systemu Social API.','Open Graph support','','inherit','open','open','','341-revision-2','','','2012-07-09 09:40:13','2012-07-09 09:40:13','',341,'{$page_url}/uncategorized/341-revision-2/',0,'revision','',0),(455,1,'2012-07-18 22:04:32','2012-07-18 22:04:32','GavernWP has built - in support for <a title=\"Open Graph\" href=\"http://opengraphprotocol.org/\" target=\"_blank\">Open Graph</a> protocol. Thanks to it, each post added may have metatags specified which Dzięki temu każdy dodawany post może posiadać określone metatagi, które sprawią, że podczas udostępniania danego posta na Facebooku pojawią się określone wcześniej przez autora wpisu informacje:\r\n<ul>\r\n	<li>tytuł</li>\r\n	<li>opis wpisu</li>\r\n	<li>miniaturka związana z wpisem</li>\r\n</ul>\r\nDzięki temu autor posta może lepiej wpływać na to co pojawia się w mediach społecznościowych. Dodatkowo warto pamiętać, że w wypadku gdy pola związane z Open Graph, nie zostaną wypełnione, wtedy GavernWP spróbuje wypełnić je automatycznie na bazie danych wpisu.\r\n\r\nWsparcie dla Open Graph jest świetnym uzupełnieniem dla zaimplementowanego w GavernWP systemu Social API.','Open Graph support','','inherit','open','open','','341-revision-3','','','2012-07-18 22:04:32','2012-07-18 22:04:32','',341,'{$page_url}/uncategorized/341-revision-3/',0,'revision','',0),(456,1,'2012-07-09 09:56:08','2012-07-09 09:56:08','GavernWP posiada rozbudowany mechanizm pozwalający na tworzenie dodatkowych styli szablonu. W mechaniźmie tym można rozróżnić dwie główne grupy styli:\r\n<ul>\r\n	<li>rodzina styli</li>\r\n	<li>style wchodzące w skład danej rodziny styli</li>\r\n</ul>\r\nCała konfiguracja zawarta jest w pliku<strong> styles.json</strong>:\r\n\r\n[code][{\r\n\r\n\"family\": \"color\",\r\n\"family_desc\": \"Template color\",\r\n\"family_tooltip\": \"You can select one of the template colors\",\r\n\"styles\": [\r\n{\r\n\"name\": \"Color I\",\r\n\"value\": \"color1\",\r\n\"file\": \"style1.css\"\r\n},\r\n{\r\n\"name\": \"Color II\",\r\n\"value\": \"color2\",\r\n\"file\": \"style2.css\"\r\n}\r\n]\r\n}][/code]\r\n\r\nJak widać zawiera on rodzinę styli <strong>color</strong>, która posiada dwa style: <strong>Color I</strong> i <strong>Color II</strong>.\r\n\r\nAby stworzyć nową rodzinę styli lub styl wchodzący w skład danej rodziny styli wystarczy stworzyć kolejny obiekt w pliku <strong>styles.json</strong> a następnie stworzyć pliki CSS powiązane z daną rodziną - w wypadku rodziny <strong>color</strong> są to pliki <strong>style1.css</strong> oraz <strong>style2.css</strong>.\r\n\r\nGavernWP sam wczyta w sekcji <strong>head</strong> pliki CSS danego stylu - wybrane w panelu administracyjnym lub jeżeli jest włączone narzędzie do wyboru styli użytkownika - zostaną one wczytane na bazie pliku Cookie przechowującego dane o wybranym stylu użytkownika.\r\n\r\nNależy przy tym pamiętać, że dla każdej rodziny styli wczytywany jest co najmniej jeden plik CSS. Dlatego też tworzenie współistniejących rodzin styli takich jak:\r\n<ul>\r\n	<li><strong>dark styles</strong> i <strong>light styles</strong></li>\r\n	<li><strong>blue styles</strong> i <strong>green styles</strong></li>\r\n</ul>\r\njest niepoprawne, gdyż co najmniej jeden styl CSS z każdej rodziny będzie od razu wczytany. Za to poprawnym jest stworzenie rodzin styli odpowiadających za pewne elementy stylowania strony np. oddzielna rodzina odpowiadająca za kolorystykę strony (<strong>colors</strong>) i oddzielna rodzina odpowiadająca za tło strony (<strong>patterns</strong>).\r\n\r\nOgólnie należy zadbać o to by poszczególne rodziny styli nie nadpisywały się wzajemnie.','Color Styles','','inherit','open','open','','349-revision-2','','','2012-07-09 09:56:08','2012-07-09 09:56:08','',349,'{$page_url}/uncategorized/349-revision-2/',0,'revision','',0),(457,1,'2012-07-09 10:24:12','2012-07-09 10:24:12','GavernWP umożliwia tworzenie szablonów w oparciu o Responsive Web Design. Dlatego też posiada on dwa dodatkowe style CSS:\r\n<ul>\r\n	<li>tablet.css</li>\r\n	<li>mobile.css</li>\r\n</ul>\r\nDzięki opcjom dostępnym w panelu administracyjnym można określić kiedy dokładnie będą wczytywane te style CSS.\r\n\r\nUkład dwukolumnowy (o ile kolumna jest włączona) wczytywany jest wtedy gdy nie jest wczytywany plik tablet.css.\r\n\r\nW momencie osiągnięcia granicznej szerokości dla pliku tablet.css układ strony przekształcany jest w jednokolumnowy a sama kolumna ląduję przed lub za treścią główną strony.\r\n\r\nDodatkowo w pozycjach widżetów takich jak top czy bottom1/2/3 moduły z układu trójkolumnowego przekształcają się na układ jednokolumnowy.\r\n\r\nNatomiast po wczytaniu pliku mobile.css wszędzie stosowany jest układ jednokolumnowy.\r\n\r\nBardzo ważnym udogodnieniem jest możliwość określenia czy moduł będzie wczytywany w trybie tabletowym lub mobilnym - więcej na ten temat można znaleźć we wpisie poświęconym Widget Rules.','Responsive Layout','','inherit','open','open','','351-revision-2','','','2012-07-09 10:24:12','2012-07-09 10:24:12','',351,'{$page_url}/uncategorized/351-revision-2/',0,'revision','',0),(458,1,'2012-07-09 10:28:40','2012-07-09 10:28:40','<a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> to technologia pozwalająca na stworzenie własnego silnika wyszukiwania wykorzystywanego przez przeglądarkę. Dzięki temu np. w przeglądarce Firefox użytkownik może po wejściu na naszą stronę opartą o framework GavernWP, zdefiniować nową wyszukiwarkę - dzięki temu w wypadku bardziej rozbudowanych witryn np. katalogów danych, wyszukiwanie staje się znacząco prostsze.\r\n\r\nWłączenie wsparcia dla Open Search wymaga włączenia jednej opcji w panelu administracyjnym w zakładce ustawień zaawansowanych. Wszystkie pozostałe operacje wykonywane są przez GavernWP.','Open Search support','','inherit','open','open','','353-revision-2','','','2012-07-09 10:28:40','2012-07-09 10:28:40','',353,'{$page_url}/uncategorized/353-revision-2/',0,'revision','',0),(459,1,'2012-07-09 10:36:35','2012-07-09 10:36:35','Dzięki Social API dodanie do wpisu przycisków udostępniania postów w najpopularniejszych portalach społecznościowych jest banalnie proste.\r\n\r\nSocial API wspiera obecnie cztery serwisy:\r\n<ul>\r\n	<li>Facebook</li>\r\n	<li>Google+</li>\r\n	<li>Twitter</li>\r\n	<li>Pinterest</li>\r\n</ul>\r\nPrzyciski udostępniania dodawane są z reguły pod wpisem. Wszelkie dane dodatkowe potrzebne do udostępnienia pobierane sa z treści wpisu lub metatagów OpenGraph.\r\n\r\nDzięki rozbudowanym opcjom konfiguracyjnym, można samodzielnie dobrać wygląd przycisków zgodnie z obecnie dostępnymi parametrami konfiguracyjnymi.\r\n\r\nCo najważniejsze zakres działania Social API można ograniczyć do konkretnych postów lub też wyłączyć z jego działania tylko wybrane posty.','Social API','','inherit','open','open','','356-revision-2','','','2012-07-09 10:36:35','2012-07-09 10:36:35','',356,'{$page_url}/uncategorized/356-revision-2/',0,'revision','',0),(461,1,'2012-07-10 06:25:25','2012-07-10 06:25:25','Każda podstrona szablonu w GavernWP tworzona jest na podstawie jednego pliku z katalogu głównego szablonu np. <strong>single.php</strong> oraz co najmniej czterech plików dodatkowych z katalogu <strong>layouts</strong>:\r\n<ul>\r\n	<li><strong>header.php</strong> - plik ten zawiera początkową strukturę strony tj. sekcję head oraz cały nagłówek strony z elementami takimi jak logo, menu główne itd.</li>\r\n	<li><strong>before.php</strong> - w pliku tym zawarte są wszystkie pozycje widżetów, które znajdują się przed główną treścią strony.</li>\r\n	<li><strong>after.php</strong> - plik ten jest odpowiednikiem pliku <strong>before.php</strong>, z tą różnicą, że zawiera pozycje widżetów, które znajdują się po głównej treści strony.</li>\r\n	<li><strong>footer.php</strong> - tak jak plik <strong>header.php</strong> zawiera początkową strukturę strony tak <strong>footer.php</strong> zawiera końcową strukturę strony tj. stopkę i elementy znajdujące się pod nią.</li>\r\n</ul>\r\nPowyższe pliki wraz z danym plikiem z katalogu głównego, tworzą podstawową strukturę każdej strony. Pozostałe elementy są generowane przez dodatkowe pliki lub funkcje. Większość takich plików można znaleźć w katalogu <strong>layouts</strong> - dla przykładu pliki o nazwach <strong>content.post.*.php</strong> zawierają składowe elementy każdego posta. Zastosowanie takich plików pozwoliło na znaczne ograniczenie ilości kodu w głównych plikach szablonu oraz ułatwia jego modyfikację gdyż zmiana np. stopki wpisu wymaga modyfikacji jednego lub dwóch a nie kilkunastu plików.\r\n\r\nFunkcje używane do generowania dodatkowych informacji wyświetlanych w postach, znajdują się w pliku <strong>gavern/helpers/helpers.layout.fragments.php</strong>.','Template structure','','inherit','open','open','','359-revision-2','','','2012-07-10 06:25:25','2012-07-10 06:25:25','',359,'{$page_url}/uncategorized/359-revision-2/',0,'revision','',0),(465,1,'2012-07-20 13:11:15','2012-07-20 13:11:15','GavernWP has support for comments with a division into threads. posiada wsparcie dla komentarzy z podziałem na wątki. Dzięki temu dyskusje prowadzone w komentarzach pod danym postem są dużo czytelniejsze.\r\n\r\nWszystkie opcje związane z konfiguracją komentarzy można ustawić korzystając ze standardowych opcji w panelu administracyjnym Wordpress (<em>Settings &gt; Discussion</em>). Wątki w komentarzach włączane są dzięki opcji \"<em><label for=\"thread_comments\">Enable threaded (nested) comments</label></em>\" i określeniu maksymalnej głębokości zagnieżdżeń odpowiedzi w wątkach.\r\n\r\nZa generowanie kodu HTML komentarzy w GavernWP odpowiadają dwa pliki:\r\n<ul>\r\n	<li><strong>comments.php</strong> - zawiera on kod generujący listę komentarzy oraz formularz ich dodawania.</li>\r\n	<li><strong>gavern/helpers/helper.layout.fragments.php</strong> - w funkcji <strong>gavern_comment_template</strong> znajduje się kod odpowiadający za wygenerowanie kodu danego komentarza.</li>\r\n</ul>\r\nKod CSS odpowiadający za stylistykę komentarzy i formularza dodawania komentarzy znajduje się w pliku <strong>css/wp.css</strong>.','Threaded comments','','inherit','open','open','','364-revision-3','','','2012-07-20 13:11:15','2012-07-20 13:11:15','',364,'{$page_url}/uncategorized/364-revision-3/',0,'revision','',0),(466,1,'2012-07-10 07:18:36','2012-07-10 07:18:36','GavernWP udostępnia kilka własnych styli podstron. Dzięki nim możliwe jest lepsze wykorzystanie możliwości Wordpressa oraz dostosowanie stron do wybranej tematyki.\r\n\r\nWszystkie dodatkowe style podstron są umieszczone w katalogu głównym w plikach <strong>template.*.php</strong>. Standardowo GavernWP zawiera następujace rodzaje podstron:\r\n<ul>\r\n	<li><strong>template.archive.php</strong> - strona archiwum, zawiera listę ostatnich postów, kategorii oraz listę linków do archiwów miesięcznych</li>\r\n	<li><strong>template.contact.php</strong> - strona z formularzem kontaktowym, który pozwala na wysłanie maila pod określony w konfiguracji Wordpressa adres e-mail.</li>\r\n	<li><strong>template.fullwidth.php</strong> - układ strony bez bocznego sidebar\'a.</li>\r\n	<li><strong>template.gallery.php</strong> - strona generująca animowaną galerię zdjęć z wykorzystaniem dostępnego w Wordpress mechanizmu załączników - wystarczy przypisać załączniki do takiej strony by pojawiły się one jako slajdy w galerii. Zalecane jest wybieranie zdjęć, które mają taki sam rozmiar.</li>\r\n	<li><strong>template.login.php</strong> - strona generująca formularz logowania dla użytkowników - po zalogowaniu wyświetla użytkownikowi informacje o jego nazwie użytkownika oraz przycisk do wylogowania się.</li>\r\n	<li><strong>template.tagcloud.php</strong> - strona generująca tag cloud naszej witryny.</li>\r\n</ul>\r\nGłówne style CSS od podstron znajdują się w pliku <strong>css/stuff.css</strong>, jednak należy pamiętać, że niektóre bardziej rozbudowane pliki podstron mogą dodatkowo wczytywać pliki CSS i JavaScript z katalogów <strong>css/templates/</strong> oraz <strong>js/templates/</strong>.\r\n\r\nAby wczytać w ten sposób dodatkowe pliki wystarczy zdefiniować drugi parametr funkcji <strong>gk_load</strong> (patrz: kod wywołania funkcji <strong>gk_load</strong> w pliku <strong>template.gallery.php</strong>).','Custom Page Styles','','inherit','open','open','','367-revision-2','','','2012-07-10 07:18:36','2012-07-10 07:18:36','',367,'{$page_url}/uncategorized/367-revision-2/',0,'revision','',0),(467,1,'2012-07-23 08:52:22','2012-07-23 08:52:22','GavernWP makes accessible a few own styles of subpages. Thanks to them, it is possible to use Wordpress possiblitities better  and adjusting pages to themes chosen.\r\n\r\nWszystkie dodatkowe style podstron są umieszczone w katalogu głównym w plikach <strong>template.*.php</strong>. Standardowo GavernWP zawiera następujace rodzaje podstron:\r\n<ul>\r\n	<li><strong>template.archive.php</strong> - strona archiwum, zawiera listę ostatnich postów, kategorii oraz listę linków do archiwów miesięcznych</li>\r\n	<li><strong>template.contact.php</strong> - strona z formularzem kontaktowym, który pozwala na wysłanie maila pod określony w konfiguracji Wordpressa adres e-mail.</li>\r\n	<li><strong>template.fullwidth.php</strong> - układ strony bez bocznego sidebar\'a.</li>\r\n	<li><strong>template.gallery.php</strong> - strona generująca animowaną galerię zdjęć z wykorzystaniem dostępnego w Wordpress mechanizmu załączników - wystarczy przypisać załączniki do takiej strony by pojawiły się one jako slajdy w galerii. Zalecane jest wybieranie zdjęć, które mają taki sam rozmiar.</li>\r\n	<li><strong>template.login.php</strong> - strona generująca formularz logowania dla użytkowników - po zalogowaniu wyświetla użytkownikowi informacje o jego nazwie użytkownika oraz przycisk do wylogowania się.</li>\r\n	<li><strong>template.tagcloud.php</strong> - strona generująca tag cloud naszej witryny.</li>\r\n</ul>\r\nGłówne style CSS od podstron znajdują się w pliku <strong>css/stuff.css</strong>, jednak należy pamiętać, że niektóre bardziej rozbudowane pliki podstron mogą dodatkowo wczytywać pliki CSS i JavaScript z katalogów <strong>css/templates/</strong> oraz <strong>js/templates/</strong>.\r\n\r\nAby wczytać w ten sposób dodatkowe pliki wystarczy zdefiniować drugi parametr funkcji <strong>gk_load</strong> (patrz: kod wywołania funkcji <strong>gk_load</strong> w pliku <strong>template.gallery.php</strong>).','Custom Page Styles','','inherit','open','open','','367-revision-3','','','2012-07-23 08:52:22','2012-07-23 08:52:22','',367,'{$page_url}/uncategorized/367-revision-3/',0,'revision','',0),(470,1,'2012-07-10 07:59:29','2012-07-10 07:59:29','Widget rules to mechanizm, który wprowadza zupełnie nowy sposób zarządzania widżetami na stronie. Dzięki niemu można określić dla widżeta takie właściwości jak:\r\n<ul>\r\n	<li>wyświetlanie na wybranych podstronach</li>\r\n	<li>wyświetlanie na wybranym typie urządzeń</li>\r\n	<li>wyświetlanie dla wybranej grupy użytkowników</li>\r\n	<li>wyświetlanie z użyciem wybranego stylu widżetu</li>\r\n</ul>\r\nPo włączeniu widget rules w zaawansowanych ustawieniach szablonu, pod każdym widżetem powinny pojawić się następujace opcje:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\r\n\r\nNajbardziej rozbudowane są opcje związane z widocznością widżetu na wybranych podstronach - po wybraniu opcji pokazywania widżetu na wybranych stronach (lub opcji nie pokazywania widżetu na wybranych stronach) pojawi się następujacy panel:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\r\n\r\nNależy następnie wybrać typ strony do dodania np. Category a następnie podać ID kategorii:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\r\n\r\nPo kliknięciu przycisku \"Add page\" strona pojawi się na liście wybranych stron na których w naszym wypadku będzie wyświetlany widżet:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\r\n\r\nStron można oczywiście dodać kilka:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\r\n\r\nDla zwiększenia czytelności każdy rodzaj strony wyświetlany jest w innym kolorze. Dodaną już stronę można usunąć klikając ikonę usuwania umieszczoną po prawej stronie każdej ze stron.\r\n\r\nW ten sposób można ustawić widżet tak by pojawiał się na wybranych stronach lub żeby pojawiał się on na wszystkich strona poza tymi wybranymi.\r\n\r\nStandardowo widżety pokazywane są na wszystkich podstronach.\r\n\r\nOpcja wyświetlania widżetu na wybranych urządeniach posiada pięć opcji do wyboru:\r\n<ul>\r\n	<li><strong>All devices</strong> - widżet będzie wyświetlany wszędzie - na każdym urządzeniu</li>\r\n	<li><strong>Desktop</strong> - widżet będzie wyświetlany tylko wtedy gdy nie jest wczytany ani plik <strong>tablet.css</strong> ani plik <strong>mobile.css</strong></li>\r\n	<li><strong>Tablets</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>tablet.css</strong> i jednocześnie nie będzie wczytany plik <strong>mobile.css</strong></li>\r\n	<li><strong>Smartphones</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>mobile.css</strong>.</li>\r\n	<li><strong>Tablets/Smartphones</strong> - widżet wyświetli się gdy wczytany będzie co najmniej jeden z plików <strong>tablet.css</strong> lub <strong>mobile.css</strong>.</li>\r\n</ul>\r\nDzięki tym ustawieniom można znacząco ograniczyć ilość treści wyświetlanych na urządzeniach o małych ekranach.\r\n\r\nOpcja wyświetlania widżetu dla wybranych grup użytkowników posiada cztery opcje do wyboru:\r\n<ul>\r\n	<li><strong>All users</strong> - widżet pojawi się wszystkim użytkownikom</li>\r\n	<li><strong>Only guests</strong> - widżet pojawi się tylko niezalogowanym użytkownikom</li>\r\n	<li><strong>Only registered users</strong> - widżet pojawi się tylko zalogowanym użytkownikom</li>\r\n	<li><strong>Only administrator</strong> - widżet pojawi się tylko administratorom</li>\r\n</ul>\r\nDzięki tej opcji można np. wyświetlać określone wiadomości poprzeż użycie widżetów przeznaczone dla wybranej grupy użytkowników.\r\n\r\nOstatnią opcję składającą się na widget rules stanowi opcja wyboru stylu widżetu - powoduje ona dopisanie do głównego kontenera widżetu dodatkowej klasy nadającej określone przez użytkownika stylowanie.\r\n\r\nStyle widżetów zdefiniowane są w pliku widget.styles.json oraz w kodzie CSS - w tym wypadku w <strong>css/wp.extensions.css</strong>.','Widget rules','','inherit','open','open','','370-revision-2','','','2012-07-10 07:59:29','2012-07-10 07:59:29','',370,'{$page_url}/uncategorized/370-revision-2/',0,'revision','',0),(471,1,'2012-07-23 09:39:43','2012-07-23 09:39:43','Widget rules is a mechanism which introduces a completely new way to manage widgets on a website. Thanks to it, it is possible to specify widget features such as:\r\n<ul>\r\n	<li>displaying on subpages chosen,</li>\r\n	<li>displaying on devices chosen,</li>\r\n	<li>displaying for a group of users chosen,</li>\r\n	<li>displaying with a widget style use chosen.</li>\r\n</ul>\r\nAfter switching on widget rules in template\'s advanced settings, under each widget, the following options should display Po włączeniu widget rules w zaawansowanych ustawieniach szablonu, pod każdym widżetem powinny pojawić się następujace opcje:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\r\n\r\nNajbardziej rozbudowane są opcje związane z widocznością widżetu na wybranych podstronach - po wybraniu opcji pokazywania widżetu na wybranych stronach (lub opcji nie pokazywania widżetu na wybranych stronach) pojawi się następujacy panel:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\r\n\r\nNależy następnie wybrać typ strony do dodania np. Category a następnie podać ID kategorii:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\r\n\r\nPo kliknięciu przycisku \"Add page\" strona pojawi się na liście wybranych stron na których w naszym wypadku będzie wyświetlany widżet:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\r\n\r\nStron można oczywiście dodać kilka:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\r\n\r\nDla zwiększenia czytelności każdy rodzaj strony wyświetlany jest w innym kolorze. Dodaną już stronę można usunąć klikając ikonę usuwania umieszczoną po prawej stronie każdej ze stron.\r\n\r\nW ten sposób można ustawić widżet tak by pojawiał się na wybranych stronach lub żeby pojawiał się on na wszystkich strona poza tymi wybranymi.\r\n\r\nStandardowo widżety pokazywane są na wszystkich podstronach.\r\n\r\nOpcja wyświetlania widżetu na wybranych urządeniach posiada pięć opcji do wyboru:\r\n<ul>\r\n	<li><strong>All devices</strong> - widżet będzie wyświetlany wszędzie - na każdym urządzeniu</li>\r\n	<li><strong>Desktop</strong> - widżet będzie wyświetlany tylko wtedy gdy nie jest wczytany ani plik <strong>tablet.css</strong> ani plik <strong>mobile.css</strong></li>\r\n	<li><strong>Tablets</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>tablet.css</strong> i jednocześnie nie będzie wczytany plik <strong>mobile.css</strong></li>\r\n	<li><strong>Smartphones</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>mobile.css</strong>.</li>\r\n	<li><strong>Tablets/Smartphones</strong> - widżet wyświetli się gdy wczytany będzie co najmniej jeden z plików <strong>tablet.css</strong> lub <strong>mobile.css</strong>.</li>\r\n</ul>\r\nDzięki tym ustawieniom można znacząco ograniczyć ilość treści wyświetlanych na urządzeniach o małych ekranach.\r\n\r\nOpcja wyświetlania widżetu dla wybranych grup użytkowników posiada cztery opcje do wyboru:\r\n<ul>\r\n	<li><strong>All users</strong> - widżet pojawi się wszystkim użytkownikom</li>\r\n	<li><strong>Only guests</strong> - widżet pojawi się tylko niezalogowanym użytkownikom</li>\r\n	<li><strong>Only registered users</strong> - widżet pojawi się tylko zalogowanym użytkownikom</li>\r\n	<li><strong>Only administrator</strong> - widżet pojawi się tylko administratorom</li>\r\n</ul>\r\nDzięki tej opcji można np. wyświetlać określone wiadomości poprzeż użycie widżetów przeznaczone dla wybranej grupy użytkowników.\r\n\r\nOstatnią opcję składającą się na widget rules stanowi opcja wyboru stylu widżetu - powoduje ona dopisanie do głównego kontenera widżetu dodatkowej klasy nadającej określone przez użytkownika stylowanie.\r\n\r\nStyle widżetów zdefiniowane są w pliku widget.styles.json oraz w kodzie CSS - w tym wypadku w <strong>css/wp.extensions.css</strong>.','Widget rules','','inherit','open','open','','370-revision-3','','','2012-07-23 09:39:43','2012-07-23 09:39:43','',370,'{$page_url}/uncategorized/370-revision-3/',0,'revision','',0),(472,1,'2012-07-23 09:48:37','2012-07-23 09:48:37','Widget rules is a mechanism which introduces a completely new way to manage widgets on a website. Thanks to it, it is possible to specify widget features such as:\r\n<ul>\r\n	<li>displaying on subpages chosen,</li>\r\n	<li>displaying on devices chosen,</li>\r\n	<li>displaying for a group of users chosen,</li>\r\n	<li>displaying with a widget style use chosen.</li>\r\n</ul>\r\nAfter switching on widget rules in template\'s advanced settings, under each widget, the following options should be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\r\n\r\nThe most extensive options are those connected with a widget visibility on subpages chosen - after choosing an option to show a widget on pages chosen (or an option not showing a widget on pages chosen) Najbardziej rozbudowane są opcje związane z widocznością widżetu na wybranych podstronach - po wybraniu opcji pokazywania widżetu na wybranych stronach (lub opcji nie pokazywania widżetu na wybranych stronach) pojawi się następujacy panel:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\r\n\r\nNależy następnie wybrać typ strony do dodania np. Category a następnie podać ID kategorii:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\r\n\r\nPo kliknięciu przycisku \"Add page\" strona pojawi się na liście wybranych stron na których w naszym wypadku będzie wyświetlany widżet:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\r\n\r\nStron można oczywiście dodać kilka:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\r\n\r\nDla zwiększenia czytelności każdy rodzaj strony wyświetlany jest w innym kolorze. Dodaną już stronę można usunąć klikając ikonę usuwania umieszczoną po prawej stronie każdej ze stron.\r\n\r\nW ten sposób można ustawić widżet tak by pojawiał się na wybranych stronach lub żeby pojawiał się on na wszystkich strona poza tymi wybranymi.\r\n\r\nStandardowo widżety pokazywane są na wszystkich podstronach.\r\n\r\nOpcja wyświetlania widżetu na wybranych urządeniach posiada pięć opcji do wyboru:\r\n<ul>\r\n	<li><strong>All devices</strong> - widżet będzie wyświetlany wszędzie - na każdym urządzeniu</li>\r\n	<li><strong>Desktop</strong> - widżet będzie wyświetlany tylko wtedy gdy nie jest wczytany ani plik <strong>tablet.css</strong> ani plik <strong>mobile.css</strong></li>\r\n	<li><strong>Tablets</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>tablet.css</strong> i jednocześnie nie będzie wczytany plik <strong>mobile.css</strong></li>\r\n	<li><strong>Smartphones</strong> - widżet wyświetli się tylko wtedy kiedy wczytany będzie plik <strong>mobile.css</strong>.</li>\r\n	<li><strong>Tablets/Smartphones</strong> - widżet wyświetli się gdy wczytany będzie co najmniej jeden z plików <strong>tablet.css</strong> lub <strong>mobile.css</strong>.</li>\r\n</ul>\r\nDzięki tym ustawieniom można znacząco ograniczyć ilość treści wyświetlanych na urządzeniach o małych ekranach.\r\n\r\nOpcja wyświetlania widżetu dla wybranych grup użytkowników posiada cztery opcje do wyboru:\r\n<ul>\r\n	<li><strong>All users</strong> - widżet pojawi się wszystkim użytkownikom</li>\r\n	<li><strong>Only guests</strong> - widżet pojawi się tylko niezalogowanym użytkownikom</li>\r\n	<li><strong>Only registered users</strong> - widżet pojawi się tylko zalogowanym użytkownikom</li>\r\n	<li><strong>Only administrator</strong> - widżet pojawi się tylko administratorom</li>\r\n</ul>\r\nDzięki tej opcji można np. wyświetlać określone wiadomości poprzeż użycie widżetów przeznaczone dla wybranej grupy użytkowników.\r\n\r\nOstatnią opcję składającą się na widget rules stanowi opcja wyboru stylu widżetu - powoduje ona dopisanie do głównego kontenera widżetu dodatkowej klasy nadającej określone przez użytkownika stylowanie.\r\n\r\nStyle widżetów zdefiniowane są w pliku widget.styles.json oraz w kodzie CSS - w tym wypadku w <strong>css/wp.extensions.css</strong>.','Widget rules','','inherit','open','open','','370-revision-4','','','2012-07-23 09:48:37','2012-07-23 09:48:37','',370,'{$page_url}/uncategorized/370-revision-4/',0,'revision','',0),(474,1,'2012-07-23 11:08:54','2012-07-23 11:08:54','Widget rules is a mechanism which introduces a completely new way to manage widgets on a website. Thanks to it, it is possible to specify widget features such as:\r\n<ul>\r\n	<li>displaying on subpages chosen,</li>\r\n	<li>displaying on devices chosen,</li>\r\n	<li>displaying for a group of users chosen,</li>\r\n	<li>displaying with a widget style use chosen.</li>\r\n</ul>\r\nAfter switching on widget rules in template\'s advanced settings, under each widget, the following options should be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\r\n\r\nThe most extensive options are those connected with a widget visibility on subpages chosen - after choosing an option to show a widget on pages chosen (or an option not showing a widget on pages chosen), such a panel will appear:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\r\n\r\nThen, you have to choose a page\'s type to add, e.g. Category, and then give category ID:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\r\n\r\nAfter clicking \"Add page\" button, a page will appear on a list of pages chosen on which in our case a widget will be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\r\n\r\nOf course, it is possible to add more pages:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\r\n\r\nTo make it clearer, , each page\'s type is displayed with a different color. A page added can be removed by clicking a removing icon placed on the right side of each page.\r\n\r\nIn this way, you may set a widget so as to be shown on pages chosen or to be shown on all pages except the chosen ones.\r\n\r\nGenerally, widgets are shown on all pages.\r\n\r\nAn option of displaying a widget on devices chosen has five options to choose:\r\n<ul>\r\n	<li><strong>All devices</strong> - a widget will be displayed everytwhere - on every device</li>\r\n	<li><strong>Desktop</strong> - a widget will be displayed only when neither a <strong>tablet.css</strong> file nor a <strong>mobile.css</strong> is loaded <strong></strong></li>\r\n	<li><strong>Tablets</strong> - a widget displays only when a <strong>tablet.css</strong> file will be loaded and, at the same time, a <strong>mobile.css</strong> file will not be loaded <strong></strong></li>\r\n	<li><strong>Smartphones</strong> - a widget will be displayed only when a <strong>mobile.css</strong> file will be loaded</li>\r\n	<li><strong>Tablets/Smartphones</strong> - a widget will be displayed when at least one file will be loaded: <strong>tablet.css</strong> or <strong>mobile.css</strong>.</li>\r\n</ul>\r\nDzięki tym ustawieniom można znacząco ograniczyć ilość treści wyświetlanych na urządzeniach o małych ekranach.\r\n\r\nOpcja wyświetlania widżetu dla wybranych grup użytkowników posiada cztery opcje do wyboru:\r\n<ul>\r\n	<li><strong>All users</strong> - widżet pojawi się wszystkim użytkownikom</li>\r\n	<li><strong>Only guests</strong> - widżet pojawi się tylko niezalogowanym użytkownikom</li>\r\n	<li><strong>Only registered users</strong> - widżet pojawi się tylko zalogowanym użytkownikom</li>\r\n	<li><strong>Only administrator</strong> - widżet pojawi się tylko administratorom</li>\r\n</ul>\r\nDzięki tej opcji można np. wyświetlać określone wiadomości poprzeż użycie widżetów przeznaczone dla wybranej grupy użytkowników.\r\n\r\nOstatnią opcję składającą się na widget rules stanowi opcja wyboru stylu widżetu - powoduje ona dopisanie do głównego kontenera widżetu dodatkowej klasy nadającej określone przez użytkownika stylowanie.\r\n\r\nStyle widżetów zdefiniowane są w pliku widget.styles.json oraz w kodzie CSS - w tym wypadku w <strong>css/wp.extensions.css</strong>.','Widget rules','','inherit','open','open','','370-revision-6','','','2012-07-23 11:08:54','2012-07-23 11:08:54','',370,'{$page_url}/uncategorized/370-revision-6/',0,'revision','',0),(475,1,'2012-07-11 13:32:57','2012-07-11 13:32:57','GavernWP udostępnia opcje pozwalające na branding szablonu. Opcje brandingu podzielone są na dwie grupy:\r\n<ul>\r\n	<li>branding szablonu</li>\r\n	<li>branding panelu administracyjnego</li>\r\n</ul>\r\nDzięki opcjom brandingu szablonu użytkownik może określić:\r\n<ul>\r\n	<li>logo strony</li>\r\n	<li>treść stopki szablonu</li>\r\n	<li>zdecydować o wyświetlaniu loga frameworka pod stopką strony</li>\r\n</ul>\r\nWięcej o opcjach brandingu dla szablonu znajduje się we wpisie poświęconym zakładce \"Template branding\" w panelu administracyjnym.\r\n\r\nOpcje brandingu panelu administracyjnego pozwalają na zdefiniowanie:\r\n<ul>\r\n	<li>loga wyświetlanego obok nazwy szablonu w sidebarze panelu administracyjnego</li>\r\n	<li>loga widocznego nad formularzem logowania do panelu administracyjnego</li>\r\n</ul>\r\nWięcej o opcjach brandingu dla panelu administracyjnego znajduje się we wpisie poświęconym zakładce \"Back-end branding\" w panelu administracyjnym.','Branding','','inherit','open','open','','377-revision-2','','','2012-07-11 13:32:57','2012-07-11 13:32:57','',377,'{$page_url}/uncategorized/377-revision-2/',0,'revision','',0),(489,1,'2012-07-26 08:46:09','2012-07-26 08:46:09','GavernWP has basic support for a new option available in Wordpress 3.4 - an options editor with templates preview. Now, the most important options connected with template\'s style and its layout has been implemented to a live editor.\r\n\r\nIn order to reach it easier, we placed a direct link to this editor in the top part of templates\' options:\r\n\r\n[screenshot]\r\n\r\nWszystkie opcje zawarte w tym edytorze dostępne są również poprzez tradycyjny panel opcji szablonu.\r\n\r\nAby ułatwić dodawanie własnych opcji do live editor cały kod generujący opcje umieszczono w oddzielnym pliku <strong>gavern/helpers/helpers.customizer.php</strong>.\r\n\r\nNależy pamiętać, że wszystkie opcje i ustawienia z live editor są przechowywane w tym samym miejscu co ich odpowiedniki z panelu admistracyjnego zatem zmiana ustawień z użyciem live editor pociąga za sobą zmiany w zwykłym panelu opcji. Dlatego też zalecane jest nie uruchamianie w tym samym momencie tradycyjnego panelu administracyjnego szablonu i live editor, gdyż może zaistnieć sytuacja gdy zapis opcji w obu miejscach naraz o różnych wartościach dla tego samego parametru da rezultat inny niż oczekiwany.','Theme live editor','','inherit','open','open','','380-revision-5','','','2012-07-26 08:46:09','2012-07-26 08:46:09','',380,'{$page_url}/uncategorized/380-revision-5/',0,'revision','',0),(476,1,'2012-07-11 13:44:19','2012-07-11 13:44:19','GavernWP posiada podstawowe wsparcie dla nowej opcji dostępnej w Wordpress 3.4 - edytora opcji z podglądem szablonu. Obecnie w live editor zaimplementowano najważniejsze opcje związane ze stylem szablonu i jego układem.\r\n\r\nAby można było łatwiej dostać się do tego edytora umieściliśmy w górnej części opcji szablonu bezpośredni link do edytora:\r\n\r\n[screenshot]\r\n\r\nWszystkie opcje zawarte w tym edytorze dostępne są również poprzez tradycyjny panel opcji szablonu.\r\n\r\nAby ułatwić dodawanie własnych opcji do live editor cały kod generujący opcje umieszczono w oddzielnym pliku <strong>gavern/helpers/helpers.customizer.php</strong>.\r\n\r\nNależy pamiętać, że wszystkie opcje i ustawienia z live editor są przechowywane w tym samym miejscu co ich odpowiedniki z panelu admistracyjnego zatem zmiana ustawień z użyciem live editor pociąga za sobą zmiany w zwykłym panelu opcji. Dlatego też zalecane jest nie uruchamianie w tym samym momencie tradycyjnego panelu administracyjnego szablonu i live editor, gdyż może zaistnieć sytuacja gdy zapis opcji w obu miejscach naraz o różnych wartościach dla tego samego parametru da rezultat inny niż oczekiwany.','Theme live editor','','inherit','open','open','','380-revision-2','','','2012-07-11 13:44:19','2012-07-11 13:44:19','',380,'{$page_url}/uncategorized/380-revision-2/',0,'revision','',0),(477,1,'2012-07-11 13:50:49','2012-07-11 13:50:49','GavernWP posiada sekcję aktualizacji, która pozwala na dostęp do informacji o tym czy szablon jest zaktualizowany do ostatniej wersji. Aby dostać się do panelu aktualizacji należy skorzystać z subemnu \"Updates\" menu głównego opcji szablonu:\r\n\r\n[screenshot]\r\n\r\nJeżeli nasz szablon jest nieaktualny, pojawi się nam lista aktualizacji, które są nowsze niż nasza wersja szablonu:\r\n\r\n[screenshot]\r\n\r\nNatomiast gdy nasz szablon jest w najnowszej wersji, ujrzymy stosowny komunikat o tym, że szablon nie posiada żadnych nowych aktualizacji do pobrania:\r\n\r\n[screenshot]\r\n\r\nWarto też pamiętać, że darmowy szablon MeetGavernWP jest dostępny poprzez publiczne repozytorium w serwisie github, co pozwala na łatwą analizę zmian wprowadzanych w poszczególnych plikach. W wypadku szablonów komercyjnych do porównywania zmian w plikach zalecane jest wykorzystanie narzędzi typu WinMerge (Windows) lub File Merge (MacOS X). Każda aktualizacja w naszym systemie aktualizacji posiada informację o liście zmodyfikowanych plików. Ogólnie zalecane jest porównywanie tylko tych plików, które sami ręcznie modyfikowaliśmy po pobraniu szablonu.','Updates','','inherit','open','open','','382-revision-2','','','2012-07-11 13:50:49','2012-07-11 13:50:49','',382,'{$page_url}/uncategorized/382-revision-2/',0,'revision','',0),(478,1,'2012-07-25 09:44:52','2012-07-25 09:44:52','GavernWP has an update section which allows to access information whether a template was updated to the latest version. In order to access an updates panel, you have to use \"Updates\" submenu from a main menu of template\'s options:\r\n\r\n[screenshot]\r\n\r\nIf a template was not updatedJeżeli nasz szablon jest nieaktualny, pojawi się nam lista aktualizacji, które są nowsze niż nasza wersja szablonu:\r\n\r\n[screenshot]\r\n\r\nNatomiast gdy nasz szablon jest w najnowszej wersji, ujrzymy stosowny komunikat o tym, że szablon nie posiada żadnych nowych aktualizacji do pobrania:\r\n\r\n[screenshot]\r\n\r\nWarto też pamiętać, że darmowy szablon MeetGavernWP jest dostępny poprzez publiczne repozytorium w serwisie github, co pozwala na łatwą analizę zmian wprowadzanych w poszczególnych plikach. W wypadku szablonów komercyjnych do porównywania zmian w plikach zalecane jest wykorzystanie narzędzi typu WinMerge (Windows) lub File Merge (MacOS X). Każda aktualizacja w naszym systemie aktualizacji posiada informację o liście zmodyfikowanych plików. Ogólnie zalecane jest porównywanie tylko tych plików, które sami ręcznie modyfikowaliśmy po pobraniu szablonu.','Updates','','inherit','open','open','','382-revision-3','','','2012-07-25 09:44:52','2012-07-25 09:44:52','',382,'{$page_url}/uncategorized/382-revision-3/',0,'revision','',0),(479,1,'2012-07-11 13:59:23','2012-07-11 13:59:23','Czasem spotykamy się z sytuacją kiedy to musimy skopiować konfigurację z jednej instalacji szablonu do innej. Aby ułatwić to zadanie GavernWP został wyposażony w opcje importu i eksportu ustawień szablonu dostępne w zakładce \"Import/Export\" menu głównego szablonu:\r\n\r\n[screenshot]\r\n\r\nPo wejściu na stronę tych ustawień ujrzymy następujący formularz:\r\n\r\n[screenshot]\r\n\r\nAby wyeksportować ustawienia wystarczy skopiować tekst z pola \"Export\" i skopiować go do pola \"Import\" w innym szablonie.\r\n\r\n<strong>Uwaga!</strong> Eksportując ustawienia należy pamiętać, że możliwe jest jedynie kopiowanie ustawień pomiędzy tymi samymi szablonami.\r\n\r\nUstawienia szablonu dostępne są w czytelnym dla człowieka formacie JSON, zatem można te ustawienia zapisać do pliku a następnie zmodyfikować je ręcznie przed wgraniem do innego szablonu.\r\n\r\n<strong>Wskazówka:</strong> zalecamy wykonanie co jakiś czas zrzutu ustawień szablonu, dzięki temu można zabezpieczyć się przed niepożądanymi efektami większych zmian w konfiguracji szablonu. Takie zrzuty ustawień powinny być zapisane w pliku posiadającym w nazwię datę wykonania zrzutu np. <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','inherit','open','open','','384-revision-2','','','2012-07-11 13:59:23','2012-07-11 13:59:23','',384,'{$page_url}/uncategorized/384-revision-2/',0,'revision','',0),(480,1,'2012-07-25 10:14:47','2012-07-25 10:14:47','Sometimes, there is a situation when you have to copy a configuration from one installation to another one. In order to simplify it, GavernWP has been equipped with import and export options of template\'s settings in \"Import/Export\" tab of a template\'s main menu:\r\n\r\n[screenshot]\r\n\r\nAfter Po wejściu na stronę tych ustawień ujrzymy następujący formularz:\r\n\r\n[screenshot]\r\n\r\nAby wyeksportować ustawienia wystarczy skopiować tekst z pola \"Export\" i skopiować go do pola \"Import\" w innym szablonie.\r\n\r\n<strong>Uwaga!</strong> Eksportując ustawienia należy pamiętać, że możliwe jest jedynie kopiowanie ustawień pomiędzy tymi samymi szablonami.\r\n\r\nUstawienia szablonu dostępne są w czytelnym dla człowieka formacie JSON, zatem można te ustawienia zapisać do pliku a następnie zmodyfikować je ręcznie przed wgraniem do innego szablonu.\r\n\r\n<strong>Wskazówka:</strong> zalecamy wykonanie co jakiś czas zrzutu ustawień szablonu, dzięki temu można zabezpieczyć się przed niepożądanymi efektami większych zmian w konfiguracji szablonu. Takie zrzuty ustawień powinny być zapisane w pliku posiadającym w nazwię datę wykonania zrzutu np. <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','inherit','open','open','','384-revision-3','','','2012-07-25 10:14:47','2012-07-25 10:14:47','',384,'{$page_url}/uncategorized/384-revision-3/',0,'revision','',0),(500,1,'2012-07-27 10:54:44','2012-07-27 10:54:44','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - it includes a list of sections visible on the right side of an administrazawiera on listę sekcji widocznych w panelu administracyjnym po prawej stronie: [screensthot] każda sekcja jest opisana tablicą postaci [code][\"Basic\", \"options.basic\", \"enabled\"][/code] pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-6','','','2012-07-27 10:54:44','2012-07-27 10:54:44','',427,'{$page_url}/uncategorized/427-revision-6/',0,'revision','',0),(481,1,'2012-07-25 10:41:36','2012-07-25 10:41:36','Sometimes, there is a situation when you have to copy a configuration from one installation to another one. In order to simplify it, GavernWP has been equipped with import and export options of template\'s settings in \"Import/Export\" tab of a template\'s main menu:\r\n\r\n[screenshot]\r\n\r\nAfter entering a page of these settings, you will see the following form:\r\n\r\n[screenshot]\r\n\r\nIn order to export settings, it is enough to copy a text from an \"Export\" field and copy it to an \"Import\" field in a different template.\r\n\r\nAby wyeksportować ustawienia wystarczy skopiować tekst z pola \"Export\" i skopiować go do pola \"Import\" w innym szablonie.\r\n\r\n<strong>Uwaga!</strong> Eksportując ustawienia należy pamiętać, że możliwe jest jedynie kopiowanie ustawień pomiędzy tymi samymi szablonami.\r\n\r\nUstawienia szablonu dostępne są w czytelnym dla człowieka formacie JSON, zatem można te ustawienia zapisać do pliku a następnie zmodyfikować je ręcznie przed wgraniem do innego szablonu.\r\n\r\n<strong>Wskazówka:</strong> zalecamy wykonanie co jakiś czas zrzutu ustawień szablonu, dzięki temu można zabezpieczyć się przed niepożądanymi efektami większych zmian w konfiguracji szablonu. Takie zrzuty ustawień powinny być zapisane w pliku posiadającym w nazwię datę wykonania zrzutu np. <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','inherit','open','open','','384-revision-4','','','2012-07-25 10:41:36','2012-07-25 10:41:36','',384,'{$page_url}/uncategorized/384-revision-4/',0,'revision','',0),(482,1,'2012-07-25 10:55:14','2012-07-25 10:55:14','Sometimes, there is a situation when you have to copy a configuration from one installation to another one. In order to simplify it, GavernWP has been equipped with import and export options of template\'s settings in \"Import/Export\" tab of a template\'s main menu:\r\n\r\n[screenshot]\r\n\r\nAfter entering a page of these settings, you will see the following form:\r\n\r\n[screenshot]\r\n\r\nIn order to export settings, it is enough to copy a text from an \"Export\" field and copy it to an \"Import\" field in a different template.\r\n\r\n&nbsp;\r\n\r\n<strong>Uwaga!</strong> Eksportując ustawienia należy pamiętać, że możliwe jest jedynie kopiowanie ustawień pomiędzy tymi samymi szablonami.\r\n\r\nUstawienia szablonu dostępne są w czytelnym dla człowieka formacie JSON, zatem można te ustawienia zapisać do pliku a następnie zmodyfikować je ręcznie przed wgraniem do innego szablonu.\r\n\r\n<strong>Wskazówka:</strong> zalecamy wykonanie co jakiś czas zrzutu ustawień szablonu, dzięki temu można zabezpieczyć się przed niepożądanymi efektami większych zmian w konfiguracji szablonu. Takie zrzuty ustawień powinny być zapisane w pliku posiadającym w nazwię datę wykonania zrzutu np. <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','inherit','open','open','','384-revision-5','','','2012-07-25 10:55:14','2012-07-25 10:55:14','',384,'{$page_url}/uncategorized/384-revision-5/',0,'revision','',0),(483,1,'2012-07-25 11:22:52','2012-07-25 11:22:52','Sometimes, there is a situation when you have to copy a configuration from one installation to another one. In order to simplify it, GavernWP has been equipped with import and export options of template\'s settings in \"Import/Export\" tab of a template\'s main menu:\r\n\r\n[screenshot]\r\n\r\nAfter entering a page of these settings, you will see the following form:\r\n\r\n[screenshot]\r\n\r\nIn order to export settings, it is enough to copy a text from an \"Export\" field and copy it to an \"Import\" field in a different template.\r\n\r\n<strong>Note!</strong> While exporting settings, you have to remember that it is possible to copy settings between the same templates.\r\nTemplate\'s settings are available in JSON format, so it is possible to save these settings to a file and then modify them manually before loading to a different template.\r\n\r\nTip: we recommend\r\n\r\n<strong>Wskazówka:</strong> zalecamy wykonanie co jakiś czas zrzutu ustawień szablonu, dzięki temu można zabezpieczyć się przed niepożądanymi efektami większych zmian w konfiguracji szablonu. Takie zrzuty ustawień powinny być zapisane w pliku posiadającym w nazwię datę wykonania zrzutu np. <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','inherit','open','open','','384-revision-6','','','2012-07-25 11:22:52','2012-07-25 11:22:52','',384,'{$page_url}/uncategorized/384-revision-6/',0,'revision','',0),(484,1,'2012-07-11 14:52:14','2012-07-11 14:52:14','Dla ułatwienia wykorzystania shortcodes dostępnych w szablonach opartych o framework GavernWP zaimplementowano przycisk od typografii szablonu dostępny w edytorze postów:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\r\n\r\nKlikając na ten przycisk ujrzymy listę dostępnych elementów typografii:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\r\n\r\nDla większości elementów można wybrać wersję z określoną stylistyką. Po wybraniu konkretnego stylu pojawi się kod shortcode, który zostanie zamieniony w treści wpisu przez skrypty na konkretną strukturę ostylowaną w dany sposób.\r\n\r\nNależy zwrócić uwagę na fakt, że dodanie nowego kodu Shortcode wymaga trzech operacji:\r\n<ul>\r\n	<li>dodania wpisu w pliku konfiguracyjnym shortcodes.js</li>\r\n	<li>dodania kodu PHP obsługującego dany shortcode</li>\r\n	<li>dodania opcjonalnego kodu CSS i JavaScript (o ile wymaga tego dany shortcode)</li>\r\n</ul>\r\nPlik <strong>shortcodes.js</strong> w katalogu <strong>config</strong> zawiera wpisy, które są zamieniane na strukturę menu widocznego po kliknięciu w przycisk typografii - zawiera on zmienną <strong>$GAVERNWP_SHORTCODES</strong>, która jest tablicą zawierającą obiekty reprezentujące elementy menu wyboru. Każdy obiekt posiada trzy właściwości: <strong>title</strong>, <strong>code</strong> oraz <strong>submenu</strong>. Omówmy tą strukturę na przykładzie pozycji <strong>Highlight</strong>:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - zawiera nazwę pozycji menu wyświetlaną przez skrypt</li>\r\n	<li><strong>code</strong> - jest to kod shortcode, który zostanie dodany do wpisu w momencie kliknięcia danej pozycji menu - należy pamiętać, że nie wszystkie pozycje menu na pierwszym poziomie posiadają wartość w tym polu - jeżeli jest ona pustym ciągiem znaków oznacza to dla skryptu, że kliknięcie w daną pozycję menu ma nie wywoływać żadnej akcji.</li>\r\n	<li><strong>submenu</strong> - jest to tablica podmenu danej pozycji menu. Każda pozycja podmenu jest zbudowana tak samo jak pozycje menu na pierwszym poziomie, z tą różnicą, że podmenu nie może mieć kolejnego podmenu, zatem nie dodajemy w obiekcie podmenu właściwości <strong>submenu</strong>.</li>\r\n</ul>\r\nPrzyjmijmy, że dodaliśmy już nasz shortcode do przycisku typografii korzystając z pliku shortcodes.js. Pozostaje nam kwestia obsługi naszego shortcode po stronie szablonu.\r\n\r\nW tym celu należy otworzyć plik<strong> gavern/helpers/helpers.shortcodes.php</strong>.\r\n\r\nPlik ten jest podzielony na trzy główne sekcje zaczynające się od linijek podobnych do:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nJest to instrukcja warunkowa IF związana z daną grupą elementów typografii. Gavern zawiera trzy takie grupy:\r\n<ul>\r\n	<li>elementy typografii - funkcje z nią związane mają prefiks <strong>gavern_ts_</strong> w nazwie</li>\r\n	<li>elementy interaktywne - funkcje z nią związane mają prefiks <strong>gavern_ies_</strong> w nazwie</li>\r\n	<li>elementy chrakterystyczne dla danego szablonu - funkcje z nią związane mają prefiks <strong>gavern_tss_</strong> w nazwie</li>\r\n</ul>\r\nNowe elementy typografii zalecamy dodawać w tej ostatniej grupie - w szablonie Meet GavernWPdomyślnie jest ona pusta. Zalecamy pamiętać o zastosowaniu stosownego dla danej grupy prefiksu w nazwie funkcji np. w wypadku trzeciej grupy będzie to <strong>gavern_tss_</strong>. Sam kod danego Shortcode należy tworzyć według wytycznych opisanych w <a href=\"http://codex.wordpress.org/Shortcode_API\">Shortcode API</a>.\r\n\r\nOstatni krok jest opcjonalny i zależny od typu naszego Shortcode. Jeżeli nasz Shortcode wymaga dodatkowego kod CSS lub JavaScript należy zdefiniować go w plikach <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong>, gdzie <strong>*</strong> oznacza nazwę grupy do której przypisaliśmy dany Shortcode.\r\n\r\nJest bardzo ważne, by umieścić elementy kodu CSS i JavaScript w odpowiednim pliku, gdyż umożliwi to optymalizację kodu całego szablonu w momencie wyłączenia z użytkowania danej grupy kodów Shortcodes.','Typography button','','inherit','open','open','','386-revision-2','','','2012-07-11 14:52:14','2012-07-11 14:52:14','',386,'{$page_url}/uncategorized/386-revision-2/',0,'revision','',0),(485,1,'2012-07-25 12:52:08','2012-07-25 12:52:08','For simplifying shortcodes use available in templates based on GavernWP framework, a button for template\'s typography has been implemented which is available in a posts editor:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\r\n\r\nBy clicking this button, you will see a list of available typography elements:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content\r\n\r\nDla większości elementów można wybrać wersję z określoną stylistyką. Po wybraniu konkretnego stylu pojawi się kod shortcode, który zostanie zamieniony w treści wpisu przez skrypty na konkretną strukturę ostylowaną w dany sposób.\r\n\r\nNależy zwrócić uwagę na fakt, że dodanie nowego kodu Shortcode wymaga trzech operacji:\r\n<ul>\r\n	<li>dodania wpisu w pliku konfiguracyjnym shortcodes.js</li>\r\n	<li>dodania kodu PHP obsługującego dany shortcode</li>\r\n	<li>dodania opcjonalnego kodu CSS i JavaScript (o ile wymaga tego dany shortcode)</li>\r\n</ul>\r\nPlik <strong>shortcodes.js</strong> w katalogu <strong>config</strong> zawiera wpisy, które są zamieniane na strukturę menu widocznego po kliknięciu w przycisk typografii - zawiera on zmienną <strong>$GAVERNWP_SHORTCODES</strong>, która jest tablicą zawierającą obiekty reprezentujące elementy menu wyboru. Każdy obiekt posiada trzy właściwości: <strong>title</strong>, <strong>code</strong> oraz <strong>submenu</strong>. Omówmy tą strukturę na przykładzie pozycji <strong>Highlight</strong>:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - zawiera nazwę pozycji menu wyświetlaną przez skrypt</li>\r\n	<li><strong>code</strong> - jest to kod shortcode, który zostanie dodany do wpisu w momencie kliknięcia danej pozycji menu - należy pamiętać, że nie wszystkie pozycje menu na pierwszym poziomie posiadają wartość w tym polu - jeżeli jest ona pustym ciągiem znaków oznacza to dla skryptu, że kliknięcie w daną pozycję menu ma nie wywoływać żadnej akcji.</li>\r\n	<li><strong>submenu</strong> - jest to tablica podmenu danej pozycji menu. Każda pozycja podmenu jest zbudowana tak samo jak pozycje menu na pierwszym poziomie, z tą różnicą, że podmenu nie może mieć kolejnego podmenu, zatem nie dodajemy w obiekcie podmenu właściwości <strong>submenu</strong>.</li>\r\n</ul>\r\nPrzyjmijmy, że dodaliśmy już nasz shortcode do przycisku typografii korzystając z pliku shortcodes.js. Pozostaje nam kwestia obsługi naszego shortcode po stronie szablonu.\r\n\r\nW tym celu należy otworzyć plik<strong> gavern/helpers/helpers.shortcodes.php</strong>.\r\n\r\nPlik ten jest podzielony na trzy główne sekcje zaczynające się od linijek podobnych do:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nJest to instrukcja warunkowa IF związana z daną grupą elementów typografii. Gavern zawiera trzy takie grupy:\r\n<ul>\r\n	<li>elementy typografii - funkcje z nią związane mają prefiks <strong>gavern_ts_</strong> w nazwie</li>\r\n	<li>elementy interaktywne - funkcje z nią związane mają prefiks <strong>gavern_ies_</strong> w nazwie</li>\r\n	<li>elementy chrakterystyczne dla danego szablonu - funkcje z nią związane mają prefiks <strong>gavern_tss_</strong> w nazwie</li>\r\n</ul>\r\nNowe elementy typografii zalecamy dodawać w tej ostatniej grupie - w szablonie Meet GavernWPdomyślnie jest ona pusta. Zalecamy pamiętać o zastosowaniu stosownego dla danej grupy prefiksu w nazwie funkcji np. w wypadku trzeciej grupy będzie to <strong>gavern_tss_</strong>. Sam kod danego Shortcode należy tworzyć według wytycznych opisanych w <a href=\"http://codex.wordpress.org/Shortcode_API\">Shortcode API</a>.\r\n\r\nOstatni krok jest opcjonalny i zależny od typu naszego Shortcode. Jeżeli nasz Shortcode wymaga dodatkowego kod CSS lub JavaScript należy zdefiniować go w plikach <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong>, gdzie <strong>*</strong> oznacza nazwę grupy do której przypisaliśmy dany Shortcode.\r\n\r\nJest bardzo ważne, by umieścić elementy kodu CSS i JavaScript w odpowiednim pliku, gdyż umożliwi to optymalizację kodu całego szablonu w momencie wyłączenia z użytkowania danej grupy kodów Shortcodes.','Typography button','','inherit','open','open','','386-revision-3','','','2012-07-25 12:52:08','2012-07-25 12:52:08','',386,'{$page_url}/uncategorized/386-revision-3/',0,'revision','',0),(486,1,'2012-07-25 13:14:17','2012-07-25 13:14:17','For simplifying shortcodes use available in templates based on GavernWP framework, a button for template\'s typography has been implemented which is available in a posts editor:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\r\n\r\nBy clicking this button, you will see a list of available typography elements:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content\r\n\r\nDla większości elementów można wybrać wersję z określoną stylistyką. Po wybraniu konkretnego stylu pojawi się kod shortcode, który zostanie zamieniony w treści wpisu przez skrypty na konkretną strukturę ostylowaną w dany sposób.\r\n\r\nNależy zwrócić uwagę na fakt, że dodanie nowego kodu Shortcode wymaga trzech operacji:\r\n<ul>\r\n	<li>dodania wpisu w pliku konfiguracyjnym shortcodes.js</li>\r\n	<li>dodania kodu PHP obsługującego dany shortcode</li>\r\n	<li>dodania opcjonalnego kodu CSS i JavaScript (o ile wymaga tego dany shortcode)</li>\r\n</ul>\r\nPlik <strong>shortcodes.js</strong> w katalogu <strong>config</strong> zawiera wpisy, które są zamieniane na strukturę menu widocznego po kliknięciu w przycisk typografii - zawiera on zmienną <strong>$GAVERNWP_SHORTCODES</strong>, która jest tablicą zawierającą obiekty reprezentujące elementy menu wyboru. Każdy obiekt posiada trzy właściwości: <strong>title</strong>, <strong>code</strong> oraz <strong>submenu</strong>. Omówmy tą strukturę na przykładzie pozycji <strong>Highlight</strong>:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - zawiera nazwę pozycji menu wyświetlaną przez skrypt</li>\r\n	<li><strong>code</strong> - jest to kod shortcode, który zostanie dodany do wpisu w momencie kliknięcia danej pozycji menu - należy pamiętać, że nie wszystkie pozycje menu na pierwszym poziomie posiadają wartość w tym polu - jeżeli jest ona pustym ciągiem znaków oznacza to dla skryptu, że kliknięcie w daną pozycję menu ma nie wywoływać żadnej akcji.</li>\r\n	<li><strong>submenu</strong> - jest to tablica podmenu danej pozycji menu. Każda pozycja podmenu jest zbudowana tak samo jak pozycje menu na pierwszym poziomie, z tą różnicą, że podmenu nie może mieć kolejnego podmenu, zatem nie dodajemy w obiekcie podmenu właściwości <strong>submenu</strong>.</li>\r\n</ul>\r\nPrzyjmijmy, że dodaliśmy już nasz shortcode do przycisku typografii korzystając z pliku shortcodes.js. Pozostaje nam kwestia obsługi naszego shortcode po stronie szablonu.\r\n\r\nW tym celu należy otworzyć plik<strong> gavern/helpers/helpers.shortcodes.php</strong>.\r\n\r\nPlik ten jest podzielony na trzy główne sekcje zaczynające się od linijek podobnych do:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nJest to instrukcja warunkowa IF związana z daną grupą elementów typografii. Gavern zawiera trzy takie grupy:\r\n<ul>\r\n	<li>elementy typografii - funkcje z nią związane mają prefiks <strong>gavern_ts_</strong> w nazwie</li>\r\n	<li>elementy interaktywne - funkcje z nią związane mają prefiks <strong>gavern_ies_</strong> w nazwie</li>\r\n	<li>elementy chrakterystyczne dla danego szablonu - funkcje z nią związane mają prefiks <strong>gavern_tss_</strong> w nazwie</li>\r\n</ul>\r\nNowe elementy typografii zalecamy dodawać w tej ostatniej grupie - w szablonie Meet GavernWPdomyślnie jest ona pusta. Zalecamy pamiętać o zastosowaniu stosownego dla danej grupy prefiksu w nazwie funkcji np. w wypadku trzeciej grupy będzie to <strong>gavern_tss_</strong>. Sam kod danego Shortcode należy tworzyć według wytycznych opisanych w <a href=\"http://codex.wordpress.org/Shortcode_API\">Shortcode API</a>.\r\n\r\nOstatni krok jest opcjonalny i zależny od typu naszego Shortcode. Jeżeli nasz Shortcode wymaga dodatkowego kod CSS lub JavaScript należy zdefiniować go w plikach <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong>, gdzie <strong>*</strong> oznacza nazwę grupy do której przypisaliśmy dany Shortcode.\r\n\r\nJest bardzo ważne, by umieścić elementy kodu CSS i JavaScript w odpowiednim pliku, gdyż umożliwi to optymalizację kodu całego szablonu w momencie wyłączenia z użytkowania danej grupy kodów Shortcodes.','Typography button','','inherit','open','open','','386-revision-4','','','2012-07-25 13:14:17','2012-07-25 13:14:17','',386,'{$page_url}/uncategorized/386-revision-4/',0,'revision','',0),(487,1,'2012-07-23 13:32:29','2012-07-23 13:32:29','GavernWP has basic support for a new option available in Wordpress 3.4 - an options editor with templates preview. posiada podstawowe wsparcie dla nowej opcji dostępnej w Wordpress 3.4 - edytora opcji z podglądem szablonu. Obecnie w live editor zaimplementowano najważniejsze opcje związane ze stylem szablonu i jego układem.\r\n\r\nAby można było łatwiej dostać się do tego edytora umieściliśmy w górnej części opcji szablonu bezpośredni link do edytora:\r\n\r\n[screenshot]\r\n\r\nWszystkie opcje zawarte w tym edytorze dostępne są również poprzez tradycyjny panel opcji szablonu.\r\n\r\nAby ułatwić dodawanie własnych opcji do live editor cały kod generujący opcje umieszczono w oddzielnym pliku <strong>gavern/helpers/helpers.customizer.php</strong>.\r\n\r\nNależy pamiętać, że wszystkie opcje i ustawienia z live editor są przechowywane w tym samym miejscu co ich odpowiedniki z panelu admistracyjnego zatem zmiana ustawień z użyciem live editor pociąga za sobą zmiany w zwykłym panelu opcji. Dlatego też zalecane jest nie uruchamianie w tym samym momencie tradycyjnego panelu administracyjnego szablonu i live editor, gdyż może zaistnieć sytuacja gdy zapis opcji w obu miejscach naraz o różnych wartościach dla tego samego parametru da rezultat inny niż oczekiwany.','Theme live editor','','inherit','open','open','','380-revision-3','','','2012-07-23 13:32:29','2012-07-23 13:32:29','',380,'{$page_url}/uncategorized/380-revision-3/',0,'revision','',0),(488,1,'2012-07-26 08:40:36','2012-07-26 08:40:36','GavernWP has basic support for a new option available in Wordpress 3.4 - an options editor with templates preview. posiada podstawowe wsparcie dla nowej opcji dostępnej w Wordpress 3.4 - edytora opcji z podglądem szablonu. Obecnie w live editor zaimplementowano najważniejsze opcje związane ze stylem szablonu i jego układem.\n\nAby można było łatwiej dostać się do tego edytora umieściliśmy w górnej części opcji szablonu bezpośredni link do edytora:\n\n[screenshot]\n\nWszystkie opcje zawarte w tym edytorze dostępne są również poprzez tradycyjny panel opcji szablonu.\n\nAby ułatwić dodawanie własnych opcji do live editor cały kod generujący opcje umieszczono w oddzielnym pliku <strong>gavern/helpers/helpers.customizer.php</strong>.\n\nNależy pamiętać, że wszystkie opcje i ustawienia z live editor są przechowywane w tym samym miejscu co ich odpowiedniki z panelu admistracyjnego zatem zmiana ustawień z użyciem live editor pociąga za sobą zmiany w zwykłym panelu opcji. Dlatego też zalecane jest nie uruchamianie w tym samym momencie tradycyjnego panelu administracyjnego szablonu i live editor, gdyż może zaistnieć sytuacja gdy zapis opcji w obu miejscach naraz o różnych wartościach dla tego samego parametru da rezultat inny niż oczekiwany.','Theme live editor','','inherit','open','open','','380-revision-4','','','2012-07-26 08:40:36','2012-07-26 08:40:36','',380,'{$page_url}/uncategorized/380-revision-4/',0,'revision','',0),(490,1,'2012-07-14 08:04:05','2012-07-14 08:04:05','Sekcja ustawień zaawansowanych zawiera ustawienia, które są związane z wieloma różnymi aspektami działania frameworka GavernWP:\r\n\r\n[screenshot]\r\n<ul>\r\n	<li><strong>Widget rules</strong> pozwala wyłączyć ten mechanizm. Zalecamy wyłączenie tej opcji wtedy, kiedy nie potrzebujemy korzystać z widżetów widocznych tylko na wybranych podstronach. Należy zauważyć, że pozwoli to lekko zoptymalizować szybkość działania strony, gdyż operacje sprawdzania reguł dla każdego widżetu nie będą wykonywane.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - włącza metatag wymuszający użycie plugina <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> na przeglądarkach Internet Explorer o ile jest on zainstalowany.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - aktywuje parsowanie emotikon do postaci graficznej w widżetach.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - aktywuje parsowanie <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> w widżetach.</li>\r\n	<li><strong>Use Thickbox</strong> - pozwala na włączenie użycia skryptu Thickbox do prezentacji grafik zawartych w postach.</li>\r\n	<li><strong>Value for the $content_width variable</strong> - zmienna <strong>$content_width</strong> jest wykorzystywana przy tworzeniu miniatur grafik dla postów, dlatego należy ją zdefiniować jako odpowiednią wartość - polecamy podać wartość nie większą niż maksymalna szerokość strony.</li>\r\n	<li><strong>Use the override.css file</strong> - dzięki włączeniu tej opcji na końcu listy plików CSS pojawi się plik <strong>override.css</strong>, który pozwala na łatwe nadpisywanie reguł CSS szablonu bez ingerencji w istniejący kod CSS.</li>\r\n	<li><strong>Enable support for Open Search</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a>.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph</a> - po włączeniu tej opcji na stronie edycji postów pojawi się dodatkowy metabox: [screenshot]</li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-2','','','2012-07-14 08:04:05','2012-07-14 08:04:05','',422,'{$page_url}/uncategorized/422-revision-2/',0,'revision','',0),(493,1,'2012-07-26 13:36:36','2012-07-26 13:36:36','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n[screenshot]\r\n<ul>\r\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - it switches on a metatag forcing use of  <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> plugin on Internet Explorer browsers if it is installed.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - it activates parsing emoticons to a graphic form in widgets.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - it activates parsing of <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> in widgets.</li>\r\n	<li><strong>Use Thickbox</strong> - it allows to switch on Thickbox  script for presenting images included in posts.</li>\r\n	<li><strong>Value for the $content_width variable</strong> -  <strong>$content_width</strong> variable is used while creating thumbnails of images for posts, that\'s why it has to be defined as an appropriate value - we resommend to set the value not bigger than the maximal page\'s width. jest wykorzystywana przy tworzeniu miniatur grafik dla postów, dlatego należy ją zdefiniować jako odpowiednią wartość - polecamy podać wartość nie większą niż maksymalna szerokość strony.</li>\r\n	<li><strong>Use the override.css file</strong> - dzięki włączeniu tej opcji na końcu listy plików CSS pojawi się plik <strong>override.css</strong>, który pozwala na łatwe nadpisywanie reguł CSS szablonu bez ingerencji w istniejący kod CSS.</li>\r\n	<li><strong>Enable support for Open Search</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a>.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph</a> - po włączeniu tej opcji na stronie edycji postów pojawi się dodatkowy metabox: [screenshot]</li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-5','','','2012-07-26 13:36:36','2012-07-26 13:36:36','',422,'{$page_url}/uncategorized/422-revision-5/',0,'revision','',0),(492,1,'2012-07-26 13:27:46','2012-07-26 13:27:46','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n[screenshot]\r\n<ul>\r\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - włącza metatag wymuszający użycie plugina <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> na przeglądarkach Internet Explorer o ile jest on zainstalowany.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - aktywuje parsowanie emotikon do postaci graficznej w widżetach.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - aktywuje parsowanie <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> w widżetach.</li>\r\n	<li><strong>Use Thickbox</strong> - pozwala na włączenie użycia skryptu Thickbox do prezentacji grafik zawartych w postach.</li>\r\n	<li><strong>Value for the $content_width variable</strong> - zmienna <strong>$content_width</strong> jest wykorzystywana przy tworzeniu miniatur grafik dla postów, dlatego należy ją zdefiniować jako odpowiednią wartość - polecamy podać wartość nie większą niż maksymalna szerokość strony.</li>\r\n	<li><strong>Use the override.css file</strong> - dzięki włączeniu tej opcji na końcu listy plików CSS pojawi się plik <strong>override.css</strong>, który pozwala na łatwe nadpisywanie reguł CSS szablonu bez ingerencji w istniejący kod CSS.</li>\r\n	<li><strong>Enable support for Open Search</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a>.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph</a> - po włączeniu tej opcji na stronie edycji postów pojawi się dodatkowy metabox: [screenshot]</li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-4','','','2012-07-26 13:27:46','2012-07-26 13:27:46','',422,'{$page_url}/uncategorized/422-revision-4/',0,'revision','',0),(491,1,'2012-07-26 13:21:23','2012-07-26 13:21:23','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n[screenshot]\r\n<ul>\r\n	<li><strong>Widget rules</strong> pozwala wyłączyć ten mechanizm. Zalecamy wyłączenie tej opcji wtedy, kiedy nie potrzebujemy korzystać z widżetów widocznych tylko na wybranych podstronach. Należy zauważyć, że pozwoli to lekko zoptymalizować szybkość działania strony, gdyż operacje sprawdzania reguł dla każdego widżetu nie będą wykonywane.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - włącza metatag wymuszający użycie plugina <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> na przeglądarkach Internet Explorer o ile jest on zainstalowany.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - aktywuje parsowanie emotikon do postaci graficznej w widżetach.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - aktywuje parsowanie <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> w widżetach.</li>\r\n	<li><strong>Use Thickbox</strong> - pozwala na włączenie użycia skryptu Thickbox do prezentacji grafik zawartych w postach.</li>\r\n	<li><strong>Value for the $content_width variable</strong> - zmienna <strong>$content_width</strong> jest wykorzystywana przy tworzeniu miniatur grafik dla postów, dlatego należy ją zdefiniować jako odpowiednią wartość - polecamy podać wartość nie większą niż maksymalna szerokość strony.</li>\r\n	<li><strong>Use the override.css file</strong> - dzięki włączeniu tej opcji na końcu listy plików CSS pojawi się plik <strong>override.css</strong>, który pozwala na łatwe nadpisywanie reguł CSS szablonu bez ingerencji w istniejący kod CSS.</li>\r\n	<li><strong>Enable support for Open Search</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a>.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph</a> - po włączeniu tej opcji na stronie edycji postów pojawi się dodatkowy metabox: [screenshot]</li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-3','','','2012-07-26 13:21:23','2012-07-26 13:21:23','',422,'{$page_url}/uncategorized/422-revision-3/',0,'revision','',0),(494,1,'2012-07-27 08:06:37','2012-07-27 08:06:37','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n[screenshot]\r\n<ul>\r\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - it switches on a metatag forcing use of  <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> plugin on Internet Explorer browsers if it is installed.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - it activates parsing emoticons to a graphic form in widgets.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - it activates parsing of <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> in widgets.</li>\r\n	<li><strong>Use Thickbox</strong> - it allows to switch on Thickbox  script for presenting images included in posts.</li>\r\n	<li><strong>Value for the $content_width variable</strong> -  <strong>$content_width</strong> variable is used while creating thumbnails of images for posts, that\'s why it has to be defined as an appropriate value - we recommend to set the value not bigger than the max. page\'s width.</li>\r\n	<li><strong>Use the override.css file</strong> - thanks to switching on this option, an <strong>override.css</strong> file will appear at the end of the list of CSS files which allows to overwrite template\'s CSS rules easily without interference in existing CSS code.</li>\r\n	<li><strong>Enable support for Open Search</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a>.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph</a> - po włączeniu tej opcji na stronie edycji postów pojawi się dodatkowy metabox: [screenshot]</li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-6','','','2012-07-27 08:06:37','2012-07-27 08:06:37','',422,'{$page_url}/uncategorized/422-revision-6/',0,'revision','',0),(495,1,'2012-07-27 08:40:27','2012-07-27 08:40:27','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n[screenshot]\r\n<ul>\r\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - it switches on a metatag forcing use of  <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> plugin on Internet Explorer browsers if it is installed.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - it activates parsing emoticons to a graphic form in widgets.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - it activates parsing of <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> in widgets.</li>\r\n	<li><strong>Use Thickbox</strong> - it allows to switch on Thickbox  script for presenting images included in posts.</li>\r\n	<li><strong>Value for the $content_width variable</strong> -  <strong>$content_width</strong> variable is used while creating thumbnails of images for posts, that\'s why it has to be defined as an appropriate value - we recommend to set the value not bigger than the max. page\'s width.</li>\r\n	<li><strong>Use the override.css file</strong> - thanks to switching on this option, an <strong>override.css</strong> file will appear at the end of the list of CSS files which allows to overwrite template\'s CSS rules easily without interference in existing CSS code.</li>\r\n	<li><strong>Enable support for Open Search</strong> - it allows to switch on support for  <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> technology.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - pozwala na włączenie wsparcia dla technologii <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph</a> - po włączeniu tej opcji na stronie edycji postów pojawi się dodatkowy metabox: [screenshot]</li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-7','','','2012-07-27 08:40:27','2012-07-27 08:40:27','',422,'{$page_url}/uncategorized/422-revision-7/',0,'revision','',0),(497,1,'2012-07-27 08:50:49','2012-07-27 08:50:49','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\n&nbsp;\r\n\r\nPliki opcji znajdują się w katalogu gavern/options w folderze związanym z aktualnie używanym językiem. W katalogu znajdziemy dwie główne grupy plików:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - zawiera on listę sekcji widocznych w panelu administracyjnym po prawej stronie: [screensthot] każda sekcja jest opisana tablicą postaci [code][\"Basic\", \"options.basic\", \"enabled\"][/code] pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-3','','','2012-07-27 08:50:49','2012-07-27 08:50:49','',427,'{$page_url}/uncategorized/427-revision-3/',0,'revision','',0),(496,1,'2012-07-14 09:17:02','2012-07-14 09:17:02','W GavernWP modyfikacja zawartości panelu administracyjnego jest bardzo łatwa - opiera się na plikach JSON, zawierających listę opcji. Dzięki temu tworzenie nowych opcji dostępnych w panelu administracyjnym jest bardzo łatwe.\r\n\r\nPliki opcji znajdują się w katalogu gavern/options w folderze związanym z aktualnie używanym językiem. W katalogu znajdziemy dwie główne grupy plików:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - zawiera on listę sekcji widocznych w panelu administracyjnym po prawej stronie: [screensthot] każda sekcja jest opisana tablicą postaci [code][\"Basic\", \"options.basic\", \"enabled\"][/code] pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-2','','','2012-07-14 09:17:02','2012-07-14 09:17:02','',427,'{$page_url}/uncategorized/427-revision-2/',0,'revision','',0),(501,1,'2012-07-27 11:02:20','2012-07-27 11:02:20','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - it includes a list of sections visible on the right side of an administration panel:  [screensthot] each seckażda sekcja jest opisana tablicą postaci [code][\"Basic\", \"options.basic\", \"enabled\"][/code] pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-7','','','2012-07-27 11:02:20','2012-07-27 11:02:20','',427,'{$page_url}/uncategorized/427-revision-7/',0,'revision','',0),(499,1,'2012-07-27 10:39:20','2012-07-27 10:39:20','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - it includes a list of sections visible on the right side of an administrazawiera on listę sekcji widocznych w panelu administracyjnym po prawej stronie: [screensthot] każda sekcja jest opisana tablicą postaci [code][\"Basic\", \"options.basic\", \"enabled\"][/code] pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-5','','','2012-07-27 10:39:20','2012-07-27 10:39:20','',427,'{$page_url}/uncategorized/427-revision-5/',0,'revision','',0),(498,1,'2012-07-27 09:00:40','2012-07-27 09:00:40','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main\r\n\r\nPliki opcji znajdują się w katalogu gavern/options w folderze związanym z aktualnie używanym językiem. W katalogu znajdziemy dwie główne grupy plików:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - zawiera on listę sekcji widocznych w panelu administracyjnym po prawej stronie: [screensthot] każda sekcja jest opisana tablicą postaci [code][\"Basic\", \"options.basic\", \"enabled\"][/code] pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-4','','','2012-07-27 09:00:40','2012-07-27 09:00:40','',427,'{$page_url}/uncategorized/427-revision-4/',0,'revision','',0),(502,1,'2012-07-27 11:16:46','2012-07-27 11:16:46','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li>plik <strong>tabs.json</strong> - it includes a list of sections visible on the right side of an administration panel:  [screensthot] each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element pierwszy element tablicy to nazwa sekcji wyświetlana w panelu, drugi element to nazwa pliku bez rozszerzenia \"<strong>.json</strong>\", którzy przechowuje listę dostępnych w danej sekcji opcji, a trzecia wartość odnosi się do tego czy dana sekcja jest widoczna w panelu. W tym przypadku zostanie w panelu wyświetlony tab <strong>Basic</strong> na podstawie zawartości pliku <strong>options.basic.json</strong>.</li>\r\n	<li>pliki <strong>options.*.json</strong> - zawierają one listę opcji dostępnych w danej sekcji - ich nazwy są ściśle powiązane z zawartością pliku <strong>tabs.json</strong>.</li>\r\n</ul>\r\nKażdy plik options.*.json zawiera w przechowywanym obiekcie trzy główne pola:\r\n<ul>\r\n	<li><strong>groupname</strong> - jest to tytuł sekcji</li>\r\n	<li><strong>groupdesc</strong> - określa opis sekcji wyświetlany bezpośrednio pod tytułem sekcji</li>\r\n	<li><strong>fields</strong> - zawiera tablicę obiektów pól wyświetlanych pod tytułem i opisem sekcji</li>\r\n</ul>\r\nKażde pole definiowane jest przez obiekt zawierający następujące pola:\r\n<ul>\r\n	<li><strong>name</strong> - określa nazwę opcji jaka będzie związana z danym polem. Do nazwy opcji automatycznie jest dodawany prefiks będący nazwą szablonu (przechowywany w zmiennej globalnej <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- określa typ pola. Standardowe rodzaje pól to:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - pole zawierające tekst opisu - nie jest stosowane do przechowywania żadnej wartości opcji</li>\r\n	<li><strong>Text</strong> - najprostsze pole tekstowe pozwalające na wprowadzanie krótkich wartości tekstowych</li>\r\n	<li><strong>Textarea</strong> - pole tekstowe służące do wprowadzania większej ilości wartości tekstowych</li>\r\n	<li><strong>Select</strong> - pole wyboru</li>\r\n	<li><strong>Switcher</strong> - pole wyboru ograniczone do dwóch opcji: \"Enabled\" i \"Disabled\"</li>\r\n	<li><strong>Media</strong> - pole pozwalające na wybór grafiki</li>\r\n	<li><strong>WidthHeight</strong> - pole pozwalające na określenie dwóch wartości definiujących szerokość i wysokość (najczęściej wykorzystywane wraz z polem Media).</li>\r\n</ul>\r\nPola te zdefiniowane są w pliku <strong>gavern/form_elements/standard.php</strong> a ich kod powstał na bazie dziedziczenia z klasy <strong>GKFormInput</strong>. Warto pamiętać, że pliki związane z opcjami parsowane są przez plik <strong>gavern/form.parser.php</strong>.Dodatkowo w katalogu <strong>gavern/form_elements</strong> można tworzyć własne typy pól. W GavernWP standardowo zawarliśmy następujące rodzaje pól:\r\n<ul>\r\n	<li><strong>Fonts</strong> - jest to pole generujące opcje związane z wyborem fontów - zastosowane w sekcji <strong>Fonts</strong>.</li>\r\n	<li><strong>Menu</strong> - pole pozwalające wygenerować opcje związane z menu strony - zastosowane w sekcji Navigation.</li>\r\n	<li><strong>TemplateStyle</strong> - pole pozwalające wybrać styl strony - zastosowane na poczatku sekcji <strong>Basic</strong>.</li>\r\n</ul>\r\nOpis tworzenia własnych rodzajów pól szerzej opiszemy w dalszej części tego artykułu.</li>\r\n	<li><strong>label</strong> - określa tekst etykiety widocznej obok pola</li>\r\n	<li><strong>tooltip</strong> - (opcjonalne) pozwala określić treść tooltipa, który pojawi się po najechaniu na etykietę danego pola.</li>\r\n	<li><strong>default</strong> - domyślna wartość danego pola.</li>\r\n	<li><strong>class</strong> - (opcjonalne) pole to pozwala określić klasy CSS dodawane do elementu podczas jego generowania (o ile taką funkcjonalność obsługuje kod pola)</li>\r\n	<li><strong>format</strong> - (opcjonalne) pole określające w postaci wyrażenia regularnego pożądaną zawartosć pola. Przykładowo wartość: [code][a-zA-Z]{2,5}[/code] określa, że dane pole będzie poprawnie wypełnione tylko wtedy, gdy użytkownik poda jako jego wartość ciąg liter dużych lub małych o długości 2 do 5 znaków</li>\r\n	<li><strong>required</strong> - (opcjonalne) pozwala określić czy wypełnienie danego pola jest wymagane</li>\r\n	<li><strong>visibility</strong> - (opcjonalne) określa kiedy dane pole jest widoczne. Reguły widoczności rozdzielane są przecinkiem i tworzone są w formacie <strong>FIELD_NAME=VALUE</strong> - w wypadku kilku reguł widoczności są one traktowane jako połączone operatorem <strong>AND</strong>. Wartość <strong>FIELD_NAME</strong> to nazwa pola bez prefiksu z nazwą szablonu. Przykładowo zapis: [code]option1=10,option2=20[/code] sprawi, że dane pole będzie widoczne dopiero wtedy gdy opcja o nazwie <strong>option1</strong> zostanie ustawiona na wartość <strong>10</strong> i jednocześnie opcja <strong>option2</strong> będzie mieć wartość <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (opcjonalne) pole to jest wykorzystywane do przechowywania dodatkowych wartości np. w wypadku pola typu <strong>Select</strong> do przechowywania nazw i wartości opcji. Jest to pole bardzo przydatne w wypadku tworzenia bardziej rozbudowanych pól, które mogą wymagać dodatkowych opcji konfiguracyjnych.</li>\r\n</ul>\r\nPo dodaniu nowej opcji należy pamiętać o obsłużeniu jej w samym szablonie. Wartość opcji pobieramy używając funkcji get_option według schematu:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\ngdzie <strong>OPTION_NAME</strong> to nazwa opcji z pliku JSON a <strong>DEFAULT_VALUE</strong> to wartość domyślna opcji, która zostanie wykorzystana w momencie kiedy użytkownik sam nie określił jeszcze wartości danej opcji. Co ważne przed <strong>OPTION_NAME</strong> znajduje się znak \"<strong>_</strong>\", którego nie wolno pominąć. Prefiks z nazwą szablonu jest dodawany w celu rozróżnienia wartości opcji różnych szablonów.\r\n<h3>Tworzenie własnych pól opcji</h3>\r\nPrzy tworzeniu nowego rodzaju pola należy zaczać od stworzenia katalogu zgodnego z nazwą pola np. <strong>CustomField</strong> w katalogu <strong>gavern/form_elements</strong>. Następnie w katalogu tym należy stworzyć plik config.json i wypełnić go według schematu:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\nPola <strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> muszą zawierać konkretne wartości, natomiast pola <strong>js</strong> i <strong>css</strong> są opcjonalne - pozwalają określić czy dane pole ma wykorzystywać dodatkowy kod CSS i JavaScript (wtedy należy jako ich wartość podać nazwę plików z katalogu pola). Należy też stworzyć plik <strong>customfield.php</strong> zawierający klasę <strong>GKFormInputCustomField</strong> dziedziczącą po klasie <strong>GKFormInput</strong>.\r\n\r\nNależy też zadbać o to by plik <strong>customfield.php</strong> zawierał na początku kod zabezpieczający:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nKażda klasa pola powinna zawierać co namniej jedną publiczną metodę - <strong>output</strong> nie pobierającą żadnych dodatkowych argumentów. Metoda ta musi zwracać kod HTML danego pola. Właściwości pola z pliku JSON są dostępne jako pola klasy np. właściwość <strong>required</strong> dostępna jest jako:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nDrugą ważną publiczną metodą każdej klasy pola formularza jest metoda <strong>getValue</strong>, która pobiera jeden argument - <strong>$default</strong>. Jej wykorzystanie jest opcjonalne i przydatne tylko wtedy, kiedy wartość danego pola korzysta z więcej niż jednego pola w bazie danych. Wtedy warto tą metodę nadpisać - jako przykład polecamy lekturę kodu standardowego pola <strong>WidthHeight</strong>, gdzie nadpisanie metody getValue zostało wykorzystane do przechowywania wartości dwóch pól formularza w obrębie jednego głównego pola tworzonego przez klasę <strong>GKInputFormWidthHeight</strong>.\r\n\r\nPozostałe metody klasy powinny być tworzone według uznania autora danego pola formularza.','Option files','','inherit','open','open','','427-revision-8','','','2012-07-27 11:16:46','2012-07-27 11:16:46','',427,'{$page_url}/uncategorized/427-revision-8/',0,'revision','',0),(506,1,'2012-07-28 13:35:52','2012-07-28 13:35:52','This page presents widget styles available in this theme.\r\n\r\nWe have also included a really useful mechanism - you can put the icon in the header using following syntax:\r\n\r\n[code][icon-name] Header text[/code]\r\n\r\nWhere icon-name is one of <a title=\"Available classes\" href=\"http://twitter.github.com/bootstrap/base-css.html#icons\" target=\"_blank\">available classes</a>.','Widget Styles','','publish','closed','closed','','widget-styles','','','2012-12-15 10:40:41','2012-12-15 10:40:41','',0,'{$page_url}/?page_id=506',0,'page','',0),(508,1,'2012-07-28 13:36:16','2012-07-28 13:36:16',' ','','','publish','open','open','','508','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=508',19,'nav_menu_item','',0),(509,1,'2012-07-28 13:47:34','2012-07-28 13:47:34','Widget areas available in the Meet GavernWP theme:\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\"><img class=\"aligncenter size-full wp-image-510\" title=\"Widget areas\" src=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\" alt=\"Widget areas\" width=\"752\" height=\"692\" /></a>','Widget areas','','publish','closed','closed','','widget-areas','','','2012-08-12 17:25:35','2012-08-12 17:25:35','',0,'{$page_url}/?page_id=509',0,'page','',0),(510,1,'2012-07-28 13:45:30','2012-07-28 13:45:30','','Widget areas','','inherit','open','open','','widget_areas','','','2012-07-28 13:45:30','2012-07-28 13:45:30','',509,'{$page_url}/wp-content/uploads/2012/07/widget_areas.png',0,'attachment','image/png',0),(511,1,'2012-07-28 13:46:25','2012-07-28 13:46:25','Widget areas available in the Meet GavernWP template:\n<a href=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\"><img class=\"aligncenter size-full wp-image-510\" title=\"Widget areas\" src=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\" alt=\"Widget areas\" width=\"752\" height=\"646\" /></a>','Widget areas','','inherit','open','open','','509-revision','','','2012-07-28 13:46:25','2012-07-28 13:46:25','',509,'{$page_url}/uncategorized/509-revision/',0,'revision','',0),(512,1,'2012-07-28 13:51:41','2012-07-28 13:51:41','Widget areas available in the Meet GavernWP template:\n<a href=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\"><img class=\"aligncenter size-full wp-image-510\" title=\"Widget areas\" src=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\" alt=\"Widget areas\" width=\"752\" height=\"646\" /></a>','Widget areas','','inherit','open','open','','509-autosave','','','2012-07-28 13:51:41','2012-07-28 13:51:41','',509,'{$page_url}/uncategorized/509-autosave/',0,'revision','',0),(513,1,'2012-07-28 13:49:21','2012-07-28 13:49:21',' ','','','publish','open','open','','513','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=513',20,'nav_menu_item','',0),(515,1,'2012-07-28 13:47:34','2012-07-28 13:47:34','Widget areas available in the Meet GavernWP template:\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\"><img class=\"aligncenter size-full wp-image-510\" title=\"Widget areas\" src=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\" alt=\"Widget areas\" width=\"752\" height=\"646\" /></a>','Widget areas','','inherit','open','open','','509-revision-2','','','2012-07-28 13:47:34','2012-07-28 13:47:34','',509,'{$page_url}/uncategorized/509-revision-2/',0,'revision','',0),(572,1,'2012-08-10 09:51:51','2012-08-10 09:51:51','There are three key places connected with branding in a template based on GavernWP framework:\r\n<ul>\r\n	<li>page\'s logo</li>\r\n	<li>page\'s footer</li>\r\n	<li>framework\'s logo under a page\'s footer</li>\r\n</ul>\r\nThere are the following administration panel options responsible for these elements:\r\n\r\n[screenshot]\r\n\r\nIn the case of a framework\'s logo, it is only possible to switch it on/off.\r\n\r\nFooter content is defined in <strong>Footer content</strong> option. It will be displayed at the bottom of the page, usually on the right side.\r\n\r\nThe majority of parameters are connected with a page\'s logo. The first step in a logo configuration is to choose a logo type; there are the following logo types available:\r\n<ul>\r\n	<li><strong>Defined in the CSS code</strong> - a logo is defined template\'s CSS style as an element having <strong>cssLogo</strong> class. In this case, except CSS code modification, no other settings changes are needed.</li>\r\n	<li><strong>Image logo</strong> - after choosing this option, some additional options will appear:  [screenshot]. You have to choose an image logo and specify its sizes.</li>\r\n	<li><strong>Text logo</strong> - likewise in the previous option, some additional options appear: [screenshot]. <strong>Template logo text </strong>option specifies whether main logo text and the signature below it will be taken from Wordpress settings (<strong>from Wordpress settings</strong>) or will be specified by a user (<strong>Own</strong>). In the case of choosing the second option, two additional fields to fill in will appear: [screenshot].</li>\r\n	<li><strong>None</strong> - in this case, a logo will not be displayed.</li>\r\n</ul>\r\n<div><strong>Note</strong>: None option is useful when you want to define a logo code in template\'s code yourself - then, it is enough to add your own code to an appropriate file (usually it is: <strong>layouts/header.php</strong>).</div>\r\n&nbsp;','Template branding settings','','inherit','open','open','','394-revision-6','','','2012-08-10 09:51:51','2012-08-10 09:51:51','',394,'{$page_url}/uncategorized/394-revision-6/',0,'revision','',0),(516,1,'2012-07-12 13:05:23','2012-07-12 13:05:23','W szablonie budowanym w oparciu o framework GavernWP istnieją trzy kluczowe miejsca związane z brandingiem:\r\n<ul>\r\n	<li>logo strony</li>\r\n	<li>stopka strony</li>\r\n	<li>logo frameworka pod stopką strony</li>\r\n</ul>\r\nZa elementy te odpowiadają następujące opcje panelu administracyjnego:\r\n\r\n[screenshot]\r\n\r\nW wypadku loga frameworka można je jedynie włączyć lub wyłączyć.\r\n\r\nTreść stopki strony definiujemy w opcji <strong>Footer content</strong>. Wyświetlona ona zostanie w dolej części strony najczęściej po prawej stronie witryny.\r\n\r\nNajwięcej parametrów związanych jest z logiem strony. Pierwszy krok w konfiguracji logo strony to wybór typu loga, dostępne są następujące rodzaje logo:\r\n<ul>\r\n	<li><strong>Defined in the CSS code</strong> - logo zdefiniowane jest wtedy w stylu CSS szablonu jako element posiadający klasę <strong>cssLogo</strong>. W tym wypadku poza modyfikacją kodu CSS żadne inne zmiany ustawień nie są potrzebne.</li>\r\n	<li><strong>Image logo</strong> - po wybraniu tej opcji pojawią się dodatkowe opcje: [screenshot]. Należy wybrać grafikę logo oraz określić jej rozmiary.</li>\r\n	<li><strong>Text logo</strong> - podobnie jak w wypadku poprzedniej opcji, także tutaj pojawią się dodatkowe opcje: [screenshot]. Opcja <strong>Template logo text</strong> określa czy tekst główny logo jak i podpis pod nim będą brane z ustawień Wordpress (<strong>from Wordpress settings</strong>) czy też będą określone  przez użytkownika (<strong>Own</strong>). W wypadku wybrania tej drugiej opcji pojawią się kolejne dwa pola, które trzeba wypełnić: [screenshot].</li>\r\n	<li><strong>None</strong> - w tym wypadku logo w ogóle nie zostanie wyświetlone.</li>\r\n</ul>\r\n<div><strong>Wskazówka:</strong> opcja <strong>None</strong> jest przydatna w sytuacji gdy sami chcemy w kodzie szablonu zdefiniować kod logo - wystarczy wtedy dodać własny kod do odpowiedniego pliku (najczęściej <strong>layouts/header.php</strong>).</div>\r\n&nbsp;','Template branding settings','','inherit','open','open','','394-revision-2','','','2012-07-12 13:05:23','2012-07-12 13:05:23','',394,'{$page_url}/uncategorized/394-revision-2/',0,'revision','',0),(517,1,'2012-07-30 08:12:10','2012-07-30 08:12:10','W szablonie budowanym w oparciu o framework GavernWP istnieją trzy kluczowe miejsca związane z brandingiem:\r\n<ul>\r\n	<li>logo strony</li>\r\n	<li>stopka strony</li>\r\n	<li>logo frameworka pod stopką strony</li>\r\n</ul>\r\nZa elementy te odpowiadają następujące opcje panelu administracyjnego:\r\n\r\n[screenshot]\r\n\r\nW wypadku loga frameworka można je jedynie włączyć lub wyłączyć.\r\n\r\nTreść stopki strony definiujemy w opcji <strong>Footer content</strong>. Wyświetlona ona zostanie w dolej części strony najczęściej po prawej stronie witryny.\r\n\r\nNajwięcej parametrów związanych jest z logiem strony. Pierwszy krok w konfiguracji logo strony to wybór typu loga, dostępne są następujące rodzaje logo:\r\n<ul>\r\n	<li><strong>Defined in the CSS code</strong> - logo zdefiniowane jest wtedy w stylu CSS szablonu jako element posiadający klasę <strong>cssLogo</strong>. W tym wypadku poza modyfikacją kodu CSS żadne inne zmiany ustawień nie są potrzebne.</li>\r\n	<li><strong>Image logo</strong> - po wybraniu tej opcji pojawią się dodatkowe opcje: [screenshot]. Należy wybrać grafikę logo oraz określić jej rozmiary.</li>\r\n	<li><strong>Text logo</strong> - podobnie jak w wypadku poprzedniej opcji, także tutaj pojawią się dodatkowe opcje: [screenshot]. Opcja <strong>Template logo text</strong> określa czy tekst główny logo jak i podpis pod nim będą brane z ustawień Wordpress (<strong>from Wordpress settings</strong>) czy też będą określone  przez użytkownika (<strong>Own</strong>). W wypadku wybrania tej drugiej opcji pojawią się kolejne dwa pola, które trzeba wypełnić: [screenshot].</li>\r\n	<li><strong>None</strong> - w tym wypadku logo w ogóle nie zostanie wyświetlone.</li>\r\n</ul>\r\n<div><strong>Wskazówka:</strong> opcja <strong>None</strong> jest przydatna w sytuacji gdy sami chcemy w kodzie szablonu zdefiniować kod logo - wystarczy wtedy dodać własny kod do odpowiedniego pliku (najczęściej <strong>layouts/header.php</strong>).</div>\r\n&nbsp;','Template branding settings','','inherit','open','open','','394-revision-3','','','2012-07-30 08:12:10','2012-07-30 08:12:10','',394,'{$page_url}/uncategorized/394-revision-3/',0,'revision','',0),(518,1,'2012-07-30 08:12:38','2012-07-30 08:12:38','W szablonie budowanym w oparciu o framework GavernWP istnieją trzy kluczowe miejsca związane z brandingiem:\r\n<ul>\r\n	<li>logo strony</li>\r\n	<li>stopka strony</li>\r\n	<li>logo frameworka pod stopką strony</li>\r\n</ul>\r\nZa elementy te odpowiadają następujące opcje panelu administracyjnego:\r\n\r\n[screenshot]\r\n\r\nW wypadku loga frameworka można je jedynie włączyć lub wyłączyć.\r\n\r\nTreść stopki strony definiujemy w opcji <strong>Footer content</strong>. Wyświetlona ona zostanie w dolej części strony najczęściej po prawej stronie witryny.\r\n\r\nNajwięcej parametrów związanych jest z logiem strony. Pierwszy krok w konfiguracji logo strony to wybór typu loga, dostępne są następujące rodzaje logo:\r\n<ul>\r\n	<li><strong>Defined in the CSS code</strong> - logo zdefiniowane jest wtedy w stylu CSS szablonu jako element posiadający klasę <strong>cssLogo</strong>. W tym wypadku poza modyfikacją kodu CSS żadne inne zmiany ustawień nie są potrzebne.</li>\r\n	<li><strong>Image logo</strong> - po wybraniu tej opcji pojawią się dodatkowe opcje: [screenshot]. Należy wybrać grafikę logo oraz określić jej rozmiary.</li>\r\n	<li><strong>Text logo</strong> - podobnie jak w wypadku poprzedniej opcji, także tutaj pojawią się dodatkowe opcje: [screenshot]. Opcja <strong>Template logo text</strong> określa czy tekst główny logo jak i podpis pod nim będą brane z ustawień Wordpress (<strong>from Wordpress settings</strong>) czy też będą określone  przez użytkownika (<strong>Own</strong>). W wypadku wybrania tej drugiej opcji pojawią się kolejne dwa pola, które trzeba wypełnić: [screenshot].</li>\r\n	<li><strong>None</strong> - w tym wypadku logo w ogóle nie zostanie wyświetlone.</li>\r\n</ul>\r\n<div><strong>Wskazówka:</strong> opcja <strong>None</strong> jest przydatna w sytuacji gdy sami chcemy w kodzie szablonu zdefiniować kod logo - wystarczy wtedy dodać własny kod do odpowiedniego pliku (najczęściej <strong>layouts/header.php</strong>).</div>\r\n&nbsp;','Template branding settings','','inherit','open','open','','394-revision-4','','','2012-07-30 08:12:38','2012-07-30 08:12:38','',394,'{$page_url}/uncategorized/394-revision-4/',0,'revision','',0),(519,1,'2012-07-14 08:18:41','2012-07-14 08:18:41','Sekcja opcji związanych z Social API zawiera 5 grup opcji:\r\n<ul>\r\n	<li>opcje związane z udostępnianiem na Facebook</li>\r\n	<li>opcje związane z udostępnianiem na G+</li>\r\n	<li>opcje związane z udostępnianiem na Twitter</li>\r\n	<li>opcje związane z udostępnianiem na Pinterest</li>\r\n	<li>opcje pozwalające na włączenie/wyłączenie Social API na poszczególnych podstronach.</li>\r\n</ul>\r\nOpcje związane z udostępnianiem są odpowiednikiem parametrów dostępnych w edytorach online, służących do tworzenia przycisków:\r\n<ul>\r\n	<li><a href=\"https://developers.facebook.com/docs/reference/plugins/like/\" target=\"_blank\">Facebook - \'like it\' button</a></li>\r\n	<li><a href=\"https://developers.google.com/+/plugins/+1button/\" target=\"_blank\">Goggle Plus - \'+1\' button</a></li>\r\n	<li><a href=\"https://dev.twitter.com/docs/tweet-button\" target=\"_blank\">Twitter - \'tweet\' button</a></li>\r\n	<li><a href=\"http://pinterest.com/about/goodies/\" target=\"_blank\">Pinterest - \'pin it\' button</a></li>\r\n</ul>\r\nOstatnia grupa opcji pozwala określić gdzie będą wyświetlane - dzięki opcji <strong>Include/Exclude specified articles from Social API</strong> można w ogóle wyłączyć Social API lub włączyć/wyłączyć tą funkcjonalność tylko dla wybranych postów, podstron i kategorii.\r\n\r\nListę postów, podstron i kategorii określamy w trzech ostatnich opcjach:\r\n\r\n[screenshot]\r\n\r\njako ciąg ID, slug lub nazw danych postów, podstron lub kategorii porozdzielanych przecinkami np. [code]1,5,25[/code] lub [code]typography,template-settings,template-essentials[/code]','Social API settings','','inherit','open','open','','424-revision-2','','','2012-07-14 08:18:41','2012-07-14 08:18:41','',424,'{$page_url}/uncategorized/424-revision-2/',0,'revision','',0),(754,1,'2012-11-20 13:02:42','2012-11-20 13:02:42','GavernWP has an advanced panel for managing theme\'s options in an administration panel. These options have been divided into a few main groups:\r\n<ul>\r\n	<li>Basic settings</li>\r\n	<li>Layout settings</li>\r\n	<li>Fonts settings</li>\r\n	<li>Navigation settings</li>\r\n	<li>Advanced settings</li>\r\n	<li>Shortcodes settings</li>\r\n	<li>Social API settings</li>\r\n	<li>Theme branding settings</li>\r\n	<li>Back-end branding settings</li>\r\n	<li>SEO settings</li>\r\n</ul>\r\nAlso, some additional elements generated by a framework in an administration panel in some various places appear, namely:\r\n<ul>\r\n	<li>Typography button</li>\r\n	<li>Widget rules</li>\r\n	<li>Open Graph metabox</li>\r\n	<li>GavernWP SEO settings metaboxes</li>\r\n</ul>\r\nIt is also worth getting acquainted with a theme configuration with files use in JSON format:\r\n<ul>\r\n	<li>Option files</li>\r\n	<li>Theme configuration</li>\r\n</ul>\r\nThe ability of these files edition, gives a possibility of deep interference in websites work based on GaverWP.','Main back-end features','','inherit','open','open','','419-revision','','','2012-11-20 13:02:42','2012-11-20 13:02:42','',419,'{$page_url}/uncategorized/419-revision/',0,'revision','',0),(520,1,'2012-07-30 10:29:18','2012-07-30 10:29:18','A section of options connected with Social API includes five groups of options:\r\n<ul>\r\n	<li>options connected with sharing at Facebook</li>\r\n	<li>options connected with sharing on G+</li>\r\n	<li>options connected with sharing on Twitter</li>\r\n	<li>options connected with sharing on Pinterest</li>\r\n	<li>opcje pozwalające na włączenie/wyłączenie Social API na poszczególnych podstronach.</li>\r\n</ul>\r\nOpcje związane z udostępnianiem są odpowiednikiem parametrów dostępnych w edytorach online, służących do tworzenia przycisków:\r\n<ul>\r\n	<li><a href=\"https://developers.facebook.com/docs/reference/plugins/like/\" target=\"_blank\">Facebook - \'like it\' button</a></li>\r\n	<li><a href=\"https://developers.google.com/+/plugins/+1button/\" target=\"_blank\">Goggle Plus - \'+1\' button</a></li>\r\n	<li><a href=\"https://dev.twitter.com/docs/tweet-button\" target=\"_blank\">Twitter - \'tweet\' button</a></li>\r\n	<li><a href=\"http://pinterest.com/about/goodies/\" target=\"_blank\">Pinterest - \'pin it\' button</a></li>\r\n</ul>\r\nOstatnia grupa opcji pozwala określić gdzie będą wyświetlane - dzięki opcji <strong>Include/Exclude specified articles from Social API</strong> można w ogóle wyłączyć Social API lub włączyć/wyłączyć tą funkcjonalność tylko dla wybranych postów, podstron i kategorii.\r\n\r\nListę postów, podstron i kategorii określamy w trzech ostatnich opcjach:\r\n\r\n[screenshot]\r\n\r\njako ciąg ID, slug lub nazw danych postów, podstron lub kategorii porozdzielanych przecinkami np. [code]1,5,25[/code] lub [code]typography,template-settings,template-essentials[/code]','Social API settings','','inherit','open','open','','424-revision-3','','','2012-07-30 10:29:18','2012-07-30 10:29:18','',424,'{$page_url}/uncategorized/424-revision-3/',0,'revision','',0),(760,1,'2012-11-20 14:38:06','2012-11-20 14:38:06','','comments1','','inherit','open','open','','comments1','','','2012-11-20 14:38:06','2012-11-20 14:38:06','',758,'{$page_url}/wp-content/uploads/2012/11/comments1.jpg',0,'attachment','image/jpeg',0),(761,1,'2012-11-20 14:37:32','2012-11-20 14:37:32','GK Comments is a simple widget to display latest comments with user avatars:\n\n&nbsp;\n\nThe configuration of the widget is really simple:\n\n<a href=\"{$page_url}/wp-content/uploads/2012/11/comments2.jpg\"><img class=\"aligncenter size-full wp-image-759\" title=\"comments2\" src=\"{$page_url}/wp-content/uploads/2012/11/comments2.jpg\" alt=\"\" width=\"265\" height=\"247\" /></a>\n\nAs you can see, there are three important options:\n<ul>\n	<li><strong>Avatar size</strong> - this option is used to specify the size of the avatars displayed under each comment.</li>\n	<li><strong>Word count</strong> - this option specifies the maximal amount of words displayed in each comment item.</li>\n	<li><strong>Number of comments</strong> - it specifes the maximal amount of comments to display.</li>\n</ul>\nThe GK Comments widget uses a built-in WordPress cache system and it refreshes the cache after every comments operation.','GK Comments','','inherit','open','open','','758-revision','','','2012-11-20 14:37:32','2012-11-20 14:37:32','',758,'{$page_url}/uncategorized/758-revision/',0,'revision','',0),(523,1,'2012-07-13 14:02:25','2012-07-13 14:02:25','Podstawowe ustawienia frameworka GavernWP pozwalają na określenie podstawowych parametrów związanych z wyświetlaniem strony:\r\n\r\n[screenshot]\r\n\r\nPierwsza opcja pozwala na wybór wersji kolorystycznej szablonu. W jej miejsce może pojawić się kilka różnych pól zależnie od zawartości pliku konfiguracyjnego <strong>styles.json</strong>.\r\n\r\nPo opcji/opcjach wyboru styli szablonu znajduje się opcja pozwalająca włączyć style-switcher - jest to element pozwalający użytkownikowi strony samodzielnie wybrać styl szablonu.\r\n\r\nOpcja \"<strong>Use header image</strong>\" pozwala określić czy na pozycji widżetów header w sytuacji gdy nie ma włączonego żadnego widżetu ma pojawiać się grafika. Grafikę tę można określić w live editorze szablonów w sekcji <strong>Header Image</strong>.\r\n\r\nKolejne dwie opcje związane są z włączeniem elementów breadcrumbs i font-size switcher na stronie. Do wyboru mamy opcje <strong>Enabled</strong>, <strong>Disabled</strong> oraz <strong>Conditional rule</strong> - wtedy w polu <strong>Conditional rule</strong> należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca element breadcrumbs tylko na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\r\n\r\nOstatnia opcja \"<strong>Show author info</strong>\" pozwala na wyświetlenie pod każdym postem informacji o jego autorze następującej postaci:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-2','','','2012-07-13 14:02:25','2012-07-13 14:02:25','',416,'{$page_url}/uncategorized/416-revision-2/',0,'revision','',0),(524,1,'2012-07-30 12:53:32','2012-07-30 12:53:32','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nAfter an option/options\r\n\r\nPo opcji/opcjach wyboru styli szablonu znajduje się opcja pozwalająca włączyć style-switcher - jest to element pozwalający użytkownikowi strony samodzielnie wybrać styl szablonu.\r\n\r\nOpcja \"<strong>Use header image</strong>\" pozwala określić czy na pozycji widżetów header w sytuacji gdy nie ma włączonego żadnego widżetu ma pojawiać się grafika. Grafikę tę można określić w live editorze szablonów w sekcji <strong>Header Image</strong>.\r\n\r\nKolejne dwie opcje związane są z włączeniem elementów breadcrumbs i font-size switcher na stronie. Do wyboru mamy opcje <strong>Enabled</strong>, <strong>Disabled</strong> oraz <strong>Conditional rule</strong> - wtedy w polu <strong>Conditional rule</strong> należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca element breadcrumbs tylko na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\r\n\r\nOstatnia opcja \"<strong>Show author info</strong>\" pozwala na wyświetlenie pod każdym postem informacji o jego autorze następującej postaci:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-3','','','2012-07-30 12:53:32','2012-07-30 12:53:32','',416,'{$page_url}/uncategorized/416-revision-3/',0,'revision','',0),(526,1,'2012-07-30 13:26:40','2012-07-30 13:26:40','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing template\'s styles  - it is an element allowing for a website\'s user to choose a template style himself/herself.\r\n\r\n&nbsp;\r\n\r\nOpcja \"<strong>Use header image</strong>\" pozwala określić czy na pozycji widżetów header w sytuacji gdy nie ma włączonego żadnego widżetu ma pojawiać się grafika. Grafikę tę można określić w live editorze szablonów w sekcji <strong>Header Image</strong>.\r\n\r\nKolejne dwie opcje związane są z włączeniem elementów breadcrumbs i font-size switcher na stronie. Do wyboru mamy opcje <strong>Enabled</strong>, <strong>Disabled</strong> oraz <strong>Conditional rule</strong> - wtedy w polu <strong>Conditional rule</strong> należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca element breadcrumbs tylko na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\r\n\r\nOstatnia opcja \"<strong>Show author info</strong>\" pozwala na wyświetlenie pod każdym postem informacji o jego autorze następującej postaci:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-5','','','2012-07-30 13:26:40','2012-07-30 13:26:40','',416,'{$page_url}/uncategorized/416-revision-5/',0,'revision','',0),(525,1,'2012-07-30 13:03:46','2012-07-30 13:03:46','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options\r\n\r\nPo opcji/opcjach wyboru styli szablonu znajduje się opcja pozwalająca włączyć style-switcher - jest to element pozwalający użytkownikowi strony samodzielnie wybrać styl szablonu.\r\n\r\nOpcja \"<strong>Use header image</strong>\" pozwala określić czy na pozycji widżetów header w sytuacji gdy nie ma włączonego żadnego widżetu ma pojawiać się grafika. Grafikę tę można określić w live editorze szablonów w sekcji <strong>Header Image</strong>.\r\n\r\nKolejne dwie opcje związane są z włączeniem elementów breadcrumbs i font-size switcher na stronie. Do wyboru mamy opcje <strong>Enabled</strong>, <strong>Disabled</strong> oraz <strong>Conditional rule</strong> - wtedy w polu <strong>Conditional rule</strong> należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca element breadcrumbs tylko na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\r\n\r\nOstatnia opcja \"<strong>Show author info</strong>\" pozwala na wyświetlenie pod każdym postem informacji o jego autorze następującej postaci:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-4','','','2012-07-30 13:03:46','2012-07-30 13:03:46','',416,'{$page_url}/uncategorized/416-revision-4/',0,'revision','',0),(527,1,'2012-07-30 13:28:23','2012-07-30 13:28:23','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing template\'s styles  - it is an element allowing for a website\'s user to choose a template style himself/herself.\r\n\r\n\"Use header image\" option allows to specify whether\r\n\r\nOpcja \"<strong>Use header image</strong>\" pozwala określić czy na pozycji widżetów header w sytuacji gdy nie ma włączonego żadnego widżetu ma pojawiać się grafika. Grafikę tę można określić w live editorze szablonów w sekcji <strong>Header Image</strong>.\r\n\r\nKolejne dwie opcje związane są z włączeniem elementów breadcrumbs i font-size switcher na stronie. Do wyboru mamy opcje <strong>Enabled</strong>, <strong>Disabled</strong> oraz <strong>Conditional rule</strong> - wtedy w polu <strong>Conditional rule</strong> należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca element breadcrumbs tylko na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\r\n\r\nOstatnia opcja \"<strong>Show author info</strong>\" pozwala na wyświetlenie pod każdym postem informacji o jego autorze następującej postaci:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-6','','','2012-07-30 13:28:23','2012-07-30 13:28:23','',416,'{$page_url}/uncategorized/416-revision-6/',0,'revision','',0),(530,1,'2012-07-13 13:50:16','2012-07-13 13:50:16','GavernWP posiada wbudowane ustawienia SEO, które pozwalają nadpisać standardowe ustawienia SEO Wordpress. Po włączeniu opcji \"Use Gavern SEO settings\" pojawi się szereg opcji związanych z SEO:\r\n\r\n[screenshot]\r\n\r\nPierwsza grupa opcji związana jest z tytułem strony:\r\n<ul>\r\n	<li><strong>Use blogname in title</strong> - opcja ta pozwala włączyć pokazywanie nazwy bloga w tytule</li>\r\n	<li><strong>Separator used in title</strong> - określa znak znajdujący się pomiędzy opisem tytułu a nazwą strony</li>\r\n	<li><strong>Title - description</strong> - pozwala określić opis tytułu strony (pierwsza część tytułu - przed separatorem)</li>\r\n	<li><strong>Title - blogname</strong> - pozwala określić nazwę strony (druga część tytułu - po separatorze)</li>\r\n</ul>\r\nPozostałe opcje pozwalają włączyć zaawansowane zarządzanie metatagami <strong>keywords</strong> i <strong>description</strong>:\r\n\r\n[screenshot]\r\n\r\nW wypadku strony głównej wartości tych metatagów określane są od razu w panelu ustawień SEO, natomiast w wypadku podstron dla obu metatagów dostępne są dwa ustawienia:\r\n<ul>\r\n	<li><strong>Disabled</strong></li>\r\n	<li><strong>Enabled (custom field in the post editor)</strong></li>\r\n</ul>\r\nW wypadku włączenia tych ustawień pod edytorem postów pojawią się dwa dodatkowe pola:\r\n\r\n[screenshot]\r\n\r\nIch wypełnienie spowoduje stworzenie metatagów wykorzystywanych tylko na danej podstronie z wpisem.','SEO settings','','inherit','open','open','','413-revision-2','','','2012-07-13 13:50:16','2012-07-13 13:50:16','',413,'{$page_url}/uncategorized/413-revision-2/',0,'revision','',0),(529,1,'2012-08-07 09:54:39','2012-08-07 09:54:39','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing template\'s styles  - it is an element allowing for a website\'s user to choose a template style himself/herself.\r\n\r\n<strong>\"Use header image\"</strong> option allows to specify whether there are some images in the case where there are no widgets switched on, on a header widget position. These images can be specified in a templates live editor in a <strong>Header Image</strong> section.\r\n\r\nThe next two options are connected with switching on breadcrumbs and font-size switcher elements on a website. There are the following options to choose from: <strong>Enabled</strong>, <strong>Disabled</strong> and <strong>Conditional rule</strong> - then, you have to set a rule using <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of PHP language in a <strong>Conditional rule</strong> field, e.g. a rule displayinga a breadcrumbs element on the homepage and in the \"Meet GavernWP\" category will be in the following form: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\n\"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" option is useful when you want to place a widget\r\n\r\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\r\n\r\nOstatnia opcja \"<strong>Show author info</strong>\" pozwala na wyświetlenie pod każdym postem informacji o jego autorze następującej postaci:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-8','','','2012-08-07 09:54:39','2012-08-07 09:54:39','',416,'{$page_url}/uncategorized/416-revision-8/',0,'revision','',0),(528,1,'2012-08-07 09:42:48','2012-08-07 09:42:48','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing template\'s styles  - it is an element allowing for a website\'s user to choose a template style himself/herself.\r\n\r\n<strong>\"Use header image\"</strong> option allows to specify whether there are some images in the case where there are no widgets switched on, on a header widget position. These images can be specified in a templates live editor in a <strong>Header Image</strong> section.\r\n\r\nThe next two options are connected with switching on breadcrumbs and font-size switcher elements on a website. There are the following options to choose from: <strong>Enabled</strong>, <strong>Disabled</strong> and <strong>Conditional rule</strong> - then, you have to set a rule using <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of PHP language in a <strong>Conditional rule</strong> field, e.g. a rule displayinga a breadcrumbs element\r\n\r\nKolejne dwie opcje związane są z włączeniem elementów breadcrumbs i font-size switcher na stronie. Do wyboru mamy opcje <strong>Enabled</strong>, <strong>Disabled</strong> oraz <strong>Conditional rule</strong> - wtedy w polu <strong>Conditional rule</strong> należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca element breadcrumbs tylko na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\nOpcja \"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" jest użyteczna w momencie kiedy zamiast wpisów na stronie głównej chcemy umieścić jakiś widżet - wtedy należy ją włączyć i na pozycji widżetów <strong>mainbody</strong> umieścić potrzebny nam widżet, który zastąpi standardową listę postów generowaną przez Wordpress.\r\n\r\nOstatnia opcja \"<strong>Show author info</strong>\" pozwala na wyświetlenie pod każdym postem informacji o jego autorze następującej postaci:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-7','','','2012-08-07 09:42:48','2012-08-07 09:42:48','',416,'{$page_url}/uncategorized/416-revision-7/',0,'revision','',0),(531,1,'2012-07-16 07:23:41','2012-07-16 07:23:41','Jednym z kluczowych elementów wpływających na wygląd strony WWW jest właściwy wybór czcionek zastosowanych do prezentacji tekstu.\r\n\r\nGavernWP umożliwia łatwy wybór czcionek przypisanych do określonych przez użytkownika selektorów CSS.\r\n\r\nAby ułatwić obsługę wielu różnych czcionek na jednej stronie GavernWP obsługuje grupy czcionek - każa grupa pozwala na przypisanie danej czcionki do wybranych przez użytkownika selektorów:\r\n\r\n[screenshot]\r\n\r\nGrupy czcionek zdefiniowane są w pliku konfiguracyjnym <strong>fonts.json</strong>. Dodanie nowej grupy czcionek jest bardzo proste - wystarczy zdefiniować kolejny obiekt postaci:\r\n\r\n[code]{\r\n\"full_name\": \"Full name of the fonts group\",\r\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\",\r\n\"description\": \"Short description of the font family\"\r\n}[/code]\r\n\r\nPo dodaniu takiego obiektu w tablicy zawartej w pliku <strong>fonts.json </strong>ujrzymy w panelu administracyjnym kolejną grupę czcionek, którą można zarządzać.\r\n\r\nDla każdej grupy czcionek należy określić trzy podstawowe wartości:\r\n<ul>\r\n	<li>rodzaj zastosowanej czcionki</li>\r\n	<li>czcionka danego rodzaju</li>\r\n	<li>selektory powiązane z daną czcionką</li>\r\n</ul>\r\nOkreślenie rodzaju czcionki ogranicza się do wyboru jednego z trzech typów czcionek:\r\n<ul>\r\n	<li><strong>Standard fonts</strong> - standardowe zestawy czcionek dostępne na większości komputerów - należy wybrać daną czcionkę z listy pojawiającej się pod polem wyboru rodzaju czcionki: [screenshot]</li>\r\n	<li><strong>Fonts Squirrel</strong> - czcionki pobrane ze strony <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> - należy pobrać @font-face kit danej czcionki i umieścić jego zawartość w katalogu <strong>fonts</strong>. Ważne jest by folder miał taką samą nazwę jak nazwa czcionki zastosowana w pliku <strong>stylesheet.css</strong> znajdującym się w nowym katalogu. Po dodaniu tak przygotowanego katalogu dana czcionka pojawi się na liście wyboru: [screenshot]</li>\r\n	<li><strong>Google Web Fonts</strong> - czcionki pochodzace z zasobów strony <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> w tym wypadku należy określić adres URL danej czcionki: [screenshot]</li>\r\n</ul>\r\nOstatni etap to określenie selektorów zwiąanych z daną czcionką:\r\n\r\n[screenshot]\r\n\r\nPo zapisaniu ustawień efekty powinny być od razu widoczne na stronie - nie jest wymagane wykonywanie żadnych dodatkowych operacji.','Fonts settings','','inherit','open','open','','410-revision-3','','','2012-07-16 07:23:41','2012-07-16 07:23:41','',410,'{$page_url}/uncategorized/410-revision-3/',0,'revision','',0),(545,1,'2012-08-08 19:57:27','2012-08-08 19:57:27','One of the key elements which has influence on website\'s look is an appropriate choice of fonts used for text presentation.\r\n\r\nGavernWP allows to choose fonts easily which are assigned to CSS selectors specified by a user.\r\n\r\nIn order to simplify support for many fonts on one page, GavernWP supports groups of fonts - each group allows to assign a font given to selectors chosen by a user:\r\n\r\n[screenshot]\r\n\r\nGroups of fonts are defined in a configuration file called <strong>fonts.json</strong>. Adding a new group of fonts is very easy - it is enough to define the next object of a form:\r\n\r\n[code]{\r\n\"full_name\": \"Full name of the fonts group\",\r\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\",\r\n\"description\": \"Short description of the font family\"\r\n}[/code]\r\n\r\nAfter adding such an object, in a table included in <strong>fonts.json</strong> file, you will see the next group of fonts to manage in an administration panel.\r\n\r\nYou have to specify three basic values for each group of fonts:\r\n<ul>\r\n	<li> a type of font used</li>\r\n	<li> a font of a type given</li>\r\n	<li>selectors connected with a font given</li>\r\n</ul>\r\nSpecifying of a font type is restricted to choosing one out of three fonts types:\r\n<ul>\r\n	<li><strong>Standard fonts</strong> - standard sets of fonts available on the majority of computers - you have to choose a font given from a list which is shown under the field of choosing a type of font: [screenshot]</li>\r\n	<li><strong>Fonts Squirrel</strong> - fonts downloaded from <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> page - you have to download @font-face kit of a font given and place its content in <strong>fonts</strong> catalog.  It is very important to have a folder with the same name as a font name used in <strong>stylesheet.css</strong> file which is in a new catalog. If you prepare a catalog in this way, you will see a font given on the list to choose:  [screenshot]</li>\r\n	<li><strong>Google Web Fonts</strong> - fonts from czcionki pochodzace z zasobów strony <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> page; in this case, you have to specify the URL address of a font given: [screenshot]</li>\r\n</ul>\r\nThe last stage is specifying selectors connected with a font given:\r\n\r\n[screenshot]\r\n\r\nAfter saving the settings, the results should be visible on the website immediately - it is not required to make any additional operations.','Fonts settings','','inherit','open','open','','410-revision-5','','','2012-08-08 19:57:27','2012-08-08 19:57:27','',410,'{$page_url}/uncategorized/410-revision-5/',0,'revision','',0),(532,1,'2012-08-08 13:06:58','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-08 13:06:58','0000-00-00 00:00:00','',0,'{$page_url}/?p=532',0,'post','',0),(533,1,'2012-08-08 13:07:41','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-08 13:07:41','0000-00-00 00:00:00','',0,'{$page_url}/?p=533',0,'post','',0),(534,1,'2012-08-08 13:08:07','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-08 13:08:07','0000-00-00 00:00:00','',0,'{$page_url}/?p=534',0,'post','',0),(535,1,'2012-08-08 13:08:34','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-08 13:08:34','0000-00-00 00:00:00','',0,'{$page_url}/?p=535',0,'post','',0),(544,1,'2012-08-07 13:23:25','2012-08-07 13:23:25','One of the key elements which has influence on website\'s look is an appropriate choice of fonts used for text presentation.\r\n\r\nGavernWP allows to choose fonts easily which are assigned to CSS selectors specified by a user.\r\n\r\nIn order to simplify support for many fonts on one page, GavernWP supports groups of fonts - each group allows to assign a font given to selectors chosen by a user:\r\n\r\n[screenshot]\r\n\r\nGroups of fonts are defined in a configuration file called fonts.json. Adding\r\n\r\nGrupy czcionek zdefiniowane są w pliku konfiguracyjnym <strong>fonts.json</strong>. Dodanie nowej grupy czcionek jest bardzo proste - wystarczy zdefiniować kolejny obiekt postaci:\r\n\r\n[code]{\r\n\"full_name\": \"Full name of the fonts group\",\r\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\",\r\n\"description\": \"Short description of the font family\"\r\n}[/code]\r\n\r\nPo dodaniu takiego obiektu w tablicy zawartej w pliku <strong>fonts.json </strong>ujrzymy w panelu administracyjnym kolejną grupę czcionek, którą można zarządzać.\r\n\r\nDla każdej grupy czcionek należy określić trzy podstawowe wartości:\r\n<ul>\r\n	<li>rodzaj zastosowanej czcionki</li>\r\n	<li>czcionka danego rodzaju</li>\r\n	<li>selektory powiązane z daną czcionką</li>\r\n</ul>\r\nOkreślenie rodzaju czcionki ogranicza się do wyboru jednego z trzech typów czcionek:\r\n<ul>\r\n	<li><strong>Standard fonts</strong> - standardowe zestawy czcionek dostępne na większości komputerów - należy wybrać daną czcionkę z listy pojawiającej się pod polem wyboru rodzaju czcionki: [screenshot]</li>\r\n	<li><strong>Fonts Squirrel</strong> - czcionki pobrane ze strony <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> - należy pobrać @font-face kit danej czcionki i umieścić jego zawartość w katalogu <strong>fonts</strong>. Ważne jest by folder miał taką samą nazwę jak nazwa czcionki zastosowana w pliku <strong>stylesheet.css</strong> znajdującym się w nowym katalogu. Po dodaniu tak przygotowanego katalogu dana czcionka pojawi się na liście wyboru: [screenshot]</li>\r\n	<li><strong>Google Web Fonts</strong> - czcionki pochodzace z zasobów strony <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> w tym wypadku należy określić adres URL danej czcionki: [screenshot]</li>\r\n</ul>\r\nOstatni etap to określenie selektorów zwiąanych z daną czcionką:\r\n\r\n[screenshot]\r\n\r\nPo zapisaniu ustawień efekty powinny być od razu widoczne na stronie - nie jest wymagane wykonywanie żadnych dodatkowych operacji.','Fonts settings','','inherit','open','open','','410-revision-4','','','2012-08-07 13:23:25','2012-08-07 13:23:25','',410,'{$page_url}/uncategorized/410-revision-4/',0,'revision','',0),(546,1,'2012-07-13 12:43:30','2012-07-13 12:43:30','Szablony budowane w oparciu o framework GavernWP posiadają wsparcie dla wielu użytecznych rozwiązań i technologii. Najważniejsze z nich to:\r\n<ul>\r\n	<li><a title=\"Custom Page Styles\" href=\"{$page_url}/template-features/custom-page-styles-2/\">Custom page styles</a> - rozszerzają funkcjonalność standardowych podstron.</li>\r\n	<li><a title=\"Typography\" href=\"{$page_url}/template-features/typography/\">Typography</a> - rozbudowana lista elementów umożliwia wzbogacenie postów o różnorodne dodatki.</li>\r\n	<li><a title=\"Social API\" href=\"{$page_url}/template-features/social-api/\">Social API</a> - pozwala na łatwe dodanie do wpisu przycisków udostępniania postów w serwisach społecznościowych.</li>\r\n	<li><a title=\"Open Graph support\" href=\"{$page_url}/template-features/open-graph-support/\">Open Graph</a> - umożliwia określenie sposobu w jaki będą widoczne udostępniane treści na Facebooku.</li>\r\n	<li><a title=\"Threaded comments\" href=\"{$page_url}/template-features/threaded-comments-2/\">Threaded comments</a> - pozwalają na prowadzenie dyskusji pod postami w czytelny sposób.</li>\r\n	<li><a title=\"Branding\" href=\"{$page_url}/template-features/branding/\">Branding</a> - ułatwia ustawienie kluczowych elementów strony związanych z jej nazwą lub marką.</li>\r\n	<li><a title=\"Color Styles\" href=\"{$page_url}/uncategorized/color-styles/\">Color styles</a> - dzięki nim możliwe jest tworzenie wielu różnych wersji kolorystycznych oraz stylistycznych szablonu.</li>\r\n</ul>\r\n&nbsp;','Main front-end features','','inherit','open','open','','408-revision-2','','','2012-07-13 12:43:30','2012-07-13 12:43:30','',408,'{$page_url}/uncategorized/408-revision-2/',0,'revision','',0),(547,1,'2012-07-12 13:56:55','2012-07-12 13:56:55','Ustawienia układu strony w szablonie związane są z pięcioma głównymi opcjami:\r\n\r\n[shortcodes]\r\n\r\nDzięki opcji <strong>Page layout</strong> można określić pozycję kolumny w układzie strony: po lewej, po prawej lub w ogóle wyłączyć pokazywanie kolumny (w tej sytuacji uzyskuje się układ dostępny także poprzez dodatkowy styl podstrony - <strong>fullwidth</strong>).\r\n\r\nOpcja <strong>Template width</strong> określa maksymalną szerokość strony - bez względu na szerokość okna przeglądarki szerokość strony nie przekroczy tej wartości.\r\n\r\nSzerokość kolumny określa się w procentach dzięki opcji <strong>Sidebar width</strong>. Natomiast opcje <strong>Tablet width</strong> i <strong>Mobile width</strong> pozwalają określić w pikselach szerokość okna przeglądarki przy której wczytywany jest kolejno plik <strong>css/tablet.css</strong> oraz <strong>css/mobile.css</strong>.\r\n\r\nW wypadku<strong> tablet.css</strong> moduły, które w normalnym układzie tworzą układ maksymalnie czterokolumnowy pojawiają się w układzie dwukolumnowym, który po załadowaniu pliku <strong>mobile.css</strong> przekształca się w układ jednokolumnowy. Dodatkowo po załadowaniu pliku <strong>tablet.css</strong> kolumna przemieszcza się pod główną treść danej strony.\r\n\r\n<strong>Wskazówka:</strong> wszystkie opcje z sekcji <strong>Layout</strong> znajdują się też w edytorze live-preview, co pozwala na łatwiejsze dobranie wartości tych opcji dzięki podglądowi strony na żywo.','Layout settings','','inherit','open','open','','404-revision-2','','','2012-07-12 13:56:55','2012-07-12 13:56:55','',404,'{$page_url}/uncategorized/404-revision-2/',0,'revision','',0),(549,1,'2012-07-12 13:39:30','2012-07-12 13:39:30','GavernWP umożliwa rozbudowane zarządzanie menu na stronie. W pliku konfiguracyjnym  <strong>menus.json</strong> znajduje się lista menu dostępnych w szablonie. Menu te wyświetlane są w zakładce<strong> Navigation</strong>:\r\n\r\n[screenshot]\r\n\r\nDla każdego menu dostępnego na stronie dostępnych jest kilka opcji. Menu główne strony ma więcej opcji niż zwykłe menu umieszczone np. w  stopce strony.\r\n\r\nRóżnica polega na tym, że menu główne posiada dodatkowe opcje związane z animacją:\r\n\r\n[screenshot]\r\n\r\nOpcje te pozwalają określić rodzaj oraz prędkość animacji submenu.\r\n\r\nDodatkowo wszystkie rodzaje menu posiadają dwie opcje:\r\n<ul>\r\n	<li>opcję określającą czy dane menu jest włączone - dane menu może być włączone tylko na wybranych podstronach dzięki opcji <strong>Conditional rule</strong> - wtedy w polu Conditional rule należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca menu na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\r\n	<li>opcję określającą głębokość menu tj. maksymalny poziom zagnieżdżenia dla wyświetlanych pozycji menu. Jeżeli np. chcemy pominąć drugi poziom menu i wyświetlić tylko te pozycje menu, które znajdują się na pierwszym poziomie menu, nalezy ustawić tą opcję na wartość <strong>1</strong>. Oczywiście wartość <strong>All levels</strong> spowoduje wyświetlenie wszystkich pozycji menu dostępnych dla danego menu.</li>\r\n</ul>\r\nNależy pamiętać, że dodanie menu poza dodaniem stosownego wpisu w pliku konfiguracyjnym <strong>menus.json</strong> wymaga też stworzenia w szablonie stosownego kodu.\r\n\r\nKod ten korzysta ze standardowej funkcji <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a>, przy czym należy pamiętać o trzech istotnych kwestiach:\r\n<ul>\r\n	<li>kod funkcji <strong>wp_nav_menu</strong> należy umieścić wewnątrz warunku IF postaci: [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] gdzie <strong>MENU_NAME</strong> to oczywiście nazwa menu np. <strong>mainmenu</strong>. Dzięki temu zapewnimy działanie funkcjonalności, która pozwala wyświetlać menu tylko na wybranych podstronach.</li>\r\n	<li>w wypadku menu głównego warto stworzyć jego duplikat w wersji mobilnej tak by przy wyświetlaniu strony na urządzeniach mobilnych pojawiło się menu dostosowane do urządeń mobilnych.</li>\r\n	<li>w wypadku menu głównego należy zastosować specjalną klasę dziedzicącą po klasie <strong>Walker</strong>: <strong>GKMenuWalker</strong>, natomiast dla menu mobilnego należy wykorzystać klasę <strong>GKMenuWalkerMobile</strong>. Zapewni to wygenerowanie odpowiedniej struktury menu.</li>\r\n</ul>\r\nKod CSS związany z menu znajduje się w plikach <strong>css/wp.css</strong> oraz <strong>css/mobile.css</strong>.\r\n\r\nSkrypty tworzące animacje menu głównego znajdują się w pliku <strong>js/gk.menu.js</strong>.','Navigation settings','','inherit','open','open','','401-revision-2','','','2012-07-12 13:39:30','2012-07-12 13:39:30','',401,'{$page_url}/uncategorized/401-revision-2/',0,'revision','',0),(548,1,'2012-08-09 08:31:35','2012-08-09 08:31:35','Layout settings in a template are connected with five main options:\r\n\r\n[shortcodes]\r\n\r\nThanks to a <strong>Page layout</strong> option, it is possible to specify a column position in page\'s layout: on the left/right side or switch off showing a column completely (in this situation, you achieve the layout available\r\n\r\nDzięki opcji <strong>Page layout</strong> można określić pozycję kolumny w układzie strony: po lewej, po prawej lub w ogóle wyłączyć pokazywanie kolumny (w tej sytuacji uzyskuje się układ dostępny także poprzez dodatkowy styl podstrony - <strong>fullwidth</strong>).\r\n\r\nOpcja <strong>Template width</strong> określa maksymalną szerokość strony - bez względu na szerokość okna przeglądarki szerokość strony nie przekroczy tej wartości.\r\n\r\nSzerokość kolumny określa się w procentach dzięki opcji <strong>Sidebar width</strong>. Natomiast opcje <strong>Tablet width</strong> i <strong>Mobile width</strong> pozwalają określić w pikselach szerokość okna przeglądarki przy której wczytywany jest kolejno plik <strong>css/tablet.css</strong> oraz <strong>css/mobile.css</strong>.\r\n\r\nW wypadku<strong> tablet.css</strong> moduły, które w normalnym układzie tworzą układ maksymalnie czterokolumnowy pojawiają się w układzie dwukolumnowym, który po załadowaniu pliku <strong>mobile.css</strong> przekształca się w układ jednokolumnowy. Dodatkowo po załadowaniu pliku <strong>tablet.css</strong> kolumna przemieszcza się pod główną treść danej strony.\r\n\r\n<strong>Wskazówka:</strong> wszystkie opcje z sekcji <strong>Layout</strong> znajdują się też w edytorze live-preview, co pozwala na łatwiejsze dobranie wartości tych opcji dzięki podglądowi strony na żywo.','Layout settings','','inherit','open','open','','404-revision-3','','','2012-08-09 08:31:35','2012-08-09 08:31:35','',404,'{$page_url}/uncategorized/404-revision-3/',0,'revision','',0),(550,1,'2012-08-09 09:52:32','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-09 09:52:32','0000-00-00 00:00:00','',0,'{$page_url}/?p=550',0,'post','',0),(551,1,'2012-08-09 09:55:45','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-09 09:55:45','0000-00-00 00:00:00','',0,'{$page_url}/?p=551',0,'post','',0),(552,1,'2012-08-09 09:58:23','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-09 09:58:23','0000-00-00 00:00:00','',0,'{$page_url}/?p=552',0,'post','',0),(553,1,'2012-08-09 09:59:22','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-09 09:59:22','0000-00-00 00:00:00','',0,'{$page_url}/?p=553',0,'post','',0),(557,1,'2012-07-12 13:12:57','2012-07-12 13:12:57','Shortcodes to udogodnienia, które nie są wykorzystywane przez wszystkich. Poza tym kod XHTML większości elementów typograficznych można w razie potrzeby wygenerować ręcznie. Sprawia to, że nie wszystkie pliki CSS i JavaScript związane z Shortcodes są potrzebne przy wczytywaniu strony.\r\n\r\nDzięki zakładce Shortcodes można wyłączyć wybrane grupy Shortcodes:\r\n\r\n[screenshot]\r\n\r\n<strong>Uwaga!</strong> Wyłączenie danej grupy Shortcodes spowoduje nie tylko wyłączenie dodawania plików CSS i JS związanych z daną grupą, ale też wyłączy funkcje parsujące Shortcodes w artykułach. Dlatego należy upewnić się, że wyłączane grupy Shortcodes nie były wykorzystane w istniejących artykułach.','Shortcodes settings','','inherit','open','open','','397-revision-3','','','2012-07-12 13:12:57','2012-07-12 13:12:57','',397,'{$page_url}/uncategorized/397-revision-3/',0,'revision','',0),(558,1,'2012-07-12 12:55:04','2012-07-12 12:55:04','Aby lepiej dostosować stylistykę panelu administracyjnego do strony w GavernWP znalazły się opcje pozwalające na dostosowanie wyglądu elementów panelu administracyjnego do tematyki danej strony.\r\n\r\nW zakładce back-end branding znajdziemy następujące opcje:\r\n\r\n[screenshot]\r\n\r\nPierwsze dwie opcje związane są z logotypem wyświetlanym na stronie logowania. Należy wybrać grafikę, która posłuży za logo, a następnie podać rozmiar wybranej grafiki. W ten sposób możemy uzyskać np. taki panel logowania:\r\n\r\n[screenshot]\r\n\r\nPozostałe dwie opcje związane są z logiem szablonu wyświetlanym w menu głównym panelu administracyjnego:\r\n\r\n[screenshot]\r\n\r\nZalecamy wykorzystać grafikę w rozmiarze 16x16 - większe lub mniejsze grafiki mogą powodować problemy z układem menu.\r\n\r\n&nbsp;','Back-end branding settings','','inherit','open','open','','392-revision-2','','','2012-07-12 12:55:04','2012-07-12 12:55:04','',392,'{$page_url}/uncategorized/392-revision-2/',0,'revision','',0),(560,1,'2012-07-26 09:27:51','2012-07-26 09:27:51','GavernWP has basic support for a new option available in Wordpress 3.4 - an options editor with templates preview. Now, the most important options connected with template\'s style and its layout has been implemented to a live editor.\r\n\r\nIn order to reach it easier, we placed a direct link to this editor in the top part of templates\' options:\r\n\r\n[screenshot]\r\n\r\nAll options included in this editor are also available\r\n\r\nWszystkie opcje zawarte w tym edytorze dostępne są również poprzez tradycyjny panel opcji szablonu.\r\n\r\nAby ułatwić dodawanie własnych opcji do live editor cały kod generujący opcje umieszczono w oddzielnym pliku <strong>gavern/helpers/helpers.customizer.php</strong>.\r\n\r\nNależy pamiętać, że wszystkie opcje i ustawienia z live editor są przechowywane w tym samym miejscu co ich odpowiedniki z panelu admistracyjnego zatem zmiana ustawień z użyciem live editor pociąga za sobą zmiany w zwykłym panelu opcji. Dlatego też zalecane jest nie uruchamianie w tym samym momencie tradycyjnego panelu administracyjnego szablonu i live editor, gdyż może zaistnieć sytuacja gdy zapis opcji w obu miejscach naraz o różnych wartościach dla tego samego parametru da rezultat inny niż oczekiwany.','Theme live editor','','inherit','open','open','','380-revision-6','','','2012-07-26 09:27:51','2012-07-26 09:27:51','',380,'{$page_url}/uncategorized/380-revision-6/',0,'revision','',0),(562,1,'2012-08-09 09:47:25','2012-08-09 09:47:25','GavernWP gives a possibility of advanced menu managing on a website. There is a list of menus available in a template in a configuration file - <strong>menus.json</strong>. These menus are displayed in a <strong>Navigation</strong> tab:\r\n\r\n[screenshot]\r\n\r\nThere are a few options available for each menu available on a website. Website\'s main menu has more options than a menu placed e.g. in page\'s footer.\r\n\r\nThe difference is that a main menu has additional options connected with animation:\r\n\r\n[screenshot]\r\n\r\nThese options allow to specify the type and speed of animation of a submenu.\r\n\r\nAdditionally, all menu types have the two options:\r\n<ul>\r\n	<li>opcję określającą czy dane menu jest włączone - dane menu może być włączone tylko na wybranych podstronach dzięki opcji <strong>Conditional rule</strong> - wtedy w polu Conditional rule należy podać regułę korzystającą z <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> oraz operatorów logicznych języka PHP. Np. reguła wyświetlająca menu na stronie głównej oraz w kategorii o nazwie \"Meet GavernWP\" będzie miała następującą postać: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\r\n	<li>opcję określającą głębokość menu tj. maksymalny poziom zagnieżdżenia dla wyświetlanych pozycji menu. Jeżeli np. chcemy pominąć drugi poziom menu i wyświetlić tylko te pozycje menu, które znajdują się na pierwszym poziomie menu, nalezy ustawić tą opcję na wartość <strong>1</strong>. Oczywiście wartość <strong>All levels</strong> spowoduje wyświetlenie wszystkich pozycji menu dostępnych dla danego menu.</li>\r\n</ul>\r\nNależy pamiętać, że dodanie menu poza dodaniem stosownego wpisu w pliku konfiguracyjnym <strong>menus.json</strong> wymaga też stworzenia w szablonie stosownego kodu.\r\n\r\nKod ten korzysta ze standardowej funkcji <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a>, przy czym należy pamiętać o trzech istotnych kwestiach:\r\n<ul>\r\n	<li>kod funkcji <strong>wp_nav_menu</strong> należy umieścić wewnątrz warunku IF postaci: [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] gdzie <strong>MENU_NAME</strong> to oczywiście nazwa menu np. <strong>mainmenu</strong>. Dzięki temu zapewnimy działanie funkcjonalności, która pozwala wyświetlać menu tylko na wybranych podstronach.</li>\r\n	<li>w wypadku menu głównego warto stworzyć jego duplikat w wersji mobilnej tak by przy wyświetlaniu strony na urządzeniach mobilnych pojawiło się menu dostosowane do urządeń mobilnych.</li>\r\n	<li>w wypadku menu głównego należy zastosować specjalną klasę dziedzicącą po klasie <strong>Walker</strong>: <strong>GKMenuWalker</strong>, natomiast dla menu mobilnego należy wykorzystać klasę <strong>GKMenuWalkerMobile</strong>. Zapewni to wygenerowanie odpowiedniej struktury menu.</li>\r\n</ul>\r\nKod CSS związany z menu znajduje się w plikach <strong>css/wp.css</strong> oraz <strong>css/mobile.css</strong>.\r\n\r\nSkrypty tworzące animacje menu głównego znajdują się w pliku <strong>js/gk.menu.js</strong>.','Navigation settings','','inherit','open','open','','401-revision-3','','','2012-08-09 09:47:25','2012-08-09 09:47:25','',401,'{$page_url}/uncategorized/401-revision-3/',0,'revision','',0),(749,1,'2012-09-19 10:04:59','2012-09-19 10:04:59','GavernWP allows to access a lot of additional typography elements created with <a title=\"Shortcode API\" href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> use. The use is very simple thanks to <a title=\"Typography button\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-features/typography-button/\" target=\"_blank\">an additional button</a> in a posts editor. A typography description from a programistic side has been divided into two parts, namely: <a title=\"Typography API\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/template-api/typography-api/\">front-end</a> and <a title=\"Typography API – back-end\" href=\"http://demo.gavick.com/wordpress/meetgavernwp/back-end-api/typography-api-back-end/\">back-end</a>.\r\n\r\nBelow, there are all elements available in theme\'s typography. Typography elements can be divided into three main groups:\r\n<ul>\r\n	<li>typography elements,</li>\r\n	<li>interactive elements,</li>\r\n	<li>elements prepared especially for a particular theme.</li>\r\n</ul>\r\n<h2>Warnings / Infos / Notices / Errors</h2>\r\nThese elements are used for highlighting text fragments together with their importance / type of information by using appropriate colors.\r\n\r\n[warning]Warning text example using Shortcodes[/warning]\r\n\r\n[info]Info text example using Shortcodes[/info]\r\n\r\n[notice]Notice text example using Shortcodes[/notice]\r\n\r\n[error]Error text example using Shortcodes[/error]\r\n<h2>Labels</h2>\r\nLabels are useful for marking the importance of the text fragment or a word given. In the case of longer texts, we recommend to use elements from <em>Warnings / Infos / Notices</em> group.\r\n\r\nThis is a paragraph with the [label style=\"1\"]labeled text[/label] using the first style.\r\n\r\nThis is a paragraph with the [label style=\"2\"]labeled text[/label] using the second style.\r\n\r\nThis is a paragraph with the [label style=\"3\"]labeled text[/label] using the third style.\r\n\r\nThis is a paragraph with the [label style=\"4\"]labeled text[/label] using the fourth style.\r\n\r\nThis is a paragraph with the [label style=\"5\"]labeled text[/label] using the fifth style.\r\n\r\nThis is a paragraph with the [label style=\"6\"]labeled text[/label] using the sixth style.\r\n<h2>Badges</h2>\r\nBadges in their look are similar to Labels, however, you may use them mainly for highlighting shorter texts, e.g. numerical values.\r\n\r\nThis is a paragraph with the badge [badge style=\"1\"]12[/badge] using the first style.\r\n\r\nThis is a paragraph with the badge [badge style=\"2\"]12[/badge] using the second style.\r\n\r\nThis is a paragraph with the badge [badge style=\"3\"]12[/badge] using the third style.\r\n\r\nThis is a paragraph with the badge [badge style=\"4\"]12[/badge] using the fourth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"5\"]12[/badge] using the fifth style.\r\n\r\nThis is a paragraph with the badge [badge style=\"6\"]12[/badge] using the sixth style.\r\n<h2>Code listings</h2>\r\nWe recommend to use an element creating code listings in one out of three styles available for presenting source codes:\r\n\r\n[code style=\"1\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"2\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n\r\n[code style=\"3\"]function helloWorld() {\r\n\r\nalert(\'Hello World!\');\r\n\r\n}[/code]\r\n<h2>Text blocks</h2>\r\nText blocks are useful for generating an element highlighting a particular part of an  entry:\r\n\r\n[textblock style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[textblock style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/textblock]\r\n\r\n[numblock num=\"01\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"02\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"03\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\n[numblock num=\"04\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/numblock]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"left\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nFusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. [floated align=\"right\"]Lorem ipsum dolor sit amet[/floated]\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nullam id dolor id nibh ultricies vehicula ut id elit. [floated align=\"center\"]Lorem ipsum dolor sit amet[/floated] Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\r\n<h2>Quote and Citations</h2>\r\nQuotes elements are useful for highlighting the author of a sentence given:\r\n\r\n[quote style=\"1\" author=\"Author\"]The content of the quote in style 1[/quote]\r\n\r\n[quote style=\"2\" author=\"Author\"]The content of the quote in style 2[/quote]\r\n\r\n[quote style=\"3\" author=\"Author\"]The content of the quote in style 3[/quote]\r\n\r\n[quote style=\"4\" author=\"Author\"]The content of the quote in style 4[/quote]\r\n\r\n[quote style=\"5\" author=\"Author\"]The content of the quote in style 5[/quote]\r\n<h2>Dropcap</h2>\r\nElements creating the first letter highlighted:\r\n\r\n[dropcap style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n\r\n[dropcap style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/dropcap]\r\n<h2>Lists</h2>\r\nOrdered and unordered lists:\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[olist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n<div>[olist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/olist]</div>\r\n</div>\r\n<div class=\"gk-columns\" data-column-count=\"4\">\r\n<div>[ulist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"3\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n<div>[ulist style=\"4\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]</div>\r\n</div>\r\n<h2>Buttons</h2>\r\nButtons in many different variations:\r\n\r\n[button style=\"1\"]Your text[/button] [button style=\"2\"]Your text[/button] [button style=\"3\"]Your text[/button] [button style=\"4\"]Your text[/button] [button style=\"5\"]Your text[/button] [button style=\"6\"]Your text[/button] [button style=\"7\"]Your text[/button]\r\n<h2>Legends</h2>\r\nElements with legend useful while creating text blocks in a frame provided with an appropriate title.\r\n\r\n[legend title=\"Legend style 1\" style=\"1\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 2\" style=\"2\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 3\" style=\"3\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 4\" style=\"4\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n\r\n[legend title=\"Legend style 5\" style=\"5\"]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo.[/legend]\r\n<h2>Raw text</h2>\r\nAn element useful for generating text without formatting:\r\n\r\n[raw]Your text[/raw]\r\n<h2>Tooltips</h2>\r\nTooltips may occur in two forms: a link to a different website with a tooltip or a text connected with the text:\r\n\r\n[tip label=\"Default style\" style=\"1\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Blue style\" style=\"2\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Red style\" style=\"3\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Green style\" style=\"4\" href=\"URL\"]Text of the tooltip[/tip]\r\n\r\n[tip label=\"Yellow style\" style=\"5\" href=\"URL\"]Text of the tooltip[/tip]\r\n<h2>Other typography elements</h2>\r\nElements which could not be groupped to other categories.\r\n\r\nColumns allow to place text in multicolumn layout:\r\n\r\n[columns]\r\n[column]Content for the first column[/column]\r\n[column]Content for the second column[/column]\r\n[column]Content for the third column[/column]\r\n[/columns]\r\n\r\nYou can also adjust the columns width using the <strong>width</strong> attribute:\r\n\r\n[columns width=\"50,25,25\"]\r\n[column]Content for the first column[/column]\r\n[column]Content for the second column[/column]\r\n[column]Content for the third column[/column]\r\n[/columns]\r\n\r\nToggle text - elements useful for creating blocks with text to toggle:\r\n\r\n[toggle header=\"Header text\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\n[toggle header=\"Header text\" open=\"true\"]Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.[/toggle]\r\n\r\nShortcode pageurl allows to place an address to a blog:\r\n\r\n[pageurl]\r\n\r\nA link to a RSS channel:\r\n\r\n[rss href=\"URL\"]Link text[/rss]\r\n\r\nA link to a PDF document:\r\n\r\n[pdf url=\"URL\"]Text of the link[/pdf]\r\n\r\nA private note in an entry, visible for an author only:\r\n\r\n[note]Your private note[/note]\r\n\r\nMail illegible for bots creating data bases for spammers:\r\n\r\n[mail]email.to@obfuscate.com[/mail]\r\n\r\nContent visible for logged in users only:\r\n<div class=\"gk-members\"><strong>Members only</strong>Content for the members only</div>\r\nRelated posts:\r\n\r\n[related limit=\"5\"]','Typography','','inherit','open','open','','207-revision','','','2012-09-19 10:04:59','2012-09-19 10:04:59','',207,'{$page_url}/uncategorized/207-revision/',0,'revision','',0),(569,1,'2012-08-10 08:16:28','2012-08-10 08:16:28','For simplifying shortcodes use available in templates based on GavernWP framework, a button for template\'s typography has been implemented which is available in a posts editor:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\r\n\r\nBy clicking this button, you will see a list of available typography elements:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content by scripts to structure styled in a way given.\r\n\r\nPlease, note that adding a new Shortcode code requires three operations:\r\n<ul>\r\n	<li>adding an entry in shortcodes.js configuration file</li>\r\n	<li>adding PHP code supporting a shortcode given</li>\r\n	<li>adding optional CSS and JavaScript code (if a shortcode given requires it)</li>\r\n</ul>\r\n<strong>shortcodes.js</strong> file in <strong>config</strong> catalog includes entries which are replaced to menu structure visible after clicking a typography button - it includes <strong>$GAVERNWP_SHORTCODES</strong> variable which is a table including objects representing elements of a menu. Each object has three features: <strong>title</strong>, <strong>code</strong> and <strong>submenu</strong>. Let\'s analyze this structure with a <strong>Highlight</strong> position:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - it includes a menu positon name displayed by a script</li>\r\n	<li><strong>code</strong> - it is a shortcode code which will be added to an entry when clicking a menu position given - you have to remember that not all menu positions on the first level have a value in this field - if it was an empty sequence of symbols, it means for a script that clicking on a menu position given does not request any action.</li>\r\n	<li><strong>submenu</strong> - it is a table  of a submenu of a menu position given. Each submenu position is built the same as menu positions as these on the first level but with one difference - a submenu cannot have the next submenu, so you do not add a <strong>submenu</strong> feature in a submenu object.</li>\r\n</ul>\r\nPrzyjmijmy, że dodaliśmy już nasz shortcode do przycisku typografii korzystając z pliku shortcodes.js. Pozostaje nam kwestia obsługi naszego shortcode po stronie szablonu.\r\n\r\nW tym celu należy otworzyć plik<strong> gavern/helpers/helpers.shortcodes.php</strong>.\r\n\r\nPlik ten jest podzielony na trzy główne sekcje zaczynające się od linijek podobnych do:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nJest to instrukcja warunkowa IF związana z daną grupą elementów typografii. Gavern zawiera trzy takie grupy:\r\n<ul>\r\n	<li>elementy typografii - funkcje z nią związane mają prefiks <strong>gavern_ts_</strong> w nazwie</li>\r\n	<li>elementy interaktywne - funkcje z nią związane mają prefiks <strong>gavern_ies_</strong> w nazwie</li>\r\n	<li>elementy chrakterystyczne dla danego szablonu - funkcje z nią związane mają prefiks <strong>gavern_tss_</strong> w nazwie</li>\r\n</ul>\r\nNowe elementy typografii zalecamy dodawać w tej ostatniej grupie - w szablonie Meet GavernWPdomyślnie jest ona pusta. Zalecamy pamiętać o zastosowaniu stosownego dla danej grupy prefiksu w nazwie funkcji np. w wypadku trzeciej grupy będzie to <strong>gavern_tss_</strong>. Sam kod danego Shortcode należy tworzyć według wytycznych opisanych w <a href=\"http://codex.wordpress.org/Shortcode_API\">Shortcode API</a>.\r\n\r\nOstatni krok jest opcjonalny i zależny od typu naszego Shortcode. Jeżeli nasz Shortcode wymaga dodatkowego kod CSS lub JavaScript należy zdefiniować go w plikach <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong>, gdzie <strong>*</strong> oznacza nazwę grupy do której przypisaliśmy dany Shortcode.\r\n\r\nJest bardzo ważne, by umieścić elementy kodu CSS i JavaScript w odpowiednim pliku, gdyż umożliwi to optymalizację kodu całego szablonu w momencie wyłączenia z użytkowania danej grupy kodów Shortcodes.','Typography button','','inherit','open','open','','386-revision-6','','','2012-08-10 08:16:28','2012-08-10 08:16:28','',386,'{$page_url}/uncategorized/386-revision-6/',0,'revision','',0),(568,1,'2012-07-25 13:25:40','2012-07-25 13:25:40','For simplifying shortcodes use available in templates based on GavernWP framework, a button for template\'s typography has been implemented which is available in a posts editor:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\r\n\r\nBy clicking this button, you will see a list of available typography elements:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content\r\n\r\nDla większości elementów można wybrać wersję z określoną stylistyką. Po wybraniu konkretnego stylu pojawi się kod shortcode, który zostanie zamieniony w treści wpisu przez skrypty na konkretną strukturę ostylowaną w dany sposób.\r\n\r\nNależy zwrócić uwagę na fakt, że dodanie nowego kodu Shortcode wymaga trzech operacji:\r\n<ul>\r\n	<li>dodania wpisu w pliku konfiguracyjnym shortcodes.js</li>\r\n	<li>dodania kodu PHP obsługującego dany shortcode</li>\r\n	<li>dodania opcjonalnego kodu CSS i JavaScript (o ile wymaga tego dany shortcode)</li>\r\n</ul>\r\nPlik <strong>shortcodes.js</strong> w katalogu <strong>config</strong> zawiera wpisy, które są zamieniane na strukturę menu widocznego po kliknięciu w przycisk typografii - zawiera on zmienną <strong>$GAVERNWP_SHORTCODES</strong>, która jest tablicą zawierającą obiekty reprezentujące elementy menu wyboru. Każdy obiekt posiada trzy właściwości: <strong>title</strong>, <strong>code</strong> oraz <strong>submenu</strong>. Omówmy tą strukturę na przykładzie pozycji <strong>Highlight</strong>:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - zawiera nazwę pozycji menu wyświetlaną przez skrypt</li>\r\n	<li><strong>code</strong> - jest to kod shortcode, który zostanie dodany do wpisu w momencie kliknięcia danej pozycji menu - należy pamiętać, że nie wszystkie pozycje menu na pierwszym poziomie posiadają wartość w tym polu - jeżeli jest ona pustym ciągiem znaków oznacza to dla skryptu, że kliknięcie w daną pozycję menu ma nie wywoływać żadnej akcji.</li>\r\n	<li><strong>submenu</strong> - jest to tablica podmenu danej pozycji menu. Każda pozycja podmenu jest zbudowana tak samo jak pozycje menu na pierwszym poziomie, z tą różnicą, że podmenu nie może mieć kolejnego podmenu, zatem nie dodajemy w obiekcie podmenu właściwości <strong>submenu</strong>.</li>\r\n</ul>\r\nPrzyjmijmy, że dodaliśmy już nasz shortcode do przycisku typografii korzystając z pliku shortcodes.js. Pozostaje nam kwestia obsługi naszego shortcode po stronie szablonu.\r\n\r\nW tym celu należy otworzyć plik<strong> gavern/helpers/helpers.shortcodes.php</strong>.\r\n\r\nPlik ten jest podzielony na trzy główne sekcje zaczynające się od linijek podobnych do:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nJest to instrukcja warunkowa IF związana z daną grupą elementów typografii. Gavern zawiera trzy takie grupy:\r\n<ul>\r\n	<li>elementy typografii - funkcje z nią związane mają prefiks <strong>gavern_ts_</strong> w nazwie</li>\r\n	<li>elementy interaktywne - funkcje z nią związane mają prefiks <strong>gavern_ies_</strong> w nazwie</li>\r\n	<li>elementy chrakterystyczne dla danego szablonu - funkcje z nią związane mają prefiks <strong>gavern_tss_</strong> w nazwie</li>\r\n</ul>\r\nNowe elementy typografii zalecamy dodawać w tej ostatniej grupie - w szablonie Meet GavernWPdomyślnie jest ona pusta. Zalecamy pamiętać o zastosowaniu stosownego dla danej grupy prefiksu w nazwie funkcji np. w wypadku trzeciej grupy będzie to <strong>gavern_tss_</strong>. Sam kod danego Shortcode należy tworzyć według wytycznych opisanych w <a href=\"http://codex.wordpress.org/Shortcode_API\">Shortcode API</a>.\r\n\r\nOstatni krok jest opcjonalny i zależny od typu naszego Shortcode. Jeżeli nasz Shortcode wymaga dodatkowego kod CSS lub JavaScript należy zdefiniować go w plikach <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong>, gdzie <strong>*</strong> oznacza nazwę grupy do której przypisaliśmy dany Shortcode.\r\n\r\nJest bardzo ważne, by umieścić elementy kodu CSS i JavaScript w odpowiednim pliku, gdyż umożliwi to optymalizację kodu całego szablonu w momencie wyłączenia z użytkowania danej grupy kodów Shortcodes.','Typography button','','inherit','open','open','','386-revision-5','','','2012-07-25 13:25:40','2012-07-25 13:25:40','',386,'{$page_url}/uncategorized/386-revision-5/',0,'revision','',0),(570,1,'2012-08-10 08:53:35','2012-08-10 08:53:35','For simplifying shortcodes use available in templates based on GavernWP framework, a button for template\'s typography has been implemented which is available in a posts editor:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\r\n\r\nBy clicking this button, you will see a list of available typography elements:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content by scripts to structure styled in a way given.\r\n\r\nPlease, note that adding a new Shortcode code requires three operations:\r\n<ul>\r\n	<li>adding an entry in shortcodes.js configuration file</li>\r\n	<li>adding PHP code supporting a shortcode given</li>\r\n	<li>adding optional CSS and JavaScript code (if a shortcode given requires it)</li>\r\n</ul>\r\n<strong>shortcodes.js</strong> file in <strong>config</strong> catalog includes entries which are replaced to menu structure visible after clicking a typography button - it includes <strong>$GAVERNWP_SHORTCODES</strong> variable which is a table including objects representing elements of a menu. Each object has three features: <strong>title</strong>, <strong>code</strong> and <strong>submenu</strong>. Let\'s analyze this structure with a <strong>Highlight</strong> position:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - it includes a menu positon name displayed by a script</li>\r\n	<li><strong>code</strong> - it is a shortcode code which will be added to an entry when clicking a menu position given - you have to remember that not all menu positions on the first level have a value in this field - if it was an empty sequence of symbols, it means for a script that clicking on a menu position given does not request any action.</li>\r\n	<li><strong>submenu</strong> - it is a table  of a submenu of a menu position given. Each submenu position is built the same as menu positions as these on the first level but with one difference - a submenu cannot have the next submenu, so you do not add a <strong>submenu</strong> feature in a submenu object.</li>\r\n</ul>\r\nLet\'s say, we added our shortcode to a typography button using shortcodes.js file. So, there is one thing left to do - support our shortcode on a template side.\r\n\r\nTo do this, you have to open <strong>gavern/helpers/helpers.shortcodes.php</strong> file.\r\n\r\nThis file is divided into three main sections starting with lines similar to:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nIt is a conditional  IF instruction connected with a group of typography elements given. Gavern icludes three groups:\r\n<ul>\r\n	<li>typography elements - functions connected with it have <strong>gavern_ts_</strong> prefix in the title</li>\r\n	<li>interactive elements - functions connected with it have <strong>gavern_ies_</strong> prefix in the title</li>\r\n	<li>elements characteristic for a particular template - functions connected with it have <strong>gavern_tss_</strong> prefix in the title</li>\r\n</ul>\r\nWe recommend to add new typography elements in the last group - in Meet GavernWP template, it is empty by default. Please, remember about using an appropriate prefix in a function name for a group given, e.g. in the case of the third group, it will be <strong>gavern_tss_</strong>. The code itself of a shortcode given has to be created according to guidelines described in<a href=\"http://codex.wordpress.org/Shortcode_API\"> Shortcode API</a>.\r\n\r\nThe last step is rather optional and depends on your Shortcode type. If your Shortcode requires additional CSS or JavaScript code, you have to define it in <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong> files, where <strong>*</strong> is a group name to which a Shortcode given was assigned.\r\n\r\nIt is very important to place elements of CSS and JavaScript code in an appropriate file, as it will give a possibility of optimizing whole template code when switching off given group of Shortcodes codes.','Typography button','','inherit','open','open','','386-revision-7','','','2012-08-10 08:53:35','2012-08-10 08:53:35','',386,'{$page_url}/uncategorized/386-revision-7/',0,'revision','',0),(571,1,'2012-07-30 08:12:58','2012-07-30 08:12:58','W szablonie budowanym w oparciu o framework GavernWP istnieją trzy kluczowe miejsca związane z brandingiem:\r\n<ul>\r\n	<li>logo strony</li>\r\n	<li>stopka strony</li>\r\n	<li>logo frameworka pod stopką strony</li>\r\n</ul>\r\nZa elementy te odpowiadają następujące opcje panelu administracyjnego:\r\n\r\n[screenshot]\r\n\r\nW wypadku loga frameworka można je jedynie włączyć lub wyłączyć.\r\n\r\nTreść stopki strony definiujemy w opcji <strong>Footer content</strong>. Wyświetlona ona zostanie w dolej części strony najczęściej po prawej stronie witryny.\r\n\r\nNajwięcej parametrów związanych jest z logiem strony. Pierwszy krok w konfiguracji logo strony to wybór typu loga, dostępne są następujące rodzaje logo:\r\n<ul>\r\n	<li><strong>Defined in the CSS code</strong> - logo zdefiniowane jest wtedy w stylu CSS szablonu jako element posiadający klasę <strong>cssLogo</strong>. W tym wypadku poza modyfikacją kodu CSS żadne inne zmiany ustawień nie są potrzebne.</li>\r\n	<li><strong>Image logo</strong> - po wybraniu tej opcji pojawią się dodatkowe opcje: [screenshot]. Należy wybrać grafikę logo oraz określić jej rozmiary.</li>\r\n	<li><strong>Text logo</strong> - podobnie jak w wypadku poprzedniej opcji, także tutaj pojawią się dodatkowe opcje: [screenshot]. Opcja <strong>Template logo text</strong> określa czy tekst główny logo jak i podpis pod nim będą brane z ustawień Wordpress (<strong>from Wordpress settings</strong>) czy też będą określone  przez użytkownika (<strong>Own</strong>). W wypadku wybrania tej drugiej opcji pojawią się kolejne dwa pola, które trzeba wypełnić: [screenshot].</li>\r\n	<li><strong>None</strong> - w tym wypadku logo w ogóle nie zostanie wyświetlone.</li>\r\n</ul>\r\n<div><strong>Wskazówka:</strong> opcja <strong>None</strong> jest przydatna w sytuacji gdy sami chcemy w kodzie szablonu zdefiniować kod logo - wystarczy wtedy dodać własny kod do odpowiedniego pliku (najczęściej <strong>layouts/header.php</strong>).</div>\r\n&nbsp;','Template branding settings','','inherit','open','open','','394-revision-5','','','2012-07-30 08:12:58','2012-07-30 08:12:58','',394,'{$page_url}/uncategorized/394-revision-5/',0,'revision','',0),(573,1,'2012-08-09 13:25:04','2012-08-09 13:25:04','GavernWP gives a possibility of advanced menu managing on a website. There is a list of menus available in a template in a configuration file - <strong>menus.json</strong>. These menus are displayed in a <strong>Navigation</strong> tab:\r\n\r\n[screenshot]\r\n\r\nThere are a few options available for each menu available on a website. Website\'s main menu has more options than a menu placed e.g. in page\'s footer.\r\n\r\nThe difference is that a main menu has additional options connected with animation:\r\n\r\n[screenshot]\r\n\r\nThese options allow to specify the type and speed of animation of a submenu.\r\n\r\nAdditionally, all menu types have the two options:\r\n<ul>\r\n	<li>an option specifying whether a menu given was switched on - a menu given can be switched on only on a particular subpages thanks to a <strong>Conditional rule</strong> option - then, you have to insert a rule from  <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of a PHP language in  a Conditional rule field, e.g. a rule displaying a menu on the homepage and in a category called \"Meet GavernWP\" will have the following form:  [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\r\n	<li>an option specifying menu depth i.e. a maximal nesting level for all menu positions displayed. If e.g. you want to skip the second menu level and display menu positions which are on the first menu level, you have to set this option to <strong>1</strong>. Of course <strong>All levels</strong> value will cause displaying all menu postions available for a menu given.</li>\r\n</ul>\r\nNależy pamiętać, że dodanie menu poza dodaniem stosownego wpisu w pliku konfiguracyjnym <strong>menus.json</strong> wymaga też stworzenia w szablonie stosownego kodu.\r\n\r\nKod ten korzysta ze standardowej funkcji <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a>, przy czym należy pamiętać o trzech istotnych kwestiach:\r\n<ul>\r\n	<li>kod funkcji <strong>wp_nav_menu</strong> należy umieścić wewnątrz warunku IF postaci: [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] gdzie <strong>MENU_NAME</strong> to oczywiście nazwa menu np. <strong>mainmenu</strong>. Dzięki temu zapewnimy działanie funkcjonalności, która pozwala wyświetlać menu tylko na wybranych podstronach.</li>\r\n	<li>w wypadku menu głównego warto stworzyć jego duplikat w wersji mobilnej tak by przy wyświetlaniu strony na urządzeniach mobilnych pojawiło się menu dostosowane do urządeń mobilnych.</li>\r\n	<li>w wypadku menu głównego należy zastosować specjalną klasę dziedzicącą po klasie <strong>Walker</strong>: <strong>GKMenuWalker</strong>, natomiast dla menu mobilnego należy wykorzystać klasę <strong>GKMenuWalkerMobile</strong>. Zapewni to wygenerowanie odpowiedniej struktury menu.</li>\r\n</ul>\r\nKod CSS związany z menu znajduje się w plikach <strong>css/wp.css</strong> oraz <strong>css/mobile.css</strong>.\r\n\r\nSkrypty tworzące animacje menu głównego znajdują się w pliku <strong>js/gk.menu.js</strong>.','Navigation settings','','inherit','open','open','','401-revision-4','','','2012-08-09 13:25:04','2012-08-09 13:25:04','',401,'{$page_url}/uncategorized/401-revision-4/',0,'revision','',0),(575,1,'2012-08-10 10:27:14','2012-08-10 10:27:14','GavernWP gives a possibility of advanced menu managing on a website. There is a list of menus available in a template in a configuration file - <strong>menus.json</strong>. These menus are displayed in a <strong>Navigation</strong> tab:\r\n\r\n[screenshot]\r\n\r\nThere are a few options available for each menu available on a website. Website\'s main menu has more options than a menu placed e.g. in page\'s footer.\r\n\r\nThe difference is that a main menu has additional options connected with animation:\r\n\r\n[screenshot]\r\n\r\nThese options allow to specify the type and speed of animation of a submenu.\r\n\r\nAdditionally, all menu types have the two options:\r\n<ul>\r\n	<li>an option specifying whether a menu given was switched on - a menu given can be switched on only on a particular subpages thanks to a <strong>Conditional rule</strong> option - then, you have to insert a rule from  <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of a PHP language in  a Conditional rule field, e.g. a rule displaying a menu on the homepage and in a category called \"Meet GavernWP\" will have the following form:  [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\r\n	<li>an option specifying menu depth i.e. a maximal nesting level for all menu positions displayed. If e.g. you want to skip the second menu level and display menu positions which are on the first menu level, you have to set this option to <strong>1</strong>. Of course <strong>All levels</strong> value will cause displaying all menu postions available for a menu given.</li>\r\n</ul>\r\nYou have to remember that adding a menu, except adding an appropriate entry in an configuration file <strong>menus.json</strong>, also requires creating appropriate code in a template.\r\n\r\nThis code uses a standard <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a> function but you have to remember about three crucial things:\r\n<ul>\r\n	<li>code of <strong>wp_nav_menu</strong> function has to be placed inside IF condition in a form:<strong></strong> [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] where <strong>MENU_NAME</strong> is a menu name, e.g. <strong>mainmenu</strong><strong></strong>. Thanks to it, there will be a functionality which allows to display a menu only on subpages chosen.</li>\r\n	<li>in the case of main menu, it is very useful to create a duplicate in a mobile version so as while displaying a website on mobile devices, a menu will be adjusted to mobile devices.</li>\r\n	<li>in the case of a main menu, you have to use a special class derived from <strong>Walker</strong>: <strong>GKMenuWalker</strong> class; however, for a mobile menu, you have to use <strong>GKMenuWalkerMobile</strong> class. Thanks to it, appropriate menu structure will be generated.</li>\r\n</ul>\r\nCSS code connected with a menu is in <strong>css/wp.css</strong> and <strong>css/mobile.css</strong> files.\r\n\r\nScripts creating main menu animations are in <strong>js/gk.menu.js</strong> file.','Navigation settings','','inherit','open','open','','401-revision-6','','','2012-08-10 10:27:14','2012-08-10 10:27:14','',401,'{$page_url}/uncategorized/401-revision-6/',0,'revision','',0),(578,1,'2012-07-18 21:58:31','2012-07-18 21:58:31','In order to make GavernWP framework more flexible, we decided to use files in JSON format for storing template\'s configuration and options layout in an administration panel.\r\n\r\nYou may find files responsible for template\'s configuration in <strong>gavern/options/</strong> catalog:<strong></strong>\r\n<ul>\r\n	<li><strong>fonts.json</strong> - a file which stores template\'s groups of fonts. By default, there are three main gropus created. In order to create a new group, it is enough to add a next object to the object table existing in this file.plik przechowujący grupy czcionek szablonu.</li>\r\n	<li><strong>menus.json</strong> - you will find space for menu used in a template in this file. You have to remember that except adding a new object, you have to add PHP code generating menu data in template\'s code. It is also worth remembering that there could be one main menu (<strong>main</strong> field in menu object).<strong></strong></li>\r\n	<li><strong>opengraph.json</strong> - this file includes configuration of fields used in a block connected with metabox which is used for generating Open Graph data. We do not recommend to make any changes in it before you get acquainted with Open Graph tags implementation in GavernWP framework.</li>\r\n	<li><strong>styles.json</strong> - this file is used for generating additional template\'s styles. Except adding a new style, you have to remember about creating an additional CSS file which will be loaded while changing template\'s style.</li>\r\n	<li><strong>template.json</strong> - it is the most important configuration file. It includes information about a template and it allows to switch off chosen elements of template administration panel. It is NOT recommended to add new fields to this files because they will not be used without additional PHP code.</li>\r\n	<li><strong>widgets.json</strong> - a file including a list of all positions of widgets. Similarly to <strong>menus.json</strong> file, you have to remember that except adding a new widget position, you have to also add PHP code which generates it in a template.</li>\r\n	<li><strong>widgets.styles.json</strong> - a file used for creating new widget styles. Thanks to its implementation, it allows to assign a style given to one widget type only or exclude some widget types from a style given.</li>\r\n</ul>\r\nIn order to understand better JSON files format, we recommend to visit the official website of  this format.By lepiej zrozumieć format plików JSON polecamy lekturę oficjalne strony <a href=\"http://www.json.org/\">tego formatu</a>.\r\n\r\n&nbsp;','JSON Configuration','','inherit','open','open','','338-revision-5','','','2012-07-18 21:58:31','2012-07-18 21:58:31','',338,'{$page_url}/uncategorized/338-revision-5/',0,'revision','',0),(742,1,'2012-09-09 18:04:14','2012-09-09 18:04:14','','Latest Posts Page','','publish','open','open','','latest-posts-page','','','2012-09-09 18:04:14','2012-09-09 18:04:14','',0,'{$page_url}/?page_id=742',0,'page','',0),(743,1,'2012-09-09 18:02:54','2012-09-09 18:02:54','','Auto Draft','','inherit','open','open','','742-revision','','','2012-09-09 18:02:54','2012-09-09 18:02:54','',742,'{$page_url}/uncategorized/742-revision/',0,'revision','',0),(744,1,'2012-09-09 18:06:48','2012-09-09 18:06:48',' ','','','publish','open','open','','744','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=744',7,'nav_menu_item','',0),(633,1,'2012-08-11 09:42:39','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-08-11 09:42:39','0000-00-00 00:00:00','',0,'{$page_url}/?p=633',0,'post','',0),(581,1,'2012-08-10 20:15:46','2012-08-10 20:15:46','','Page Styles','','publish','open','open','','page-styles','','','2012-11-20 14:47:02','2012-11-20 14:47:02','',0,'{$page_url}/?p=581',2,'nav_menu_item','',0),(746,1,'2012-09-19 09:45:31','2012-09-19 09:45:31','','favicon','','inherit','open','open','','favicon','','','2012-09-19 09:45:31','2012-09-19 09:45:31','',0,'{$page_url}/wp-content/uploads/2012/09/favicon.ico',0,'attachment','image/x-icon',0),(653,1,'2012-08-11 00:35:02','2012-08-11 00:35:02','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li><strong>tabs.json</strong> file - it includes a list of sections visible on the right side of an administration panel:  [screensthot] each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element of a table is a section name displayed in a panel, the second element is a file name without \"<strong>.json</strong>\" extension which stores a list of options available in a section given and the third value refers to whether a section given is visible in a panel. In this case, there will be a <strong>Basic</strong> tab displayed in a panel based on content of <strong>options.basic.json</strong> file.</li>\r\n	<li><strong>options.*.json </strong>files - they include a list of options available in a section given - their names are strictly connected with the content of <strong>tabs.json</strong> file.</li>\r\n</ul>\r\nEach options.*.json file includes three main fields in an object stored:\r\n<ul>\r\n	<li><strong>groupname</strong> - it is a section title</li>\r\n	<li><strong>groupdesc</strong> - it specifies a section description displayed directly under a  section title</li>\r\n	<li><strong>fields</strong> - it includes a table of objects of fields displayed under the title and a section description</li>\r\n</ul>\r\nEach field defined by an object including the following fields:\r\n<ul>\r\n	<li><strong>name</strong> - it specifies an option name which will be connected with a particular field. There is a prefix added automatically to an option name which is a template name (it is stored in a global variable - <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- it specifies a field type. Standard fields are:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - a field including a description text - it is not used for storing any option value</li>\r\n	<li><strong>Text</strong> - the easiest text field allowing to insert short text values</li>\r\n	<li><strong>Textarea</strong> - a text field used for inserting a greater number of text values</li>\r\n	<li><strong>Select</strong> - a select field</li>\r\n	<li><strong>Switcher</strong> - a checkbox restricted to two options: \"Enabled\" and \"Disabled\"</li>\r\n	<li><strong>Media</strong> - a field allowing to choose images</li>\r\n	<li><strong>WidthHeight</strong> - a field allowing to specify two values defining width and height (mostly used with a Media field)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nThese fields are defined in a <strong>gavern/form_elements/standard.php</strong> file and their code was derived from a <strong>GKFormInput</strong> field. It is worth remembering that files connected with options are parsed by a <strong>gavern/form.parser.php</strong> file. Additionally, you may create your own fields types in a <strong>gavern/form_elements</strong> catalog. In GavernWP, we have included the following fields types:\r\n<strong></strong>\r\n<ul>\r\n	<li><strong>Menu</strong> - a field allowing to generate options connected with page\'s menu - used in a Navigation section</li>\r\n	<li><strong>TemplateStyle</strong> - a field allowing to choose page\'s style - used at the beginning of a <strong>Basic</strong> section.</li>\r\n</ul>\r\nThe description of creating your own fields types we will describe in the further part of this article.\r\n<ul>\r\n	<li><strong>label</strong> - it specifies a label text visible next to a field</li>\r\n	<li><strong>tooltip</strong> - (optional) it allows to specify tooltip content which will appear after mousing over a label of a field given</li>\r\n	<li><strong>default</strong> - default value of a field given</li>\r\n	<li><strong>class</strong> - (optional) this field allows to specify CSS classes added to an element while generating it (if a field code supported such a functionality)</li>\r\n	<li><strong>format</strong> - (optional) a field specifying a desired field content in the form of a regular expression. e.g. value: [code][a-zA-Z]{2,5}[/code] specifies that a field given will be filled in correctly only when a user set as its value a sequence of capital or small letters from 2 to 5 symbols.</li>\r\n	<li><strong>required</strong> - (optional) allows to specify whether filling in a particular field was required</li>\r\n	<li><strong>visibility</strong> - (optional) specifies when a particular field is visible. Visibility rules are separated with commas and are created in <strong>FIELD_NAME=VALUE</strong> format - in the case of a few visibility rules, they are linked with <strong>AND</strong> operator. The value of  <strong>FIELD_NAME</strong> is a name without a prefix with a template name. e.g. [code]option1=10,option2=20[/code] will cause that a field given will be visible when an option with <strong>option1</strong> name will be set to <strong>10</strong> and, at the same time, an <strong>option2</strong> option will have have value equals <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (optional) this field is used for storing additional values, e.g. in the case of a <strong>Select</strong> field, it is used for storing names and options values. This field is very useful when creating more advanced fields which may require additional configuration options.</li>\r\n</ul>\r\nAfter adding a new option, you have to remember about its support in the template. Option value is loaded by using a get_option function of a schemata given:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\nwhen <strong>OPTION_NAME</strong> is an option name from a JSON file and <strong>DEFAULT_VALUE</strong> is default value of an option which will be used when a user does not specify a value of an option given. What is important, there is a \"<strong>_</strong>\" symbol which you cannot omit. A prefix with a template name is added in order differentiate values of options of different templates.\r\n<h3>Creating your own field types options</h3>\r\nWhile creating a new field type, you have to start from creating a catalog compliant with a field name, e.g. <strong>CustomField</strong> in a <strong>gavern/form_elements</strong> catalog. Then, you have to create a config.json file in this catalog and fill it in according to the schemata below:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\n<strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> fields have to include particular values; js and css fields are optional - they allow to specify whether a field given has to use additional CSS and JavaScript code (then, a name of files from a field catalog has to be set as a value). Also, you have to create a <strong>customfield.php</strong> file including a <strong>GKFormInputCustomField</strong> class derived after a <strong>GKFormInput</strong> class.\r\n\r\nAlso, a <strong>customfield.css</strong> file must include a safety code at the beginning:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nEach field class has to include at least one public method - <strong>output</strong> not loading any additional arguments. This method must return HTML code of a field given. Field properties froma JSON file are available as class fields, e.g. <strong>required</strong> is available as:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nThe second important public methid of each class of a form field is a <strong>getValue</strong> method which loads one argument - <strong>$default</strong>. Its use is optional and useful only when a value of a field given uses more than one field in the data base. Then, it is useful to overwrite this method - as an example we recommend a standard code of a <strong>WidthHeight</strong> field where overwritting a getValue method was used for storing values of two form fields in one main field created by a <strong>GKInputFormWidthHeight</strong> class.\r\n\r\nThe remaining class methods have to be created according to the needs of the author of a form  field given.','Option files','','inherit','open','open','','427-revision-11','','','2012-08-11 00:35:02','2012-08-11 00:35:02','',427,'{$page_url}/uncategorized/427-revision-11/',0,'revision','',0),(594,1,'2012-07-19 13:11:51','2012-07-19 13:11:51','GavernWP has an extensive mechanism allowing to create additional template styles. We may distinguish two main groups of styles in this mechanism:\r\n<ul>\r\n	<li>style family</li>\r\n	<li>styles included in style family given</li>\r\n</ul>\r\nThe whole configuration is included in <strong>styles.json</strong> file:\r\n\r\n[code][{\r\n\r\n\"family\": \"color\",\r\n\"family_desc\": \"Template color\",\r\n\"family_tooltip\": \"You can select one of the template colors\",\r\n\"styles\": [\r\n{\r\n\"name\": \"Color I\",\r\n\"value\": \"color1\",\r\n\"file\": \"style1.css\"\r\n},\r\n{\r\n\"name\": \"Color II\",\r\n\"value\": \"color2\",\r\n\"file\": \"style2.css\"\r\n}\r\n]\r\n}][/code]\r\n\r\nAs you can see, it includes <strong>color</strong> style family which has two styles, namely: <strong>Color I</strong> and <strong>Color II</strong>.\r\n\r\nIn order to create new style family or a style for style family given, it is enough to create a next object in <strong>styles.json</strong> file and then create CSS files connected with a family given - in the case of <strong>color</strong> family, these are <strong>style1.css</strong> and <strong>style2.css</strong> files.\r\n\r\nGavernWP will load CSS files of a style given in a <strong>head</strong> section - chosen in an administration panel or, if there is a tool for choosing user\'s styles switched on, they will be loaded based on a Cookie file storing data about a style used by a user.\r\n\r\nYou have to remember that for each style family there is at least one CSS file loaded. Therefore, creating coexisting style families like:\r\n<ul>\r\n	<li><strong>dark styles</strong> and <strong>light styles</strong></li>\r\n	<li><strong>blue styles</strong> and <strong>green styles</strong></li>\r\n</ul>\r\nis incorrect because at least one CSS style from each family will be loaded immediately. So the correct one is creating style families responsible for some elements of website styling, e.g. a separate family responsible for website coloring (<strong>colors</strong>) and a separate one for website background (<strong>patterns</strong>).\r\n\r\nGenerally, you have to care about particular style families in order not to overwrite one another.','Color Styles','','inherit','open','open','','349-revision-3','','','2012-07-19 13:11:51','2012-07-19 13:11:51','',349,'{$page_url}/uncategorized/349-revision-3/',0,'revision','',0),(595,1,'2012-08-11 07:41:55','2012-08-11 07:41:55','This is an example of the Video Post Format:\r\n\r\nhttp://www.vimeo.com/22126094\r\n\r\n[notice]<strong>Tip</strong>: for Vimeo videos please remember about using the HTTP (not HTTPS) protocol and the \"www.\" prefix.[/notice]','Video Post','','publish','open','open','','video-post','','','2012-08-11 07:49:36','2012-08-11 07:49:36','',0,'{$page_url}/?p=595',0,'post','',0),(596,1,'2012-08-11 07:41:29','2012-08-11 07:41:29','','Video Post','','inherit','open','open','','595-revision','','','2012-08-11 07:41:29','2012-08-11 07:41:29','',595,'{$page_url}/uncategorized/595-revision/',0,'revision','',0),(597,1,'2012-08-11 07:41:55','2012-08-11 07:41:55','This is an example of the Video Post Format:\r\n\r\nhttps://vimeo.com/22126094','Video Post','','inherit','open','open','','595-revision-2','','','2012-08-11 07:41:55','2012-08-11 07:41:55','',595,'{$page_url}/uncategorized/595-revision-2/',0,'revision','',0),(598,1,'2012-08-11 07:44:37','2012-08-11 07:44:37','This is an example of the Video Post Format:\r\n\r\nhttp://www.vimeo.com/22126094','Video Post','','inherit','open','open','','595-revision-3','','','2012-08-11 07:44:37','2012-08-11 07:44:37','',595,'{$page_url}/uncategorized/595-revision-3/',0,'revision','',0),(599,1,'2012-08-11 07:49:20','2012-08-11 07:49:20','This is an example of the Link Post Format:\r\n\r\n<a href=\"http://www.gavick.com\" target=\"_blank\">GavickPro Website</a>\r\n\r\n<a href=\"http://www.gavick.com/documentation\" target=\"_blank\">GavickPro Documentation</a>','Link Post','','publish','open','open','','link-post','','','2012-11-21 18:02:48','2012-11-21 18:02:48','',0,'{$page_url}/?p=599',0,'post','',0),(600,1,'2012-08-11 07:47:42','2012-08-11 07:47:42','Examples of usage the Post Formats feature.','','','publish','open','open','','600','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=600',22,'nav_menu_item','',0),(793,1,'2012-12-18 09:57:16','2012-12-18 09:57:16','testing','test','','inherit','open','open','','791-revision-2','','','2012-12-18 09:57:16','2012-12-18 09:57:16','',791,'{$page_url}/uncategorized/791-revision-2/',0,'revision','',0),(602,1,'2012-08-11 07:46:05','2012-08-11 07:46:05','This is an example of the Video Post Format:\r\n\r\nhttp://www.vimeo.com/22126094\r\n\r\n[notice]<strong>Tip</strong>: for Vimeo videos please remember about using the HTTP (not HTTPS) protocol and the \"www.\" prefix.[/notice]','Video Post','','inherit','open','open','','595-revision-4','','','2012-08-11 07:46:05','2012-08-11 07:46:05','',595,'{$page_url}/uncategorized/595-revision-4/',0,'revision','',0),(603,1,'2012-08-11 07:51:47','2012-08-11 07:51:47','This is an example of the Quote Post Format:\r\n\r\n[quote style=\"1\" author=\"Amanda Turner\"]Thank you for the great customer service! I appreciated that you had someone to help me, even though it was 2:45 a.m. where I am.[/quote]','Quote Post','','publish','open','open','','quote-post','','','2012-08-11 07:52:44','2012-08-11 07:52:44','',0,'{$page_url}/?p=603',0,'post','',0),(605,1,'2012-08-11 07:51:47','2012-08-11 07:51:47','[quote style=\"1\" author=\"Amanda Turner\"]Thank you for the great customer service! I appreciated that you had someone to help me, even though it was 2:45 a.m. where I am.[/quote]','Quote Post','','inherit','open','open','','603-revision-2','','','2012-08-11 07:51:47','2012-08-11 07:51:47','',603,'{$page_url}/uncategorized/603-revision-2/',0,'revision','',0),(604,1,'2012-08-11 07:51:18','2012-08-11 07:51:18','[quote style=\"1\" author=\"\"]\n\nI would like to say thank you very much for fast reply to counter my problem with my joomla template. I know nothing knowledge using joomla cms and now we\'re alive! Thank you so much.\n\n<cite>- Michelle</cite>[/quote]','Quote Post','','inherit','open','open','','603-revision','','','2012-08-11 07:51:18','2012-08-11 07:51:18','',603,'{$page_url}/uncategorized/603-revision/',0,'revision','',0),(606,1,'2012-08-11 07:52:01','2012-08-11 07:52:01','[quote style=\"1\" author=\"Amanda Turner\"]Thank you for the great customer service! I appreciated that you had someone to help me, even though it was 2:45 a.m. where I am.[/quote]','Quote Post','','inherit','open','open','','603-revision-3','','','2012-08-11 07:52:01','2012-08-11 07:52:01','',603,'{$page_url}/uncategorized/603-revision-3/',0,'revision','',0),(607,1,'2012-08-11 07:54:24','2012-08-11 07:54:24','This is an example of the Aside Post Format, which can be used to show less important posts.\r\n\r\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Curabitur blandit tempus porttitor.','Aside Post','','publish','open','open','','aside-post','','','2012-12-23 23:18:17','2012-12-23 23:18:17','',0,'{$page_url}/?p=607',0,'post','',0),(813,1,'2013-02-12 21:18:55','2013-02-12 21:18:55','This post contains an example of the Custom Post Fields.\r\n\r\n&nbsp;','Custom Post Fields','','inherit','open','open','','739-revision-2','','','2013-02-12 21:18:55','2013-02-12 21:18:55','',739,'{$page_url}/?p=813',0,'revision','',0),(609,1,'2012-08-11 07:57:14','2012-08-11 07:57:14','This is an example of the Image Post Format:\r\n\r\n[caption id=\"attachment_610\" align=\"aligncenter\" width=\"313\"]<a href=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\"><img class=\"size-full wp-image-610\" title=\"Web Responsive Design\" alt=\"Web Responsive Design\" src=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\" width=\"313\" height=\"167\" /></a> Web Responsive Design is fully supported by the GavernWP Framework[/caption]','Image Post','','publish','open','open','','image-post','','','2013-02-24 21:54:45','2013-02-24 21:54:45','',0,'{$page_url}/?p=609',0,'post','',0),(610,1,'2012-08-11 07:56:24','2012-08-11 07:56:24','','Web Responsive Design','Web Responsive Design is fully supported by the GavernWP Framework','inherit','open','open','','responsive','','','2012-08-11 07:56:24','2012-08-11 07:56:24','',609,'{$page_url}/wp-content/uploads/2012/08/responsive.png',0,'attachment','image/png',0),(799,1,'2012-12-23 23:13:13','2012-12-23 23:13:13','This is an example of the Aside Post Format, which can be used to show less important posts.\r\n\r\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Curabitur blandit tempus porttitor.','Aside Post','','inherit','open','open','','607-revision-2','','','2012-12-23 23:13:13','2012-12-23 23:13:13','',607,'{$page_url}/uncategorized/607-revision-2/',0,'revision','',0),(614,1,'2012-05-25 12:46:06','2012-05-25 12:46:06','Lorem ipsum ;)','Login test','','inherit','open','open','','56-revision-3','','','2012-05-25 12:46:06','2012-05-25 12:46:06','',56,'{$page_url}/uncategorized/56-revision-3/',0,'revision','',0),(619,1,'2012-06-11 14:01:53','2012-06-11 14:01:53','Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Donec sed odio dui. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit libero, a pharetra augue. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Aenean lacinia bibendum nulla sed consectetur. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit. Vestibulum id ligula porta felis euismod semper. Donec id elit non mi porta gravida at eget metus. Donec ullamcorper nulla non metus auctor fringilla. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Curabitur blandit tempus porttitor. Donec sed odio dui. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Curabitur blandit tempus porttitor. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras mattis consectetur purus sit amet fermentum. Curabitur blandit tempus porttitor. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nulla vitae elit libero, a pharetra augue. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec sed odio dui. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Lorem ipsum dolor sit amet, consectetur adipiscing elit.','Full width','','inherit','open','open','','131-revision-2','','','2012-06-11 14:01:53','2012-06-11 14:01:53','',131,'{$page_url}/uncategorized/131-revision-2/',0,'revision','',0),(815,1,'2012-12-20 16:02:55','2012-12-20 16:02:55','This is an example of the Image Post Format:\r\n\r\n[caption id=\"attachment_610\" align=\"aligncenter\" width=\"313\"]<a href=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\"><img class=\"size-full wp-image-610\" title=\"Web Responsive Design\" alt=\"Web Responsive Design\" src=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\" width=\"313\" height=\"167\" /></a> Web Responsive Design is fully supported by the GavernWP Framework[/caption]','Image Post','','inherit','open','open','','609-revision','','','2012-12-20 16:02:55','2012-12-20 16:02:55','',609,'{$page_url}/2012/12/20/609-revision/',0,'revision','',0),(805,1,'2013-01-24 12:06:15','2013-01-24 12:06:15','It is an example gallery page.\r\n\r\n[notice]<strong>Tip:</strong> to create the gallery please use attachments from the Media library.[/notice]\r\n\r\n[gallery]','Gallery page','','inherit','open','open','','121-revision','','','2013-01-24 12:06:15','2013-01-24 12:06:15','',121,'{$page_url}/uncategorized/121-revision/',0,'revision','',0),(621,1,'2012-05-24 12:32:40','2012-05-24 12:32:40','It is a simple example of the template tag cloud - as you can see it is awesome :)','Tag cloud','','inherit','open','open','','112-revision-2','','','2012-05-24 12:32:40','2012-05-24 12:32:40','',112,'{$page_url}/uncategorized/112-revision-2/',0,'revision','',0),(622,1,'2012-05-28 17:47:09','2012-05-28 17:47:09','Hello Mate :) Feel free to write us your opinion about our amazing template :)','Contact us','','inherit','open','open','','74-revision-3','','','2012-05-28 17:47:09','2012-05-28 17:47:09','',74,'{$page_url}/uncategorized/74-revision-3/',0,'revision','',0),(625,1,'2012-08-11 09:37:22','2012-08-11 09:37:22','Feel free to write us your opinion/suggestions about our template ;-)','Contact page','','inherit','open','open','','74-revision-5','','','2012-08-11 09:37:22','2012-08-11 09:37:22','',74,'{$page_url}/uncategorized/74-revision-5/',0,'revision','',0),(623,1,'2012-08-11 09:35:23','2012-08-11 09:35:23','Hello Mate :) Feel free to write us your opinion about our amazing template :)','Contact page','','inherit','open','open','','74-autosave','','','2012-08-11 09:35:23','2012-08-11 09:35:23','',74,'{$page_url}/uncategorized/74-autosave/',0,'revision','',0),(624,1,'2012-08-11 09:34:22','2012-08-11 09:34:22','Hello Mate :) Feel free to write us your opinion about our amazing template :)','Contact page','','inherit','open','open','','74-revision-4','','','2012-08-11 09:34:22','2012-08-11 09:34:22','',74,'{$page_url}/uncategorized/74-revision-4/',0,'revision','',0),(648,1,'2012-12-20 16:03:57','2012-12-20 16:03:57','This is an example of the Image Post Format:\n\n[caption id=\"attachment_610\" align=\"aligncenter\" width=\"313\"]<a href=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\"><img class=\"size-full wp-image-610\" title=\"Web Responsive Design\" alt=\"Web Responsive Design\" src=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\" width=\"313\" height=\"167\" /></a> Web Responsive Design is fully supported by the GavernWP Framework[/caption]','Image Post','','inherit','open','open','','609-autosave','','','2012-12-20 16:03:57','2012-12-20 16:03:57','',609,'{$page_url}/uncategorized/609-autosave/',0,'revision','',0),(804,1,'2012-08-11 09:39:08','2012-08-11 09:39:08','It is an example gallery page.\r\n\r\n[notice]<strong>Tip:</strong> to create the gallery please use attachments from the Media library.[/notice]','Gallery page','','inherit','open','open','','121-revision-4','','','2012-08-11 09:39:08','2012-08-11 09:39:08','',121,'{$page_url}/uncategorized/121-revision-4/',0,'revision','',0),(803,1,'2013-02-12 21:23:59','2013-02-12 21:23:59','This post contains an example of the Custom Post Fields.\n\n&nbsp;','Custom Post Fields','','inherit','open','open','','739-autosave','','','2013-02-12 21:23:59','2013-02-12 21:23:59','',739,'{$page_url}/uncategorized/739-autosave/',0,'revision','',0),(627,1,'2012-08-11 09:32:59','2012-08-11 09:32:59','Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Donec sed odio dui. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit libero, a pharetra augue. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Aenean lacinia bibendum nulla sed consectetur. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit. Vestibulum id ligula porta felis euismod semper. Donec id elit non mi porta gravida at eget metus. Donec ullamcorper nulla non metus auctor fringilla. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Curabitur blandit tempus porttitor. Donec sed odio dui. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Curabitur blandit tempus porttitor. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras mattis consectetur purus sit amet fermentum. Curabitur blandit tempus porttitor. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Nulla vitae elit libero, a pharetra augue. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec sed odio dui. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Lorem ipsum dolor sit amet, consectetur adipiscing elit.','Full width page','','inherit','open','open','','131-revision-3','','','2012-08-11 09:32:59','2012-08-11 09:32:59','',131,'{$page_url}/uncategorized/131-revision-3/',0,'revision','',0),(629,1,'2012-08-11 09:32:13','2012-08-11 09:32:13','Lorem ipsum ;)','Login page','','inherit','open','open','','56-revision-4','','','2012-08-11 09:32:13','2012-08-11 09:32:13','',56,'{$page_url}/uncategorized/56-revision-4/',0,'revision','',0),(630,1,'2012-08-11 09:33:15','2012-08-11 09:33:15','It is a simple example of the template tag cloud - as you can see it is awesome :)','Tag cloud page','','inherit','open','open','','112-revision-3','','','2012-08-11 09:33:15','2012-08-11 09:33:15','',112,'{$page_url}/uncategorized/112-revision-3/',0,'revision','',0),(739,1,'2012-09-02 09:56:50','2012-09-02 09:56:50','This post contains an example of the Custom Post Fields.\r\n\r\n&nbsp;','Custom Post Fields','','publish','open','open','','custom-post-fields','','','2013-02-12 21:22:58','2013-02-12 21:22:58','',0,'{$page_url}/?p=739',0,'post','',0),(791,1,'2012-12-18 09:57:16','2012-12-18 09:57:16','testing','test','','trash','open','open','','test','','','2012-12-18 09:57:33','2012-12-18 09:57:33','',0,'{$page_url}/?p=791',0,'post','',0),(789,1,'2012-12-15 10:39:30','2012-12-15 10:39:30','This page presents widget styles available in this theme.\r\n\r\nWe have also included a really useful mechanism - you can put the icon in the header using following syntax:\r\n\r\n[code][icon-name] Header text[/code]\r\n\r\nWhere icon-name is one of <a title=\"Available classes\" href=\"http://twitter.github.com/bootstrap/base-css.html#icons\" target=\"_blank\">available classes</a>.\r\n\r\n[ulist style=\"1\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]','Widget Styles','','inherit','open','open','','506-revision-2','','','2012-12-15 10:39:30','2012-12-15 10:39:30','',506,'{$page_url}/uncategorized/506-revision-2/',0,'revision','',0),(632,1,'2012-08-11 09:40:49','2012-08-11 09:40:49',' ','','','publish','open','open','','632','','','2012-11-20 14:47:02','2012-11-20 14:47:02','',0,'{$page_url}/?p=632',5,'nav_menu_item','',0),(641,1,'2012-12-15 10:41:43','2012-12-15 10:41:43','This page presents widget styles available in this theme.\n\nWe have also included a really useful mechanism - you can put the icon in the header using following syntax:\n\n[code][icon-name] Header text[/code]\n\nWhere icon-name is one of <a title=\"Available classes\" href=\"http://twitter.github.com/bootstrap/base-css.html#icons\" target=\"_blank\">available classes</a>.','Widget Styles','','inherit','open','open','','506-autosave','','','2012-12-15 10:41:43','2012-12-15 10:41:43','',506,'{$page_url}/uncategorized/506-autosave/',0,'revision','',0),(638,1,'2012-07-28 13:50:38','2012-07-28 13:50:38','Widget areas available in the Meet GavernWP template:\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\"><img class=\"aligncenter size-full wp-image-510\" title=\"Widget areas\" src=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\" alt=\"Widget areas\" width=\"752\" height=\"646\" /></a>','Widget areas','','inherit','open','open','','509-revision-3','','','2012-07-28 13:50:38','2012-07-28 13:50:38','',509,'{$page_url}/uncategorized/509-revision-3/',0,'revision','',0),(645,1,'2012-08-12 08:40:51','2012-08-12 08:40:51','Widget areas available in the Meet GavernWP template:\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\"><img class=\"aligncenter size-full wp-image-510\" title=\"Widget areas\" src=\"{$page_url}/wp-content/uploads/2012/07/widget_areas.png\" alt=\"Widget areas\" width=\"752\" height=\"692\" /></a>','Widget areas','','inherit','open','open','','509-revision-4','','','2012-08-12 08:40:51','2012-08-12 08:40:51','',509,'{$page_url}/uncategorized/509-revision-4/',0,'revision','',0),(790,1,'2012-12-15 10:40:18','2012-12-15 10:40:18','This page presents widget styles available in this theme.\r\n\r\nWe have also included a really useful mechanism - you can put the icon in the header using following syntax:\r\n\r\n[code][icon-name] Header text[/code]\r\n\r\nWhere icon-name is one of <a title=\"Available classes\" href=\"http://twitter.github.com/bootstrap/base-css.html#icons\" target=\"_blank\">available classes</a>.\r\n\r\n[ulist style=\"2\"]\r\nitem1\r\nitem2\r\nitem3\r\n[/ulist]','Widget Styles','','inherit','open','open','','506-revision-3','','','2012-12-15 10:40:18','2012-12-15 10:40:18','',506,'{$page_url}/uncategorized/506-revision-3/',0,'revision','',0),(647,1,'2012-08-11 09:37:30','2012-08-11 09:37:30','Hello, feel free to write us your opinion/suggestions about our template ;-)','Contact page','','inherit','open','open','','74-revision-6','','','2012-08-11 09:37:30','2012-08-11 09:37:30','',74,'{$page_url}/uncategorized/74-revision-6/',0,'revision','',0),(649,1,'2012-12-23 23:17:06','2012-12-23 23:17:06','This is an example of the Aside Post Format, which can be used to show less important posts.\n\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n\n<!--more-->Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Curabitur blandit tempus porttitor.','Aside Post','','inherit','open','open','','607-autosave','','','2012-12-23 23:17:06','2012-12-23 23:17:06','',607,'{$page_url}/uncategorized/607-autosave/',0,'revision','',0),(650,1,'2012-08-12 17:27:35','2012-08-12 17:27:35','This is an example of the Quote Post Format:\n\n[quote style=\"1\" author=\"Amanda Turner\"]Thank you for the great customer service! I appreciated that you had someone to help me, even though it was 2:45 a.m. where I am.[/quote]','Quote Post','','inherit','open','open','','603-autosave','','','2012-08-12 17:27:35','2012-08-12 17:27:35','',603,'{$page_url}/uncategorized/603-autosave/',0,'revision','',0),(651,1,'2012-11-21 17:50:10','2012-11-21 17:50:10','This is an example of the Link Post Format:\n\n<a href=\"http://www.gavick.com\" target=\"_blank\">GavickPro Website</a>\n\n<a href=\"http://www.gavick.com/documentation\" target=\"_blank\">GavickPro Documentation</a>','Link Post','','inherit','open','open','','599-autosave','','','2012-11-21 17:50:10','2012-11-21 17:50:10','',599,'{$page_url}/uncategorized/599-autosave/',0,'revision','',0),(652,1,'2012-08-12 17:27:42','2012-08-12 17:27:42','This is an example of the Video Post Format:\n\nhttp://www.vimeo.com/22126094\n\n[notice]<strong>Tip</strong>: for Vimeo videos please remember about using the HTTP (not HTTPS) protocol and the \"www.\" prefix.[/notice]','Video Post','','inherit','open','open','','595-autosave','','','2012-08-12 17:27:42','2012-08-12 17:27:42','',595,'{$page_url}/uncategorized/595-autosave/',0,'revision','',0),(654,1,'2012-08-12 17:31:09','2012-08-12 17:31:09','','Sidebar','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-1','','','2012-08-12 17:31:09','2012-08-12 17:31:09','',427,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-1.jpg',0,'attachment','image/jpeg',0),(655,1,'2012-08-12 17:29:39','2012-08-12 17:29:39','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li><strong>tabs.json</strong> file - it includes a list of sections visible on the right side of an administration panel:  [screensthot] each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element of a table is a section name displayed in a panel, the second element is a file name without \"<strong>.json</strong>\" extension which stores a list of options available in a section given and the third value refers to whether a section given is visible in a panel. In this case, there will be a <strong>Basic</strong> tab displayed in a panel based on content of <strong>options.basic.json</strong> file.</li>\r\n	<li><strong>options.*.json </strong>files - they include a list of options available in a section given - their names are strictly connected with the content of <strong>tabs.json</strong> file.</li>\r\n</ul>\r\nEach options.*.json file includes three main fields in an object stored:\r\n<ul>\r\n	<li><strong>groupname</strong> - it is a section title</li>\r\n	<li><strong>groupdesc</strong> - it specifies a section description displayed directly under a  section title</li>\r\n	<li><strong>fields</strong> - it includes a table of objects of fields displayed under the title and a section description</li>\r\n</ul>\r\nEach field defined by an object including the following fields:\r\n<ul>\r\n	<li><strong>name</strong> - it specifies an option name which will be connected with a particular field. There is a prefix added automatically to an option name which is a theme name (it is stored in a global variable - <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- it specifies a field type. Standard fields are:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - a field including a description text - it is not used for storing any option value</li>\r\n	<li><strong>Text</strong> - the easiest text field allowing to insert short text values</li>\r\n	<li><strong>Textarea</strong> - a text field used for inserting a greater number of text values</li>\r\n	<li><strong>Select</strong> - a select field</li>\r\n	<li><strong>Switcher</strong> - a checkbox restricted to two options: \"Enabled\" and \"Disabled\"</li>\r\n	<li><strong>Media</strong> - a field allowing to choose images</li>\r\n	<li><strong>WidthHeight</strong> - a field allowing to specify two values defining width and height (mostly used with a Media field)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nThese fields are defined in a <strong>gavern/form_elements/standard.php</strong> file and their code was derived from a <strong>GKFormInput</strong> field. It is worth remembering that files connected with options are parsed by a <strong>gavern/form.parser.php</strong> file. Additionally, you may create your own fields types in a <strong>gavern/form_elements</strong> catalog. In GavernWP, we have included the following fields types:\r\n<strong></strong>\r\n<ul>\r\n	<li><strong>Menu</strong> - a field allowing to generate options connected with page\'s menu - used in a Navigation section</li>\r\n	<li><strong>TemplateStyle</strong> - a field allowing to choose page\'s style - used at the beginning of a <strong>Basic</strong> section.</li>\r\n</ul>\r\nThe description of creating your own fields types we will describe in the further part of this article.\r\n<ul>\r\n	<li><strong>label</strong> - it specifies a label text visible next to a field</li>\r\n	<li><strong>tooltip</strong> - (optional) it allows to specify tooltip content which will appear after mousing over a label of a field given</li>\r\n	<li><strong>default</strong> - default value of a field given</li>\r\n	<li><strong>class</strong> - (optional) this field allows to specify CSS classes added to an element while generating it (if a field code supported such a functionality)</li>\r\n	<li><strong>format</strong> - (optional) a field specifying a desired field content in the form of a regular expression. e.g. value: [code][a-zA-Z]{2,5}[/code] specifies that a field given will be filled in correctly only when a user set as its value a sequence of capital or small letters from 2 to 5 symbols.</li>\r\n	<li><strong>required</strong> - (optional) allows to specify whether filling in a particular field was required</li>\r\n	<li><strong>visibility</strong> - (optional) specifies when a particular field is visible. Visibility rules are separated with commas and are created in <strong>FIELD_NAME=VALUE</strong> format - in the case of a few visibility rules, they are linked with <strong>AND</strong> operator. The value of  <strong>FIELD_NAME</strong> is a name without a prefix with a theme name. e.g. [code]option1=10,option2=20[/code] will cause that a field given will be visible when an option with <strong>option1</strong> name will be set to <strong>10</strong> and, at the same time, an <strong>option2</strong> option will have have value equals <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (optional) this field is used for storing additional values, e.g. in the case of a <strong>Select</strong> field, it is used for storing names and options values. This field is very useful when creating more advanced fields which may require additional configuration options.</li>\r\n</ul>\r\nAfter adding a new option, you have to remember about its support in the theme. Option value is loaded by using a get_option function of a schemata given:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\nwhen <strong>OPTION_NAME</strong> is an option name from a JSON file and <strong>DEFAULT_VALUE</strong> is default value of an option which will be used when a user does not specify a value of an option given. What is important, there is a \"<strong>_</strong>\" symbol which you cannot omit. A prefix with a theme name is added in order differentiate values of options of different themes.\r\n<h3>Creating your own field types options</h3>\r\nWhile creating a new field type, you have to start from creating a catalog compliant with a field name, e.g. <strong>CustomField</strong> in a <strong>gavern/form_elements</strong> catalog. Then, you have to create a config.json file in this catalog and fill it in according to the schemata below:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\n<strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> fields have to include particular values; js and css fields are optional - they allow to specify whether a field given has to use additional CSS and JavaScript code (then, a name of files from a field catalog has to be set as a value). Also, you have to create a <strong>customfield.php</strong> file including a <strong>GKFormInputCustomField</strong> class derived after a <strong>GKFormInput</strong> class.\r\n\r\nAlso, a <strong>customfield.css</strong> file must include a safety code at the beginning:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nEach field class has to include at least one public method - <strong>output</strong> not loading any additional arguments. This method must return HTML code of a field given. Field properties froma JSON file are available as class fields, e.g. <strong>required</strong> is available as:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nThe second important public methid of each class of a form field is a <strong>getValue</strong> method which loads one argument - <strong>$default</strong>. Its use is optional and useful only when a value of a field given uses more than one field in the data base. Then, it is useful to overwrite this method - as an example we recommend a standard code of a <strong>WidthHeight</strong> field where overwritting a getValue method was used for storing values of two form fields in one main field created by a <strong>GKInputFormWidthHeight</strong> class.\r\n\r\nThe remaining class methods have to be created according to the needs of the author of a form  field given.','Option files','','inherit','open','open','','427-revision-12','','','2012-08-12 17:29:39','2012-08-12 17:29:39','',427,'{$page_url}/uncategorized/427-revision-12/',0,'revision','',0),(656,1,'2012-08-12 17:33:43','2012-08-12 17:33:43','','Social API','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-2','','','2012-08-12 17:33:43','2012-08-12 17:33:43','',424,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-2.jpg',0,'attachment','image/jpeg',0),(657,1,'2012-07-30 10:58:19','2012-07-30 10:58:19','A section of options connected with Social API includes five groups of options:\r\n<ul>\r\n	<li>options connected with sharing at Facebook</li>\r\n	<li>options connected with sharing on G+</li>\r\n	<li>options connected with sharing on Twitter</li>\r\n	<li>options connected with sharing on Pinterest</li>\r\n	<li>options allowing to switch on/off Social API on particular subpages.</li>\r\n</ul>\r\nOptions connected with sharing are the equivalent of parameters available in online editors, used for creating buttons like:\r\n<ul>\r\n	<li><a href=\"https://developers.facebook.com/docs/reference/plugins/like/\" target=\"_blank\">Facebook - \'like it\' button</a></li>\r\n	<li><a href=\"https://developers.google.com/+/plugins/+1button/\" target=\"_blank\">Goggle Plus - \'+1\' button</a></li>\r\n	<li><a href=\"https://dev.twitter.com/docs/tweet-button\" target=\"_blank\">Twitter - \'tweet\' button</a></li>\r\n	<li><a href=\"http://pinterest.com/about/goodies/\" target=\"_blank\">Pinterest - \'pin it\' button</a></li>\r\n</ul>\r\nThe last group of options allows to specify where they will be displayed - thanks to <strong>Include/Exclude specified articles from Social API</strong> option, it is possible to switch off Social API completely or switch on/off this functionality only for chosen posts, subpages and categories.\r\n\r\nWe specify the list of posts, subpages and categories in three last options:\r\n\r\n[screenshot]\r\n\r\nas a sequence of ID, slug or the names of posts given, subpages or categories separated with comas, e.g.  [code]1,5,25[/code] or [code]typography,template-settings,template-essentials[/code]','Social API settings','','inherit','open','open','','424-revision-4','','','2012-07-30 10:58:19','2012-07-30 10:58:19','',424,'{$page_url}/uncategorized/424-revision-4/',0,'revision','',0),(659,1,'2012-08-12 17:36:11','2012-08-12 17:36:11','','Advanced settings','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-3','','','2012-08-12 17:36:11','2012-08-12 17:36:11','',422,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-3.jpg',0,'attachment','image/jpeg',0),(660,1,'2012-08-12 17:36:28','2012-08-12 17:36:28','','Open Graph Metabox','','inherit','open','open','','edit-post-meet-gavern-wp-wordpress-1','','','2012-08-12 17:36:28','2012-08-12 17:36:28','',422,'{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg',0,'attachment','image/jpeg',0),(661,1,'2012-07-27 08:45:53','2012-07-27 08:45:53','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n[screenshot]\r\n<ul>\r\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - it switches on a metatag forcing use of  <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> plugin on Internet Explorer browsers if it is installed.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - it activates parsing emoticons to a graphic form in widgets.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - it activates parsing of <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> in widgets.</li>\r\n	<li><strong>Use Thickbox</strong> - it allows to switch on Thickbox  script for presenting images included in posts.</li>\r\n	<li><strong>Value for the $content_width variable</strong> -  <strong>$content_width</strong> variable is used while creating thumbnails of images for posts, that\'s why it has to be defined as an appropriate value - we recommend to set the value not bigger than the max. page\'s width.</li>\r\n	<li><strong>Use the override.css file</strong> - thanks to switching on this option, an <strong>override.css</strong> file will appear at the end of the list of CSS files which allows to overwrite template\'s CSS rules easily without interference in existing CSS code.</li>\r\n	<li><strong>Enable support for Open Search</strong> - it allows to switch on support for  <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> technology.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - it allows to switch on support for <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph </a> technology - after switching on this option, an additional metabox will appear on a page for editing posts: [screenshot]</li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-8','','','2012-07-27 08:45:53','2012-07-27 08:45:53','',422,'{$page_url}/uncategorized/422-revision-8/',0,'revision','',0),(662,1,'2012-08-12 17:31:53','2012-08-12 17:31:53','Modification of administration panel content  in GavernWP is very easy - it is based on JSON files which include a list of options. Thanks to it, creating new options available in an administration panel is very easy.\r\n\r\nOptions files are in gavern/options catalog in a folder connected with a currently used language. In the catalog, you will find two main files groups:\r\n<ul>\r\n	<li><strong>tabs.json</strong> file - it includes a list of sections visible on the right side of an administration panel: <a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-654\" title=\"Sidebar\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"231\" height=\"485\" /></a> each section is described with a table in the form [code][\"Basic\", \"options.basic\", \"enabled\"][/code] the first element of a table is a section name displayed in a panel, the second element is a file name without \"<strong>.json</strong>\" extension which stores a list of options available in a section given and the third value refers to whether a section given is visible in a panel. In this case, there will be a <strong>Basic</strong> tab displayed in a panel based on content of <strong>options.basic.json</strong> file.</li>\r\n	<li><strong>options.*.json </strong>files - they include a list of options available in a section given - their names are strictly connected with the content of <strong>tabs.json</strong> file.</li>\r\n</ul>\r\nEach options.*.json file includes three main fields in an object stored:\r\n<ul>\r\n	<li><strong>groupname</strong> - it is a section title</li>\r\n	<li><strong>groupdesc</strong> - it specifies a section description displayed directly under a  section title</li>\r\n	<li><strong>fields</strong> - it includes a table of objects of fields displayed under the title and a section description</li>\r\n</ul>\r\nEach field defined by an object including the following fields:\r\n<ul>\r\n	<li><strong>name</strong> - it specifies an option name which will be connected with a particular field. There is a prefix added automatically to an option name which is a theme name (it is stored in a global variable - <strong>$tpl-&gt;name</strong>).</li>\r\n	<li><strong>type</strong>- it specifies a field type. Standard fields are:\r\n<ul>\r\n	<li><strong>TextBlock</strong> - a field including a description text - it is not used for storing any option value</li>\r\n	<li><strong>Text</strong> - the easiest text field allowing to insert short text values</li>\r\n	<li><strong>Textarea</strong> - a text field used for inserting a greater number of text values</li>\r\n	<li><strong>Select</strong> - a select field</li>\r\n	<li><strong>Switcher</strong> - a checkbox restricted to two options: \"Enabled\" and \"Disabled\"</li>\r\n	<li><strong>Media</strong> - a field allowing to choose images</li>\r\n	<li><strong>WidthHeight</strong> - a field allowing to specify two values defining width and height (mostly used with a Media field)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\nThese fields are defined in a <strong>gavern/form_elements/standard.php</strong> file and their code was derived from a <strong>GKFormInput</strong> field. It is worth remembering that files connected with options are parsed by a <strong>gavern/form.parser.php</strong> file. Additionally, you may create your own fields types in a <strong>gavern/form_elements</strong> catalog. In GavernWP, we have included the following fields types:\r\n<strong></strong>\r\n<ul>\r\n	<li><strong>Menu</strong> - a field allowing to generate options connected with page\'s menu - used in a Navigation section</li>\r\n	<li><strong>TemplateStyle</strong> - a field allowing to choose page\'s style - used at the beginning of a <strong>Basic</strong> section.</li>\r\n</ul>\r\nThe description of creating your own fields types we will describe in the further part of this article.\r\n<ul>\r\n	<li><strong>label</strong> - it specifies a label text visible next to a field</li>\r\n	<li><strong>tooltip</strong> - (optional) it allows to specify tooltip content which will appear after mousing over a label of a field given</li>\r\n	<li><strong>default</strong> - default value of a field given</li>\r\n	<li><strong>class</strong> - (optional) this field allows to specify CSS classes added to an element while generating it (if a field code supported such a functionality)</li>\r\n	<li><strong>format</strong> - (optional) a field specifying a desired field content in the form of a regular expression. e.g. value: [code][a-zA-Z]{2,5}[/code] specifies that a field given will be filled in correctly only when a user set as its value a sequence of capital or small letters from 2 to 5 symbols.</li>\r\n	<li><strong>required</strong> - (optional) allows to specify whether filling in a particular field was required</li>\r\n	<li><strong>visibility</strong> - (optional) specifies when a particular field is visible. Visibility rules are separated with commas and are created in <strong>FIELD_NAME=VALUE</strong> format - in the case of a few visibility rules, they are linked with <strong>AND</strong> operator. The value of  <strong>FIELD_NAME</strong> is a name without a prefix with a theme name. e.g. [code]option1=10,option2=20[/code] will cause that a field given will be visible when an option with <strong>option1</strong> name will be set to <strong>10</strong> and, at the same time, an <strong>option2</strong> option will have have value equals <strong>20</strong>.</li>\r\n	<li><strong>other</strong> - (optional) this field is used for storing additional values, e.g. in the case of a <strong>Select</strong> field, it is used for storing names and options values. This field is very useful when creating more advanced fields which may require additional configuration options.</li>\r\n</ul>\r\nAfter adding a new option, you have to remember about its support in the theme. Option value is loaded by using a get_option function of a schemata given:\r\n\r\n[code]get_option($tpl-&gt;name . \'_OPTION_NAME\', \'DEFAULT_VALUE\');[/code]\r\n\r\nwhen <strong>OPTION_NAME</strong> is an option name from a JSON file and <strong>DEFAULT_VALUE</strong> is default value of an option which will be used when a user does not specify a value of an option given. What is important, there is a \"<strong>_</strong>\" symbol which you cannot omit. A prefix with a theme name is added in order differentiate values of options of different themes.\r\n<h3>Creating your own field types options</h3>\r\nWhile creating a new field type, you have to start from creating a catalog compliant with a field name, e.g. <strong>CustomField</strong> in a <strong>gavern/form_elements</strong> catalog. Then, you have to create a config.json file in this catalog and fill it in according to the schemata below:\r\n\r\n[code]{\r\n\r\n\"name\": \"CustomField\",\r\n\r\n\"description\": \"Example Custom Field\",\r\n\r\n\"js\": false,\r\n\r\n\"css\": false,\r\n\r\n\"php\": \"customfield.php\",\r\n\r\n\"class\": \"GKFormInputCustomField\"\r\n\r\n}[/code]\r\n\r\n<strong>name</strong>, <strong>description</strong>, <strong>php</strong> i <strong>class</strong> fields have to include particular values; js and css fields are optional - they allow to specify whether a field given has to use additional CSS and JavaScript code (then, a name of files from a field catalog has to be set as a value). Also, you have to create a <strong>customfield.php</strong> file including a <strong>GKFormInputCustomField</strong> class derived after a <strong>GKFormInput</strong> class.\r\n\r\nAlso, a <strong>customfield.css</strong> file must include a safety code at the beginning:\r\n\r\n[code]// disable direct access to the file\r\n\r\ndefined(\'GAVERN_WP\') or die(\'Access denied\');[/code]\r\n\r\nEach field class has to include at least one public method - <strong>output</strong> not loading any additional arguments. This method must return HTML code of a field given. Field properties froma JSON file are available as class fields, e.g. <strong>required</strong> is available as:\r\n\r\n[code]$this-&gt;required[/code]\r\n\r\nThe second important public methid of each class of a form field is a <strong>getValue</strong> method which loads one argument - <strong>$default</strong>. Its use is optional and useful only when a value of a field given uses more than one field in the data base. Then, it is useful to overwrite this method - as an example we recommend a standard code of a <strong>WidthHeight</strong> field where overwritting a getValue method was used for storing values of two form fields in one main field created by a <strong>GKInputFormWidthHeight</strong> class.\r\n\r\nThe remaining class methods have to be created according to the needs of the author of a form  field given.','Option files','','inherit','open','open','','427-revision-13','','','2012-08-12 17:31:53','2012-08-12 17:31:53','',427,'{$page_url}/uncategorized/427-revision-13/',0,'revision','',0),(755,1,'2012-11-20 13:02:51','2012-11-20 13:02:51','GavernWP has an advanced panel for managing theme\'s options in an administration panel. These options have been divided into a few main groups:\r\n<ul>\r\n	<li>Basic settings</li>\r\n	<li>Layout settings</li>\r\n	<li>Fonts settings</li>\r\n	<li>Navigation settings</li>\r\n	<li>Advanced settings</li>\r\n	<li>Shortcodes settings</li>\r\n	<li>Social API settings</li>\r\n	<li>Theme branding settings</li>\r\n	<li>Back-end branding settings</li>\r\n	<li>SEO settings</li>\r\n</ul>\r\nAlso, some additional elements generated by a framework in an administration panel in some various places appear, namely:\r\n<ul>\r\n	<li>Typography button</li>\r\n	<li>Widget rules</li>\r\n	<li>Open Graph metabox</li>\r\n	<li>GavernWP SEO settings metaboxes</li>\r\n</ul>\r\nIt is also worth getting acquainted with a theme configuration with files use in JSON format:\r\n<ul>\r\n	<li>Option files</li>\r\n	<li>Theme configuration</li>\r\n</ul>\r\nThe ability of these files edition, gives a possibility of deep interference in websites work based on GaverWP.','Main back-end features','','inherit','open','open','','419-revision-2','','','2012-11-20 13:02:51','2012-11-20 13:02:51','',419,'{$page_url}/uncategorized/419-revision-2/',0,'revision','',0),(664,1,'2012-08-12 17:51:44','2012-08-12 17:51:44','','Basic settings','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-4','','','2012-08-12 17:51:44','2012-08-12 17:51:44','',416,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-4.jpg',0,'attachment','image/jpeg',0),(665,1,'2012-08-12 17:52:41','2012-08-12 17:52:41','','Author block','','inherit','open','open','','main-front-end-features-free-wordpress-template','','','2012-08-12 17:52:41','2012-08-12 17:52:41','',416,'{$page_url}/wp-content/uploads/2012/07/Main-front-end-features-»-Free-WordPress-template.jpg',0,'attachment','image/jpeg',0),(666,1,'2012-08-12 15:57:06','2012-08-12 15:57:06','Basic settings of GavernWP allow to specify basic parameters connected with page\'s display:\r\n\r\n[screenshot]\r\n\r\nThe first option allows to choose a color version of a template. In this place, there may appear a few various fields depending on the conent of <strong>styles.json</strong> configuration file.\r\n\r\nThere is an option allowing to switch a style-switcher after an option/options of choosing template\'s styles  - it is an element allowing for a website\'s user to choose a template style himself/herself.\r\n\r\nThe next option is connected with switching on breadcrumbs element on a website. There are the following options to choose from: <strong>Enabled</strong>, <strong>Disabled</strong> and <strong>Conditional rule</strong> - then, you have to set a rule using <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of PHP language in a <strong>Conditional rule</strong> field, e.g. a rule displayinga a breadcrumbs element on the homepage and in the \"Meet GavernWP\" category will be in the following form: [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]\r\n\r\n\"<strong><label for=\"meetgavernwp_template_homepage_mainbody\">Show mainbody widgets insteads of blog posts on the homepage</label></strong>\" option is useful when you want to place a widget instead of entries on the homepage - then  you have to switch it on <strong>mainbody</strong> widget position, place a widget needed which will replace a standard list of posts generated by Wordpress.\r\n\r\nThe last option, namely <strong>\"Show author info\"</strong> allows to display information about its author under each post in the following form:\r\n\r\n[screenshot]\r\n\r\n&nbsp;','Basic settings','','inherit','open','open','','416-revision-11','','','2012-08-12 15:57:06','2012-08-12 15:57:06','',416,'{$page_url}/uncategorized/416-revision-11/',0,'revision','',0),(667,1,'2012-07-23 11:31:51','2012-07-23 11:31:51','Widget rules is a mechanism which introduces a completely new way to manage widgets on a website. Thanks to it, it is possible to specify widget features such as:\r\n<ul>\r\n	<li>displaying on subpages chosen,</li>\r\n	<li>displaying on devices chosen,</li>\r\n	<li>displaying for a group of users chosen,</li>\r\n	<li>displaying with a widget style use chosen.</li>\r\n</ul>\r\nAfter switching on widget rules in template\'s advanced settings, under each widget, the following options should be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-371\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"258\" height=\"200\" /></a>\r\n\r\nThe most extensive options are those connected with a widget visibility on subpages chosen - after choosing an option to show a widget on pages chosen (or an option not showing a widget on pages chosen), such a panel will appear:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\"><img class=\"aligncenter size-full wp-image-372\" title=\"Widgets ‹ Meet Gavern WP — WordPress-1-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-1-1.jpg\" alt=\"\" width=\"240\" height=\"203\" /></a>\r\n\r\nThen, you have to choose a page\'s type to add, e.g. Category, and then give category ID:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\"><img class=\"aligncenter size-full wp-image-373\" title=\"Widgets ‹ Meet Gavern WP — WordPress-2\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-2.jpg\" alt=\"\" width=\"242\" height=\"216\" /></a>\r\n\r\nAfter clicking \"Add page\" button, a page will appear on a list of pages chosen on which in our case a widget will be displayed:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-374\" title=\"Widgets ‹ Meet Gavern WP — WordPress-3\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"233\" height=\"77\" /></a>\r\n\r\nOf course, it is possible to add more pages:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\"><img class=\"aligncenter size-full wp-image-375\" title=\"Widgets ‹ Meet Gavern WP — WordPress-4\" src=\"{$page_url}/wp-content/uploads/2012/07/Widgets-‹-Meet-Gavern-WP-—-WordPress-4.jpg\" alt=\"\" width=\"230\" height=\"100\" /></a>\r\n\r\nTo make it clearer, , each page\'s type is displayed with a different color. A page added can be removed by clicking a removing icon placed on the right side of each page.\r\n\r\nIn this way, you may set a widget so as to be shown on pages chosen or to be shown on all pages except the chosen ones.\r\n\r\nGenerally, widgets are shown on all pages.\r\n\r\nAn option of displaying a widget on devices chosen has five options to choose:\r\n<ul>\r\n	<li><strong>All devices</strong> - a widget will be displayed everytwhere - on every device</li>\r\n	<li><strong>Desktop</strong> - a widget will be displayed only when neither a <strong>tablet.css</strong> file nor a <strong>mobile.css</strong> is loaded <strong></strong></li>\r\n	<li><strong>Tablets</strong> - a widget displays only when a <strong>tablet.css</strong> file will be loaded and, at the same time, a <strong>mobile.css</strong> file will not be loaded <strong></strong></li>\r\n	<li><strong>Smartphones</strong> - a widget will be displayed only when a <strong>mobile.css</strong> file will be loaded</li>\r\n	<li><strong>Tablets/Smartphones</strong> - a widget will be displayed when at least one file will be loaded: <strong>tablet.css</strong> or <strong>mobile.css</strong>.</li>\r\n</ul>\r\nThanks to these settings, it is possible to limit significantly the amount of content displayed on devices with small screens.\r\n\r\nAn option of displaying widget for a chosen groups of users has four options to choose:\r\n<ul>\r\n	<li><strong>All users</strong> - a widget will be displayed to all users</li>\r\n	<li><strong>Only guests</strong> - a widget will be displayed to not logged in users</li>\r\n	<li><strong>Only registered users</strong> - a widget will be displayed to logged in users only</li>\r\n	<li><strong>Only administrator</strong> - a widget will be displayed to administrators only</li>\r\n</ul>\r\nThanks to this option, it is possible e.g. to display messages specified by using widgets for a group of users chosen.\r\n\r\nThe last optio from widget rules is an option for choosing a widget style - it causes appending to a widget main container an additional class giving styling specified by a user.\r\n\r\nWidget styles are defined in widget.styles.json file and in CSS code - in this case in <strong>css/wp.extensions.css</strong>.<strong></strong>','Widget rules','','inherit','open','open','','370-revision-7','','','2012-07-23 11:31:51','2012-07-23 11:31:51','',370,'{$page_url}/uncategorized/370-revision-7/',0,'revision','',0),(668,1,'2012-07-20 11:17:25','2012-07-20 11:17:25','Each template\'s subpage in GavernWP is created and based on one file from template\'s main catalog, e.g. <strong>single.php</strong> and at least four additional files from <strong>layouts</strong> catalog:\r\n<ul>\r\n	<li><strong>header.php</strong> - this file includes starting page\'s structure i.e. a head section and the whole headline with elements such as: logo, main menu, etc.</li>\r\n	<li><strong>before.php</strong> - there are all widget positions included in this file which are before page\'s main content.</li>\r\n	<li><strong>after.php</strong> - this file is an equivalent of <strong>before.php</strong> file but with one difference - it includes widget positions which are after page\'s main content.</li>\r\n	<li><strong>footer.php</strong> - similarly to <strong>header.php</strong> file, it includes a starting page\'s structure as footer.php includes the ending page\'s structure, i.e. a footer and and elements below.</li>\r\n</ul>\r\nThe above files with a file given from a main catalog, create a basic structure of each page. The remaining elements are generated by additional files or functions. The majority of of such files can be found in <strong>layouts</strong> catalog; e.g. files with names content.post.*.php, include constituents of each post. . Using these files allowed to restrict the amount of code in template\'s main files and simplify its modification as change e.g. an entry footer requires modification of one or two files only.\r\n\r\nFunctions used for generating additional information displayed in posts are in <strong>gavern/helpers/helpers.layout.fragments.php</strong> file.','Template structure','','inherit','open','open','','359-revision-4','','','2012-07-20 11:17:25','2012-07-20 11:17:25','',359,'{$page_url}/uncategorized/359-revision-4/',0,'revision','',0),(669,1,'2012-07-19 21:39:35','2012-07-19 21:39:35','<a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> is a technology which allows to create your own browsing engine used by a browser. Thanks to it, e.g. in a Firefox browser, a user may define a new browser after entering our website based on GavernWP framework. Because of it, in the case of more extensive websites, e.g. data catalogs, searching is much easier.\r\n\r\nSwitching on support for Open Search requires switching on one option in an administration panel in a tab of advanced settings. All other operations are made with GavernWP.','Open Search support','','inherit','open','open','','353-revision-3','','','2012-07-19 21:39:35','2012-07-19 21:39:35','',353,'{$page_url}/uncategorized/353-revision-3/',0,'revision','',0),(670,1,'2012-07-19 10:44:52','2012-07-19 10:44:52','GavernWP has built - in support for <a title=\"Open Graph\" href=\"http://opengraphprotocol.org/\" target=\"_blank\">Open Graph</a> protocol. Thanks to it, each post added may have metatags specified and during publishing a post given on Facebook, there will be information specified earlier by an author of an entry displayed:\r\n<ul>\r\n	<li>title</li>\r\n	<li>entry description</li>\r\n	<li>thumbnail connected with an entry</li>\r\n</ul>\r\nThanks to it, an author of a post has better influence on the information displayed on social media services. It\'s also worth remembering that in the case when fields connected with Open Graph will not be filled, then GavernWP will try to fill them automatically basing on the entry data.\r\n\r\nSupport for Open Graph is a great supplement for a Social API system implemented in GavernWP.','Open Graph support','','inherit','open','open','','341-revision-4','','','2012-07-19 10:44:52','2012-07-19 10:44:52','',341,'{$page_url}/uncategorized/341-revision-4/',0,'revision','',0),(671,1,'2012-07-16 12:10:09','2012-07-16 12:10:09','oEmbeds is an important facility used while creating posts. Thanks to it, a user may embed in an entry easily, e.g. a movie from You Tube service by giving just a link to the movie - Wordpress will generate a movie from this link automatically.\r\n\r\nA few examples are presented below:\r\n\r\nYouTube\r\n\r\nhttp://www.youtube.com/watch?v=MdrC7kYTAX4\r\n\r\nTwitter\r\n\r\nhttps://twitter.com/gavickpro/status/221189052983025666\r\n\r\nFlickr\r\n\r\nhttp://www.flickr.com/photos/synectic/5489943396/','oEmbeds','','inherit','open','open','','332-revision-5','','','2012-07-16 12:10:09','2012-07-16 12:10:09','',332,'{$page_url}/uncategorized/332-revision-5/',0,'revision','',0),(673,1,'2012-07-16 11:45:56','2012-07-16 11:45:56','Gavern Framework has a quite extensive files structure. It is similar to a standard structure of majority of the templates, however, because of many functionalities, there are some new elements.\r\n\r\n<!--more-->\r\n\r\nThe overall outline of files structure is presented below:\r\n<ol>\r\n	<li><strong>template\'s catalog</strong>\r\n<small>It includes all basic files and catalogs for a template. It is worth seeing that Custom Pages templates have a <strong>template.</strong> prefix at the beginning of their names which helps to find them in files structure.</small>\r\n<ol>\r\n	<li><strong>css</strong>\r\n<small>There are all CSS template\'s files in it. They are described in details in an entry about framework\'s CSS code.\r\n</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>To have everything ordered, CSS files connected with an administration panel were placed in this catalog.\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>fonts</strong>\r\n<small>This catalog is used for storing files with additional fonts. You have to remember that each font must have its own catalog including a stylesheet.css file. More information about fonts service can be found in an entry about <strong>Fonts</strong> in an administration panel.<strong></strong>\r\n</small></li>\r\n	<li><strong>gavern</strong>\r\n<small>A catalog including the base of whole GavernWP framework work.\r\n</small>\r\n<ol>\r\n	<li><strong>classes</strong>\r\n<small>Files with supporting classes used in framework\'s code.\r\n</small></li>\r\n	<li><strong>config</strong>\r\n<small>Files including framework\'s configuration. It has to be remembered that there are additional catalogs used for making transalations.\r\n</small></li>\r\n	<li><strong>form_elements</strong>\r\n<small>It includes a main file with a code which generates basic form elements in an administration panel, as well as, catalogs with elements created by a user.\r\n</small></li>\r\n	<li><strong>helpers</strong>\r\n<small>A collection of classes connected with specific framework\'s tasks, e.g. with generating layout fragments.\r\n</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Files used for generating HTML code of an administration panel.\r\n</small></li>\r\n	<li><strong>options</strong>\r\n<small>Files which store options of particular sections of template\'s administration panel. Similarly to <strong>config</strong> catalog; there are also additional catalogs used for making translations.<strong></strong>\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>images</strong>\r\n<small>Graphic files used with a template\r\n</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Files connected with an administration panel.\r\n</small></li>\r\n	<li><strong>headers</strong>\r\n<small>Default header\'s images.\r\n</small></li>\r\n	<li><strong>post_formats</strong>\r\n<small>Images connected with entries formats.\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>js</strong>\r\n<small>JavaScript scripts files used in a template\r\n</small>\r\n<ol>\r\n	<li><strong>back-end</strong>\r\n<small>Likewise in <strong>css</strong> and <strong>images</strong> catalogs there are files included used in an administration panel.<strong></strong><strong></strong>\r\n</small></li>\r\n	<li><strong>templates</strong>\r\n<small>Additional JavaScript files used by some Custom Pages.\r\n</small></li>\r\n</ol>\r\n</li>\r\n	<li><strong>languages</strong>\r\n<small>Main files used for creating translations.\r\n</small></li>\r\n	<li><strong>layouts</strong>\r\n<small>Files used for generating subpages; they include elements which are used very often; e.g. a head section.\r\n</small></li>\r\n</ol>\r\n</li>\r\n</ol>\r\n&nbsp;','Framework structure','','inherit','open','open','','330-revision-4','','','2012-07-16 11:45:56','2012-07-16 11:45:56','',330,'{$page_url}/uncategorized/330-revision-4/',0,'revision','',0),(674,1,'2012-07-16 12:58:05','2012-07-16 12:58:05','GavernWP has full support for making translations. Because of differences being a result of using JSON files for generating template\'s options, a template\'s translation should be done in three places:\r\n<ol>\r\n	<li>with files use from a languages catalog</li>\r\n	<li>by creating a catalog of a language given in a config catalog</li>\r\n	<li>by creating a catalog of a language given in an options catalog</li>\r\n</ol>\r\nThe first stage is a standard operation described in details in Wordpress documentation. Let\'s focus on the two remaining stages then:\r\n\r\nGenerally, there is <strong>en_US</strong> catalog created in <strong>config</strong> and <strong>options</strong> catalogs which includes JSON configuration files in an English language. So, in order to translate a template to a different language , you have to copy this catalog and change its name to a respective language used in your installation, e.g. <strong>pl_PL</strong>. Then, you have to change all phrases from the English language to your language.\r\n\r\nNOTE! You must not change the names of keys in JSON files, the same as, proper names because they are used for proper work and reading values.\r\n\r\ne.g. in a widgets.json file for a fragment:\r\n\r\n[code]{\r\n\"name\": \"Top widgets\",\r\n\"id\": \"top\",\r\n\"description\": \"Widgets area on under the header of website\",\r\n\"before_widget\": \"&lt;div id=\\\"%1$s\\\" class=\\\"box%2$s\\\"&gt;\",\r\n\"after_widget\": \"&lt;/div&gt;\",\r\n\"before_title\": \"&lt;h3 class=\\\"box-title\\\"&gt;\",\r\n\"after_title\": \"&lt;/h3&gt;\"\r\n},[/code]\r\n\r\nchange the following phrases only:\r\n<ul>\r\n	<li>\"Top widgets\"</li>\r\n	<li>\"Widgets area on under the header of website\"</li>\r\n</ul>\r\nAfter this operation, you will see sentences in your mother tongue in an administration panel.\r\n\r\nIt\'s worth remembering that in the case when GavernWP will not find a catalog corresponding to the language set in configuration, there will be files used from <strong>en_US</strong> catalogs.','Translations','','inherit','open','open','','335-revision-4','','','2012-07-16 12:58:05','2012-07-16 12:58:05','',335,'{$page_url}/uncategorized/335-revision-4/',0,'revision','',0),(677,1,'2012-08-12 18:02:07','2012-08-12 18:02:07','GavernWP has an extensive mechanism allowing to create additional theme styles. We may distinguish two main groups of styles in this mechanism:\r\n<ul>\r\n	<li>style family</li>\r\n	<li>styles included in style family given</li>\r\n</ul>\r\nThe whole configuration is included in <strong>styles.json</strong> file:\r\n\r\n[code][{\r\n\r\n\"family\": \"color\",\r\n\"family_desc\": \"Theme color\",\r\n\"family_tooltip\": \"You can select one of the theme colors\",\r\n\"styles\": [\r\n{\r\n\"name\": \"Color I\",\r\n\"value\": \"color1\",\r\n\"file\": \"style1.css\"\r\n},\r\n{\r\n\"name\": \"Color II\",\r\n\"value\": \"color2\",\r\n\"file\": \"style2.css\"\r\n}\r\n]\r\n}][/code]\r\n\r\nAs you can see, it includes <strong>color</strong> style family which has two styles, namely: <strong>Color I</strong> and <strong>Color II</strong>.\r\n\r\nIn order to create new style family or a style for style family given, it is enough to create a next object in <strong>styles.json</strong> file and then create CSS files connected with a family given - in the case of <strong>color</strong> family, these are <strong>style1.css</strong> and <strong>style2.css</strong> files.\r\n\r\nGavernWP will load CSS files of a style given in a <strong>head</strong> section - chosen in an administration panel or, if there is a tool for choosing user\'s styles switched on, they will be loaded based on a Cookie file storing data about a style used by a user.\r\n\r\nYou have to remember that for each style family there is at least one CSS file loaded. Therefore, creating coexisting style families like:\r\n<ul>\r\n	<li><strong>dark styles</strong> and <strong>light styles</strong></li>\r\n	<li><strong>blue styles</strong> and <strong>green styles</strong></li>\r\n</ul>\r\nis incorrect because at least one CSS style from each family will be loaded immediately. So the correct one is creating style families responsible for some elements of website styling, e.g. a separate family responsible for website coloring (<strong>colors</strong>) and a separate one for website background (<strong>patterns</strong>).\r\n\r\nGenerally, you have to care about particular style families in order not to overwrite one another.','Color Styles','','inherit','open','open','','349-revision-5','','','2012-08-12 18:02:07','2012-08-12 18:02:07','',349,'{$page_url}/uncategorized/349-revision-5/',0,'revision','',0),(678,1,'2012-07-19 21:24:46','2012-07-19 21:24:46','GavernWP makes possible to create templates based on Responsive Web Design. That\'s why, it has two additional CSS styles:\r\n<ul>\r\n	<li>tablet.css</li>\r\n	<li>mobile.css</li>\r\n</ul>\r\nThanks to options available in an administration panel, it is possible to specify when these styles will be loaded.\r\n\r\nTwo column layout (if a column is switched on) is loaded when tablet.css file is not loaded.\r\n\r\nAt the moment of reaching maximum width for tablet.css file, page\'s layout is changed into one column and the column itself is placed before or after page\'s main content.\r\n\r\nAdditionally, in widget positions like top or bottom1/2/3, modules from three column layout are changed into one column  layout.\r\n\r\nAfter loading mobile.css file there is one column layout used everywhere.\r\n\r\nA very important improvement is a possibility of specifying whether a module will be loaded in tablet or mobile mode. More information can be found in Widget Rules entry.','Responsive Layout','','inherit','open','open','','351-revision-3','','','2012-07-19 21:24:46','2012-07-19 21:24:46','',351,'{$page_url}/uncategorized/351-revision-3/',0,'revision','',0),(679,1,'2012-07-20 12:40:26','2012-07-20 12:40:26','Template\'s CSS code is divided into a few files, loaded in order specified. All these files are in <strong>css</strong> catalog. You have to remember that order of these files is very important and its change may cause unpredictable changes of template\'s look because of using moving from general styling to detailed styling in CSS code.\r\n\r\nThe list of CSS files used in a template is presented below (order according to recommended order of loading these files):\r\n<ol>\r\n	<li><strong>normalize.css</strong> - CSS code unifying page\'s elements styling in all browsers</li>\r\n	<li><strong>template.css</strong> - the most important CSS file responsible for page\'s layout styling , basic typography, widget styling, etc.</li>\r\n	<li><strong>wp.css</strong> - CSS rules which are responsible for Wordpress elements styling, e.g. a comments form , comments themselves or posts elements.</li>\r\n	<li><strong>shortcodes.*.css</strong> (optional) - a group of CSS files responsible for typography elements styling inserting to posts with Shortcodes.</li>\r\n	<li><strong>stuff.css</strong> - it includes styling of additional template\'s elements sucha s breadcrumbs or font-size switcher.</li>\r\n	<li><strong>wp.extensions.css</strong> - CSS rules connected with styling of standard widgets available with Wordpress.</li>\r\n	<li><strong>extensions.css (optional)</strong> - a CSS file which you have to add yourself in the case when you want to style additional widgets. In the case of small changes in widget styling, we recommend to use <strong>override.css</strong> file instead of this file.</li>\r\n	<li><strong>tablet.css</strong> - CSS rules used while displaying a page on tablet devices.</li>\r\n	<li><strong>mobile.css</strong> - CSS rules used while displaying  a page on smartfon devices.</li>\r\n	<li><strong>ie*.css</strong> - a file or a group of CSS files used for correcting page\'s look in an Internet Explorer browser.</li>\r\n	<li><strong>style*.css</strong> - a file or a group of CSS files used for changing coloring or general style of a template - they are loaded automatically by a mechanism responsible for template\'s coloring.</li>\r\n	<li><strong>override.css</strong> (optional) - you may add your own rules in this file which will overwrite existing rules in previous files - a perfect solution for template modification without modifying the remaining CSS files.</li>\r\n</ol>\r\nAdditionally, CSS code used in a template itself, you will also find in a <strong>templates</strong> catalog where there are CSS files loaded on chosen styles of subpages, e.g. needed for correct work of a gallery.','Template CSS','','inherit','open','open','','361-revision-3','','','2012-07-20 12:40:26','2012-07-20 12:40:26','',361,'{$page_url}/uncategorized/361-revision-3/',0,'revision','',0),(680,1,'2012-07-23 08:36:39','2012-07-23 08:36:39','GavernWP has support for comments with a division into threads. Thanks to it, discussions made in comments under a post given are clearer.\r\n\r\nAll options connected with comments configuration can be set by using standard options in a Wordpress administration panel (Settings &gt; Discussion). Threads in comments are switched on thanks to \"Enable threaded (nested) comments\" and specifying maximal depth of nested comments in threads.\r\n\r\nThere are two files responsible for generating HTML code of comments, namely:\r\n<ul>\r\n	<li><strong>comments.php</strong> - it includes a code which generates a comments list and a form of adding comments.</li>\r\n	<li><strong>gavern/helpers/helper.layout.fragments.php</strong> - in <strong>gavern_comment_template</strong> function, there is a code responsible for generating a code of a comment given.</li>\r\n</ul>\r\nCSS code responsible for a style of comments and a form of adding comments is in <strong>css/wp.css</strong> file.<strong></strong>','Threaded comments','','inherit','open','open','','364-revision-4','','','2012-07-23 08:36:39','2012-07-23 08:36:39','',364,'{$page_url}/uncategorized/364-revision-4/',0,'revision','',0),(681,1,'2012-07-23 09:24:40','2012-07-23 09:24:40','GavernWP makes accessible a few own styles of subpages. Thanks to them, it is possible to use Wordpress possiblitities better  and adjusting pages to themes chosen.\r\n\r\nAll additional subpages styles are placed in a main catalog in <strong>template.*.php</strong> files. GavernWP has the following subpages:\r\n<ul>\r\n	<li><strong>template.archive.php</strong> - an archive page, in includes a list of recent posts, categories and a list of links to monthly archives.</li>\r\n	<li><strong>template.contact.php</strong> - a page with a contact form which allows to send an email to an email address specified in a Wordpress configuration.</li>\r\n	<li><strong>template.fullwidth.php</strong> - a page\'s layout without a sidebar.</li>\r\n	<li><strong>template.gallery.php</strong> - a page generating an animated gallery of images with a mechanism of attachments available in Wordpress - it is enough to assign attachments to such a page that they will show as slides in a gallery. It is recommened to choose images with the same size.</li>\r\n	<li><strong>template.login.php</strong> - a page generating a login form for users - after logging in, it displays information about his/her username and a button to log out.</li>\r\n	<li><strong>template.tagcloud.php</strong> - a page generating a tag cloud of our website.</li>\r\n</ul>\r\nMain CSS styles of subpages are in a <strong>css/stuff.css</strong> file. However, you have to remember that some more extensive files of subpages may additionally load CSS and JavaScript files from <strong>css/templates/</strong> and <strong>js/templates/</strong>.\r\n\r\nIn order to load additional files in this way, it is enough to specify the second parameter of a <strong>gk_load</strong> function (see: code of requesting a <strong>gk_load</strong> function in a <strong>template.gallery.php</strong> file).','Custom Page Styles','','inherit','open','open','','367-revision-6','','','2012-07-23 09:24:40','2012-07-23 09:24:40','',367,'{$page_url}/uncategorized/367-revision-6/',0,'revision','',0),(682,1,'2012-07-23 13:28:55','2012-07-23 13:28:55','GavernWP makes accessible options allowing for template\'s branding. Branding options are divided into two groups:\r\n<ul>\r\n	<li>template\'s branding</li>\r\n	<li>administration panel branding</li>\r\n</ul>\r\nThanks to template\'s branding options, a user may specify:\r\n<ul>\r\n	<li>specify page\'s logo</li>\r\n	<li>specify template\'s footer content</li>\r\n	<li>decide about displaying a framework logo under page\'s footer</li>\r\n</ul>\r\nMore information about branding options for a template can be found in an entry devoted to a \"Template branding\" tab in an administration panel.\r\n\r\nAdministration panel branding options allow to define:\r\n<ul>\r\n	<li>a logo displayed next to a template\'s name in an administration panel sidebar</li>\r\n	<li>a logo visible over a log in form to an administration panel</li>\r\n</ul>\r\nMore about branding options for an administration panel can be found in an entry devoted to \"Back-end branding\"  in an administration panel.','Branding','','inherit','open','open','','377-revision-3','','','2012-07-23 13:28:55','2012-07-23 13:28:55','',377,'{$page_url}/uncategorized/377-revision-3/',0,'revision','',0),(683,1,'2012-08-12 18:09:11','2012-08-12 18:09:11','','Live Editor','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-5','','','2012-08-12 18:09:11','2012-08-12 18:09:11','',380,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-5.jpg',0,'attachment','image/jpeg',0),(684,1,'2012-08-09 13:03:09','2012-08-09 13:03:09','GavernWP has basic support for a new option available in Wordpress 3.4 - an options editor with templates preview. Now, the most important options connected with template\'s style and its layout has been implemented to a live editor.\r\n\r\nIn order to reach it easier, we placed a direct link to this editor in the top part of templates\' options:\r\n\r\n[screenshot]\r\n\r\nAll options included in this editor are also available via traditional template\'s options panel.\r\n\r\nIn order to simplify adding your own options to a live editor, the whole code generating options is placed in a separate file: <strong>gavern/helpers/helpers.customizer.php</strong>.\r\n\r\nYou have to remember that all options and settings from a live editor are stored in the same place as their equivalents from an administration panel so settings change with a live editor causes changes in an options panel. That\'s why, it is recommended not to use a traditional administration panel and a live editor at the same time because saving options with various values in two different places at the same time may not give the expected result.','Theme live editor','','inherit','open','open','','380-revision-7','','','2012-08-09 13:03:09','2012-08-09 13:03:09','',380,'{$page_url}/uncategorized/380-revision-7/',0,'revision','',0),(685,1,'2012-08-12 18:10:40','2012-08-12 18:10:40','','Updates','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-6','','','2012-08-12 18:10:40','2012-08-12 18:10:40','',382,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-6.jpg',0,'attachment','image/jpeg',0),(686,1,'2012-07-25 10:04:21','2012-07-25 10:04:21','GavernWP has an update section which allows to access information whether a template was updated to the latest version. In order to access an updates panel, you have to use \"Updates\" submenu from a main menu of template\'s options:\r\n\r\n[screenshot]\r\n\r\nIf a template was not updated, a list of updates will appear; which are newer than your template version:\r\n\r\n[screenshot]\r\n\r\nHowever, when you have a template in the latest version, you will see an appropriate message that a template does not have any new updates to download:\r\n\r\n[screenshot]\r\n\r\nIt\'s worth remembering that a free template - MeetGavernWP is available through a public repository in a github service which allows to easy analysis of changes implemented in particular files. In the case of commercial templates, it is recommended to use tools like WinMerge (Windows) or File Merge (MacOS X) to compare changes in files. Each update in our update system has information about the list of modified files. Generally, it is recommended to compare only these files which you modified manually after loading a template.','Updates','','inherit','open','open','','382-revision-4','','','2012-07-25 10:04:21','2012-07-25 10:04:21','',382,'{$page_url}/uncategorized/382-revision-4/',0,'revision','',0),(687,1,'2012-07-19 21:53:33','2012-07-19 21:53:33','Thanks to Social API, adding buttons to an entry for sharing posts in the most popular social network services is very easy.\r\n\r\nAt the moment, Social API supports four services:\r\n<ul>\r\n	<li>Facebook</li>\r\n	<li>Google+</li>\r\n	<li>Twitter</li>\r\n	<li>Pinterest</li>\r\n</ul>\r\nButtons for sharing are generally added under an entry. All contact data needed for sharing are loaded from entry content or from OpenGraph metatags.\r\n\r\nThanks to extensive configuration options, it is possible to adjust buttons look in accordance with available configuration parameters.\r\n\r\nThe most important thing is that the work of Social API can be limited to specific posts or switch off some posts from its work.','Social API','','inherit','open','open','','356-revision-4','','','2012-07-19 21:53:33','2012-07-19 21:53:33','',356,'{$page_url}/uncategorized/356-revision-4/',0,'revision','',0),(688,1,'2012-08-12 18:12:59','2012-08-12 18:12:59','','SEO settings','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-7','','','2012-08-12 18:12:59','2012-08-12 18:12:59','',413,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-7.jpg',0,'attachment','image/jpeg',0),(689,1,'2012-08-12 18:16:21','2012-08-12 18:16:21','','Metatags','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-8','','','2012-08-12 18:16:21','2012-08-12 18:16:21','',413,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-8.jpg',0,'attachment','image/jpeg',0),(690,1,'2012-08-12 18:17:00','2012-08-12 18:17:00','','Metaboxes','','inherit','open','open','','edit-post-meet-gavern-wp-wordpress-2','','','2012-08-12 18:17:00','2012-08-12 18:17:00','',413,'{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-2.jpg',0,'attachment','image/jpeg',0),(691,1,'2012-08-07 11:58:40','2012-08-07 11:58:40','GavernWP has SEO settings built - in which allow to overwrite Wordpress standard SEO settings. After switching on \"Use Gavern SEO settings\" option, a lot of options connected with SEO will appear:\r\n\r\n[screenshot]\r\n\r\nThe first group of options is connected with page\'s title:\r\n<ul>\r\n	<li><strong>Use blogname in title</strong> - this option allows to switch on showing a blogname in the title</li>\r\n	<li><strong>Separator used in title</strong> - it specifies a separator which is between a title description and a pages\'s name</li>\r\n	<li><strong>Title - description</strong> - it allows to specify page\'s title description (the first part of a title - before a separator)</li>\r\n	<li><strong>Title - blogname</strong> - it allows to specify page\'s name (the second part of a title after a separator)</li>\r\n</ul>\r\nThe remaining options allow to switch on advanced management of <strong>keywords</strong> and <strong>description</strong> metatags:\r\n\r\n[screenshot]\r\n\r\nIn the case of a homepage, these metatags values are specified in a SEO settings panel whereas in the case of subpages, there are two settings available for both metatags:\r\n<ul>\r\n	<li><strong>Disabled</strong></li>\r\n	<li><strong>Enabled (custom field in the post editor)</strong></li>\r\n</ul>\r\nWhen you switch on these settings, under a posts editor two additional fields will appear:\r\n\r\n[screenshot]\r\n\r\nIf you fill them in, metatags used on one subpage with an entry will be created.','SEO settings','','inherit','open','open','','413-revision-3','','','2012-08-07 11:58:40','2012-08-07 11:58:40','',413,'{$page_url}/uncategorized/413-revision-3/',0,'revision','',0),(692,1,'2012-08-12 18:19:05','2012-08-12 18:19:05','','OpenGraph metabox','','inherit','open','open','','edit-post-meet-gavern-wp-wordpress-3','','','2012-08-12 18:19:05','2012-08-12 18:19:05','',422,'{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-3.jpg',0,'attachment','image/jpeg',0),(693,1,'2012-08-12 17:36:57','2012-08-12 17:36:57','An advanced settings section includes settings which are connected with different aspects of GavernWP framework work:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-3.jpg\"><img class=\"aligncenter size-full wp-image-659\" title=\"Advanced settings\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-3.jpg\" alt=\"\" width=\"595\" height=\"571\" /></a>\r\n<ul>\r\n	<li><strong>Widget rules</strong> allows to switch on this mechanism. It is recommended to switch on this option in the case when you do not need to use widgets visible on a chosen subpages. Note that it will allow to optimize a little bit the speed of a website as operations of checking rules for each widget will not be made.</li>\r\n	<li><strong>Support for Google Chrome Frame</strong> - it switches on a metatag forcing use of  <a href=\"https://developers.google.com/chrome/chrome-frame/\" target=\"_blank\">Google Chrome Frame</a> plugin on Internet Explorer browsers if it is installed.</li>\r\n	<li><strong>Parse emoticons in the text widgets</strong> - it activates parsing emoticons to a graphic form in widgets.</li>\r\n	<li><strong>Parse shortcodes in the text widgets</strong> - it activates parsing of <a href=\"http://codex.wordpress.org/Shortcode_API\" target=\"_blank\">Shortcodes</a> in widgets.</li>\r\n	<li><strong>Use Thickbox</strong> - it allows to switch on Thickbox  script for presenting images included in posts.</li>\r\n	<li><strong>Value for the $content_width variable</strong> -  <strong>$content_width</strong> variable is used while creating thumbnails of images for posts, that\'s why it has to be defined as an appropriate value - we recommend to set the value not bigger than the max. page\'s width.</li>\r\n	<li><strong>Use the override.css file</strong> - thanks to switching on this option, an <strong>override.css</strong> file will appear at the end of the list of CSS files which allows to overwrite theme\'s CSS rules easily without interference in existing CSS code.</li>\r\n	<li><strong>Enable support for Open Search</strong> - it allows to switch on support for  <a href=\"http://www.opensearch.org/Home\" target=\"_blank\">Open Search</a> technology.</li>\r\n	<li><strong>Enable support for Open Graph</strong> - it allows to switch on support for <a href=\"http://ogp.me/\" target=\"_blank\">Open Graph </a> technology - after switching on this option, an additional metabox will appear on a page for editing posts: <a href=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-660\" title=\"Open Graph Metabox\" src=\"{$page_url}/wp-content/uploads/2012/07/Edit-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"732\" height=\"609\" /></a></li>\r\n</ul>','Advanced settings','','inherit','open','open','','422-revision-9','','','2012-08-12 17:36:57','2012-08-12 17:36:57','',422,'{$page_url}/uncategorized/422-revision-9/',0,'revision','',0),(694,1,'2012-08-09 08:05:14','2012-08-09 08:05:14','Templates based on GavernWP framework have support for many useful solutions and technologies. The most important ones are:\r\n<ul>\r\n	<li><a title=\"Custom Page Styles\" href=\"{$page_url}/template-features/custom-page-styles-2/\">Custom page styles</a> - they extend functionality of standard subpages.</li>\r\n	<li><a title=\"Typography\" href=\"{$page_url}/template-features/typography/\">Typography</a> - an advanced list of elements gives a possibility to enhance posts about various add ons.</li>\r\n	<li><a title=\"Social API\" href=\"{$page_url}/template-features/social-api/\">Social API</a> - it allows to add buttons for sharing posts in social network services very easily.</li>\r\n	<li><a title=\"Open Graph support\" href=\"{$page_url}/template-features/open-graph-support/\">Open Graph</a> - it allows to specify the way in which content shared on Facebook will be visible.</li>\r\n	<li><a title=\"Threaded comments\" href=\"{$page_url}/template-features/threaded-comments-2/\">Threaded comments</a> - they allow to make discussions under posts in a clear way.</li>\r\n	<li><a title=\"Branding\" href=\"{$page_url}/template-features/branding/\">Branding</a> - it simplifies setting key elements of a website connected with its name or brand.</li>\r\n	<li><a title=\"Color Styles\" href=\"{$page_url}/uncategorized/color-styles/\">Color styles</a> - thanks to color styles, it is possible to create many various color and stylistic versions of a template.</li>\r\n</ul>\r\n&nbsp;','Main front-end features','','inherit','open','open','','408-revision-3','','','2012-08-09 08:05:14','2012-08-09 08:05:14','',408,'{$page_url}/uncategorized/408-revision-3/',0,'revision','',0),(695,1,'2012-08-12 18:21:50','2012-08-12 18:21:50','','Shortcodes','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-9','','','2012-08-12 18:21:50','2012-08-12 18:21:50','',397,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-9.jpg',0,'attachment','image/jpeg',0),(696,1,'2012-08-09 11:47:54','2012-08-09 11:47:54','Shortcodes are facilities which are not used by everyone. Besides, XHTML code of the majority of typography elements can be generated manually. It causes that not all CSS and JavaScript files connected with Shortcodes are needed while loading a page.\r\n\r\nThanks to a Shortcodes tab, it is possible to switch off chosen groups of Shortcodes:\r\n\r\n[screenshot]\r\n\r\nNote! Switching off a given group of Shortcodes will cause not only switching off adding CSS and JS files connected with a group given but will also switch off functions which parse Shortcodes in articles. That\'s why, you have to make sure that Shortcodes groups you want to switch off, are not used in existing articles.','Shortcodes settings','','inherit','open','open','','397-revision-4','','','2012-08-09 11:47:54','2012-08-09 11:47:54','',397,'{$page_url}/uncategorized/397-revision-4/',0,'revision','',0),(697,1,'2012-08-12 18:25:09','2012-08-12 18:25:09','','branding','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-10','','','2012-08-12 18:25:09','2012-08-12 18:25:09','',394,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-10.jpg',0,'attachment','image/jpeg',0),(698,1,'2012-08-12 18:26:09','2012-08-12 18:26:09','','Logo image','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-11','','','2012-08-12 18:26:09','2012-08-12 18:26:09','',394,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-11.jpg',0,'attachment','image/jpeg',0),(699,1,'2012-08-12 18:27:18','2012-08-12 18:27:18','','Textlogo','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-12','','','2012-08-12 18:27:18','2012-08-12 18:27:18','',394,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-12.jpg',0,'attachment','image/jpeg',0),(700,1,'2012-08-12 18:27:37','2012-08-12 18:27:37','','Text logo own','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-13','','','2012-08-12 18:27:37','2012-08-12 18:27:37','',394,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-13.jpg',0,'attachment','image/jpeg',0),(701,1,'2012-08-10 09:56:45','2012-08-10 09:56:45','There are three key places connected with branding in a template based on GavernWP framework:\r\n<ul>\r\n	<li>page\'s logo</li>\r\n	<li>page\'s footer</li>\r\n	<li>framework\'s logo under a page\'s footer</li>\r\n</ul>\r\nThere are the following administration panel options responsible for these elements:\r\n\r\n[screenshot]\r\n\r\nIn the case of a framework\'s logo, it is only possible to switch it on/off.\r\n\r\nFooter content is defined in <strong>Footer content</strong> option. It will be displayed at the bottom of the page, usually on the right side.\r\n\r\nThe majority of parameters are connected with a page\'s logo. The first step in a logo configuration is to choose a logo type; there are the following logo types available:\r\n<ul>\r\n	<li><strong>Defined in the CSS code</strong> - a logo is defined template\'s CSS style as an element having <strong>cssLogo</strong> class. In this case, except CSS code modification, no other settings changes are needed.</li>\r\n	<li><strong>Image logo</strong> - after choosing this option, some additional options will appear:  [screenshot]. You have to choose an image logo and specify its sizes.</li>\r\n	<li><strong>Text logo</strong> - likewise in the previous option, some additional options appear: [screenshot]. <strong>Template logo text </strong>option specifies whether main logo text and the signature below it will be taken from Wordpress settings (<strong>from Wordpress settings</strong>) or will be specified by a user (<strong>Own</strong>). In the case of choosing the second option, two additional fields to fill in will appear: [screenshot].</li>\r\n	<li><strong>None</strong> - in this case, a logo will not be displayed.</li>\r\n</ul>\r\n<div><strong>Note</strong>: <strong>None</strong> option is useful when you want to define a logo code in template\'s code yourself - then, it is enough to add your own code to an appropriate file (usually it is: <strong>layouts/header.php</strong>).</div>\r\n&nbsp;','Template branding settings','','inherit','open','open','','394-revision-7','','','2012-08-10 09:56:45','2012-08-10 09:56:45','',394,'{$page_url}/uncategorized/394-revision-7/',0,'revision','',0),(702,1,'2012-08-12 18:28:53','2012-08-12 18:28:53','','Layout','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-14','','','2012-08-12 18:28:53','2012-08-12 18:28:53','',404,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-14.jpg',0,'attachment','image/jpeg',0),(703,1,'2012-08-09 09:22:14','2012-08-09 09:22:14','Layout settings in a template are connected with five main options:\r\n\r\n[shortcodes]\r\n\r\nThanks to a <strong>Page layout</strong> option, it is possible to specify a column position in page\'s layout: on the left/right side or switch off showing a column completely (in this situation, you achieve the layout available via an additional subpage style - <strong>fullwidth</strong>).\r\n\r\nA <strong>Template width</strong> option specifies maximal page\'s width - no matter what width a browser window has, page\'s width will not exceed this value.\r\n\r\nColumn width is specified in per cents thanks to a <strong>Sidebar width</strong> option. <strong>Tablet width</strong> and <strong>Mobile width</strong> options allow to specify width of a browser window in pixels where <strong>css/tablet.css</strong> and <strong>css/mobile.css</strong> files are loaded.\r\n\r\nIn the case of <strong>tablet.css</strong>, modules which normally create four - column layout (max.), will appear in two - column layout which after loading a <strong>mobile.css</strong> file will change into one - column layout. Additionally, after loading a <strong>tablet.css</strong> file,a column moves under main content of a page given.\r\n\r\n<strong>Note</strong>: all options from a <strong>Layout</strong> section are also in a live-preview editor which allows to adjust values of these options easily, thanks to a site live preview.','Layout settings','','inherit','open','open','','404-revision-4','','','2012-08-09 09:22:14','2012-08-09 09:22:14','',404,'{$page_url}/uncategorized/404-revision-4/',0,'revision','',0),(704,1,'2012-08-12 18:29:23','2012-08-12 18:29:23','Layout settings in a theme are connected with five main options:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-14.jpg\"><img class=\"aligncenter size-full wp-image-702\" title=\"Layout\" src=\"{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-14.jpg\" alt=\"\" width=\"571\" height=\"355\" /></a>\r\n\r\nThanks to a <strong>Page layout</strong> option, it is possible to specify a column position in page\'s layout: on the left/right side or switch off showing a column completely (in this situation, you achieve the layout available via an additional subpage style - <strong>fullwidth</strong>).\r\n\r\nA <strong>Theme width</strong> option specifies maximal page\'s width - no matter what width a browser window has, page\'s width will not exceed this value.\r\n\r\nColumn width is specified in per cents thanks to a <strong>Sidebar width</strong> option. <strong>Tablet width</strong> and <strong>Mobile width</strong> options allow to specify width of a browser window in pixels where <strong>css/tablet.css</strong> and <strong>css/mobile.css</strong> files are loaded.\r\n\r\nIn the case of <strong>tablet.css</strong>, modules which normally create four - column layout (max.), will appear in two - column layout which after loading a <strong>mobile.css</strong> file will change into one - column layout. Additionally, after loading a <strong>tablet.css</strong> file,a column moves under main content of a page given.\r\n\r\n<strong>Note</strong>: all options from a <strong>Layout</strong> section are also in a live-preview editor which allows to adjust values of these options easily, thanks to a site live preview.','Layout settings','','inherit','open','open','','404-revision-5','','','2012-08-12 18:29:23','2012-08-12 18:29:23','',404,'{$page_url}/uncategorized/404-revision-5/',0,'revision','',0),(707,1,'2012-08-10 08:57:35','2012-08-10 08:57:35','To simplify shortcodes use available in templates based on GavernWP framework, a button for template\'s typography has been implemented which is available in a posts editor:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\"><img class=\"aligncenter size-full wp-image-387\" title=\"Add New Post ‹ Meet Gavern WP — WordPress\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress.jpg\" alt=\"\" width=\"308\" height=\"107\" /></a>\r\n\r\nBy clicking this button, you will see a list of available typography elements:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\"><img class=\"aligncenter size-full wp-image-388\" title=\"Add New Post ‹ Meet Gavern WP — WordPress-1\" src=\"{$page_url}/wp-content/uploads/2012/07/Add-New-Post-‹-Meet-Gavern-WP-—-WordPress-1.jpg\" alt=\"\" width=\"251\" height=\"369\" /></a>\r\n\r\nIt is possible to choose a version with a stylistic specified for the majority of elements. After choosing a particular style, a shortcode will appear which will be replaced in entry content by scripts to structure styled in a way given.\r\n\r\nPlease, note that adding a new Shortcode code requires three operations:\r\n<ul>\r\n	<li>adding an entry in shortcodes.js configuration file</li>\r\n	<li>adding PHP code supporting a shortcode given</li>\r\n	<li>adding optional CSS and JavaScript code (if a shortcode given requires it)</li>\r\n</ul>\r\n<strong>shortcodes.js</strong> file in <strong>config</strong> catalog includes entries which are replaced to menu structure visible after clicking a typography button - it includes <strong>$GAVERNWP_SHORTCODES</strong> variable which is a table including objects representing elements of a menu. Each object has three features: <strong>title</strong>, <strong>code</strong> and <strong>submenu</strong>. Let\'s analyze this structure with a <strong>Highlight</strong> position:\r\n\r\n[code]{\r\n\r\n\"title\": \"Highlight\",\r\n\"code\": \"[highlight]Your text[/highlight]\",\r\n\"submenu\": [\r\n{\r\n\"title\": \"Style I\",\r\n\"code\": \"[highlight style=\\\"1\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style II\",\r\n\"code\": \"[highlight style=\\\"2\\\"]Your text[/highlight]\"\r\n},\r\n{\r\n\"title\": \"Style III\",\r\n\"code\": \"[highlight style=\\\"3\\\"]Your text[/highlight]\"\r\n}\r\n]\r\n},[/code]\r\n<ul>\r\n	<li><strong>title</strong> - it includes a menu positon name displayed by a script</li>\r\n	<li><strong>code</strong> - it is a shortcode code which will be added to an entry when clicking a menu position given - you have to remember that not all menu positions on the first level have a value in this field - if it was an empty sequence of symbols, it means for a script that clicking on a menu position given does not request any action.</li>\r\n	<li><strong>submenu</strong> - it is a table  of a submenu of a menu position given. Each submenu position is built the same as menu positions as these on the first level but with one difference - a submenu cannot have the next submenu, so you do not add a <strong>submenu</strong> feature in a submenu object.</li>\r\n</ul>\r\nLet\'s say, we added our shortcode to a typography button using shortcodes.js file. So, there is one thing left to do - support our shortcode from a template side.\r\n\r\nTo do this, you have to open <strong>gavern/helpers/helpers.shortcodes.php</strong> file.\r\n\r\nThis file is divided into three main sections starting with lines similar to:\r\n\r\n[code]if(get_option($tpl-&gt;name . \'_shortcodes1_state\', \'Y\') == \'Y\') {[/code]\r\n\r\nIt is a conditional  IF instruction connected with a group of typography elements given. Gavern icludes three groups:\r\n<ul>\r\n	<li>typography elements - functions connected with it have <strong>gavern_ts_</strong> prefix in the title</li>\r\n	<li>interactive elements - functions connected with it have <strong>gavern_ies_</strong> prefix in the title</li>\r\n	<li>elements characteristic for a particular template - functions connected with it have <strong>gavern_tss_</strong> prefix in the title</li>\r\n</ul>\r\nWe recommend to add new typography elements in the last group - in Meet GavernWP template, it is empty by default. Please, remember about using an appropriate prefix in a function name for a group given, e.g. in the case of the third group, it will be <strong>gavern_tss_</strong>. The code itself of a shortcode given has to be created according to guidelines described in<a href=\"http://codex.wordpress.org/Shortcode_API\"> Shortcode API</a>.\r\n\r\nThe last step is rather optional and depends on your Shortcode type. If your Shortcode requires additional CSS or JavaScript code, you have to define it in <strong>shortcodes.*.css</strong> i <strong>shortcodes.*.js</strong> files, where <strong>*</strong> is a group name to which a Shortcode given was assigned.\r\n\r\nIt is very important to place elements of CSS and JavaScript code in an appropriate file, as it will give a possibility of optimizing whole template code when switching off given group of Shortcodes codes.','Typography button','','inherit','open','open','','386-revision-8','','','2012-08-10 08:57:35','2012-08-10 08:57:35','',386,'{$page_url}/uncategorized/386-revision-8/',0,'revision','',0),(709,1,'2012-08-12 18:34:59','2012-08-12 18:34:59','','Nav menu','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-15','','','2012-08-12 18:34:59','2012-08-12 18:34:59','',401,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-15.jpg',0,'attachment','image/jpeg',0),(710,1,'2012-08-12 18:35:38','2012-08-12 18:35:38','','Nav menu options','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-16','','','2012-08-12 18:35:38','2012-08-12 18:35:38','',401,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-16.jpg',0,'attachment','image/jpeg',0),(711,1,'2012-08-10 10:28:26','2012-08-10 10:28:26','GavernWP gives a possibility of advanced menu managing on a website. There is a list of menus available in a template in a configuration file - <strong>menus.json</strong>. These menus are displayed in a <strong>Navigation</strong> tab:\r\n\r\n[screenshot]\r\n\r\nThere are a few options available for each menu available on a website. Website\'s main menu has more options than a menu placed e.g. in a page\'s footer.\r\n\r\nThe difference is that a main menu has additional options connected with animation:\r\n\r\n[screenshot]\r\n\r\nThese options allow to specify the type and speed of animation of a submenu.\r\n\r\nAdditionally, all menu types have the two options:\r\n<ul>\r\n	<li>an option specifying whether a menu given was switched on - a menu given can be switched on only on a particular subpages thanks to a <strong>Conditional rule</strong> option - then, you have to insert a rule from  <a href=\"http://codex.wordpress.org/Conditional_Tags\">Conditional Tags</a> and logic operators of a PHP language in  a Conditional rule field, e.g. a rule displaying a menu on the homepage and in a category called \"Meet GavernWP\" will have the following form:  [code]is_homepage() || is_category(\'Meet GavernWP\')[/code]</li>\r\n	<li>an option specifying menu depth i.e. a maximal nesting level for all menu positions displayed. If e.g. you want to skip the second menu level and display menu positions which are on the first menu level, you have to set this option to <strong>1</strong>. Of course <strong>All levels</strong> value will cause displaying all menu postions available for a menu given.</li>\r\n</ul>\r\nYou have to remember that adding a menu, except adding an appropriate entry in an configuration file <strong>menus.json</strong>, also requires creating appropriate code in a template.\r\n\r\nThis code uses a standard <a href=\"http://codex.wordpress.org/Function_Reference/wp_nav_menu\">wp_nav_menu</a> function but you have to remember about three crucial things:\r\n<ul>\r\n	<li>code of <strong>wp_nav_menu</strong> function has to be placed inside IF condition in a form:<strong></strong> [code]if(gk_show_menu(\'MENU_NAME\')) {[/code] where <strong>MENU_NAME</strong> is a menu name, e.g. <strong>mainmenu</strong><strong></strong>. Thanks to it, there will be a functionality which allows to display a menu only on subpages chosen.</li>\r\n	<li>in the case of main menu, it is very useful to create a duplicate in a mobile version so as while displaying a website on mobile devices, a menu will be adjusted to mobile devices.</li>\r\n	<li>in the case of a main menu, you have to use a special class derived from <strong>Walker</strong>: <strong>GKMenuWalker</strong> class; however, for a mobile menu, you have to use <strong>GKMenuWalkerMobile</strong> class. Thanks to it, appropriate menu structure will be generated.</li>\r\n</ul>\r\nCSS code connected with a menu is in <strong>css/wp.css</strong> and <strong>css/mobile.css</strong> files.\r\n\r\nScripts creating main menu animations are in <strong>js/gk.menu.js</strong> file.','Navigation settings','','inherit','open','open','','401-revision-7','','','2012-08-10 10:28:26','2012-08-10 10:28:26','',401,'{$page_url}/uncategorized/401-revision-7/',0,'revision','',0),(712,1,'2012-08-12 18:38:06','2012-08-12 18:38:06','','Import/export menu','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-17','','','2012-08-12 18:38:06','2012-08-12 18:38:06','',384,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-17.jpg',0,'attachment','image/jpeg',0),(713,1,'2012-08-12 18:38:22','2012-08-12 18:38:22','','Import/Export page','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-18','','','2012-08-12 18:38:22','2012-08-12 18:38:22','',384,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-18.jpg',0,'attachment','image/jpeg',0),(714,1,'2012-07-25 11:59:27','2012-07-25 11:59:27','Sometimes, there is a situation when you have to copy a configuration from one installation to another one. In order to simplify it, GavernWP has been equipped with import and export options of template\'s settings in \"Import/Export\" tab of a template\'s main menu:\r\n\r\n[screenshot]\r\n\r\nAfter entering a page of these settings, you will see the following form:\r\n\r\n[screenshot]\r\n\r\nIn order to export settings, it is enough to copy a text from an \"Export\" field and copy it to an \"Import\" field in a different template.\r\n\r\n<strong>Note!</strong> While exporting settings, you have to remember that it is possible to copy settings between the same templates.\r\nTemplate\'s settings are available in JSON format, so it is possible to save these settings to a file and then modify them manually before loading to a different template.\r\n\r\nTip: we recommend to make a dump of template\'s settings, thanks to it, you will be secured against not desired effects of greater changes in a template\'s configuration. Such settings dumps should be saved in a file which has in its name the date of making a dump, e.g.  <strong>meetgavernwp_backup_30_07_2012.json</strong>.','Import/Export settings','','inherit','open','open','','384-revision-7','','','2012-07-25 11:59:27','2012-07-25 11:59:27','',384,'{$page_url}/uncategorized/384-revision-7/',0,'revision','',0),(715,1,'2012-08-12 18:39:36','2012-08-12 18:39:36','','Back-end branding','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-19','','','2012-08-12 18:39:36','2012-08-12 18:39:36','',392,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-19.jpg',0,'attachment','image/jpeg',0),(716,1,'2012-08-12 18:41:22','2012-08-12 18:41:22','','Login logo','','inherit','open','open','','meet-gavern-wp-log-in','','','2012-08-12 18:41:22','2012-08-12 18:41:22','',392,'{$page_url}/wp-content/uploads/2012/07/Meet-Gavern-WP-›-Log-In.jpg',0,'attachment','image/jpeg',0),(717,1,'2012-08-12 18:42:06','2012-08-12 18:42:06','','Back-end logo','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-20','','','2012-08-12 18:42:06','2012-08-12 18:42:06','',392,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-20.jpg',0,'attachment','image/jpeg',0),(718,1,'2012-08-09 12:03:56','2012-08-09 12:03:56','In order to adjust stylistics of an administration panel to a GavernWP page, there are some options allowing to adjust the look of administration panel elements to a theme of a page given.\r\n\r\nYou will find the following options in a back-end branding tab:\r\n\r\n[screenshot]\r\n\r\nThe first two options are connected with a logotype displayed on a log in page. You have to choose an image which will be used as a logo and then insert the size of the image chosen. In this way, you may achieve, e.g. the following log in panel:\r\n\r\n[screenshot]\r\n\r\nThe remaining two options are connected with template\'s login displayed in a main menu of an administration panel:\r\n\r\n[screenshot]\r\n\r\nWe recommend to use an image in 16x16 size - bigger or smaller images may cause problems with menu layout.\r\n\r\n&nbsp;','Back-end branding settings','','inherit','open','open','','392-revision-3','','','2012-08-09 12:03:56','2012-08-09 12:03:56','',392,'{$page_url}/uncategorized/392-revision-3/',0,'revision','',0),(719,1,'2012-08-08 19:58:48','2012-08-08 19:58:48','One of the key elements which has influence on website\'s look is an appropriate choice of fonts used for text presentation.\r\n\r\nGavernWP allows to choose fonts easily which are assigned to CSS selectors specified by a user.\r\n\r\nIn order to simplify support for many fonts on one page, GavernWP supports groups of fonts - each group allows to assign a font given to selectors chosen by a user:\r\n\r\n[screenshot]\r\n\r\nGroups of fonts are defined in a configuration file called <strong>fonts.json</strong>. Adding a new group of fonts is very easy - it is enough to define the next object of a form:\r\n\r\n[code]{\r\n\"full_name\": \"Full name of the fonts group\",\r\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\",\r\n\"description\": \"Short description of the font family\"\r\n}[/code]\r\n\r\nAfter adding such an object, in a table included in <strong>fonts.json</strong> file, you will see the next group of fonts to manage in an administration panel.\r\n\r\nYou have to specify three basic values for each group of fonts:\r\n<ul>\r\n	<li> a type of font used</li>\r\n	<li> a font of a type given</li>\r\n	<li>selectors connected with a font given</li>\r\n</ul>\r\nSpecifying of a font type is restricted to choosing one out of three fonts types:\r\n<ul>\r\n	<li><strong>Standard fonts</strong> - standard sets of fonts available on the majority of computers - you have to choose a font given from a list which is shown under the field of choosing a type of font: [screenshot]</li>\r\n	<li><strong>Fonts Squirrel</strong> - fonts downloaded from <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> page - you have to download @font-face kit of a font given and place its content in <strong>fonts</strong> catalog.  It is very important to have a folder with the same name as a font name used in <strong>stylesheet.css</strong> file which is in a new catalog. If you prepare a catalog in this way, you will see a font given on the list to choose:  [screenshot]</li>\r\n	<li><strong>Google Web Fonts</strong> - fonts from <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> page; in this case, you have to specify the URL address of a font given: [screenshot]</li>\r\n</ul>\r\nThe last stage is specifying selectors connected with a font given:\r\n\r\n[screenshot]\r\n\r\nAfter saving the settings, the results should be visible on the website immediately - it is not required to make any additional operations.','Fonts settings','','inherit','open','open','','410-revision-6','','','2012-08-08 19:58:48','2012-08-08 19:58:48','',410,'{$page_url}/uncategorized/410-revision-6/',0,'revision','',0),(720,1,'2012-08-12 18:46:35','2012-08-12 18:46:35','','Fonts','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-21','','','2012-08-12 18:46:35','2012-08-12 18:46:35','',410,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-21.jpg',0,'attachment','image/jpeg',0),(721,1,'2012-08-12 18:47:59','2012-08-12 18:47:59','','standard fonts','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-22','','','2012-08-12 18:47:59','2012-08-12 18:47:59','',410,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-22.jpg',0,'attachment','image/jpeg',0),(722,1,'2012-08-12 18:48:25','2012-08-12 18:48:25','','Squirrel fonts','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-23','','','2012-08-12 18:48:25','2012-08-12 18:48:25','',410,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-23.jpg',0,'attachment','image/jpeg',0),(723,1,'2012-08-12 18:48:43','2012-08-12 18:48:43','','MeetGavernWP ‹ Meet Gavern WP — WordPress-24','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-24','','','2012-08-12 18:48:43','2012-08-12 18:48:43','',410,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-24.jpg',0,'attachment','image/jpeg',0),(724,1,'2012-08-12 18:49:18','2012-08-12 18:49:18','','Font selectors','','inherit','open','open','','meetgavernwp-meet-gavern-wp-wordpress-26','','','2012-08-12 18:49:18','2012-08-12 18:49:18','',410,'{$page_url}/wp-content/uploads/2012/07/MeetGavernWP-‹-Meet-Gavern-WP-—-WordPress-26.jpg',0,'attachment','image/jpeg',0),(725,1,'2012-08-12 18:43:56','2012-08-12 18:43:56','One of the key elements which has influence on website\'s look is an appropriate choice of fonts used for text presentation.\r\n\r\nGavernWP allows to choose fonts easily which are assigned to CSS selectors specified by a user.\r\n\r\nIn order to simplify support for many fonts on one page, GavernWP supports groups of fonts - each group allows to assign a font given to selectors chosen by a user:\r\n\r\n[screenshot]\r\n\r\nGroups of fonts are defined in a configuration file called <strong>fonts.json</strong>. Adding a new group of fonts is very easy - it is enough to define the next object of a form:\r\n\r\n[code]{\r\n\"full_name\": \"Full name of the fonts group\",\r\n\"short_name\": \"short name of the fonts group using only alphanumeric characters\",\r\n\"description\": \"Short description of the font family\"\r\n}[/code]\r\n\r\nAfter adding such an object, in a table included in <strong>fonts.json</strong> file, you will see the next group of fonts to manage in an administration panel.\r\n\r\nYou have to specify three basic values for each group of fonts:\r\n<ul>\r\n	<li> a type of font used</li>\r\n	<li> a font of a type given</li>\r\n	<li>selectors connected with a font given</li>\r\n</ul>\r\nSpecifying of a font type is restricted to choosing one out of three fonts types:\r\n<ul>\r\n	<li><strong>Standard fonts</strong> - standard sets of fonts available on the majority of computers - you have to choose a font given from a list which is shown under the field of choosing a type of font: [screenshot]</li>\r\n	<li><strong>Fonts Squirrel</strong> - fonts downloaded from <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\">Font Squirrel</a> page - you have to download @font-face kit of a font given and place its content in <strong>fonts</strong> catalog.  It is very important to have a folder with the same name as a font name used in <strong>stylesheet.css</strong> file which is in a new catalog. If you prepare a catalog in this way, you will see a font given on the list to choose:  [screenshot]</li>\r\n	<li><strong>Google Web Fonts</strong> - fonts from <a href=\"http://www.google.com/webfonts\" target=\"_blank\">Google Web Fonts</a> page; in this case, you have to specify the URL address of a font given: [screenshot]</li>\r\n</ul>\r\nThe last stage is specifying selectors connected with a font given:\r\n\r\n[screenshot]\r\n\r\nAfter saving the settings, the results should be visible on the website immediately - it is not required to make any additional operations.','Fonts settings','','inherit','open','open','','410-revision-7','','','2012-08-12 18:43:56','2012-08-12 18:43:56','',410,'{$page_url}/uncategorized/410-revision-7/',0,'revision','',0),(752,1,'2013-02-04 10:38:11','2013-02-04 10:38:11','It is an example gallery page.\n\n[notice]<strong>Tip:</strong> to create the gallery please use attachments from the Media library.[/notice]','Gallery page','','inherit','open','open','','121-autosave','','','2013-02-04 10:38:11','2013-02-04 10:38:11','',121,'{$page_url}/uncategorized/121-autosave/',0,'revision','',0),(756,1,'2012-11-20 14:36:28','2012-11-20 14:36:28','The Meet GavenrWP theme contains four built-in widgets which can be used for generating content on your website:\r\n<ul>\r\n	<li><a title=\"GK Comments\" href=\"{$page_url}/built-in-widgets/gk-comments/\">GK Comments</a></li>\r\n	<li><a title=\"GK News Show Pro\" href=\"{$page_url}/built-in-widgets/gk-news-show-pro/\">GK News Show Pro</a></li>\r\n	<li><a title=\"GK Social Icons\" href=\"{$page_url}/built-in-widgets/gk-social-icons/\">GK Social Icons</a></li>\r\n	<li><a title=\"GK Tabs\" href=\"{$page_url}/built-in-widgets/gk-tabs/\">GK Tabs</a></li>\r\n</ul>','Built-in widgets','','publish','open','open','','built-in-widgets','','','2012-11-20 14:47:54','2012-11-20 14:47:54','',0,'{$page_url}/?page_id=756',0,'page','',0),(758,1,'2012-11-20 14:38:23','2012-11-20 14:38:23','GK Comments is a simple widget to display latest comments with user avatars:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/comments1.jpg\"><img class=\"aligncenter size-full wp-image-760\" title=\"comments1\" src=\"{$page_url}/wp-content/uploads/2012/11/comments1.jpg\" alt=\"\" width=\"317\" height=\"520\" /></a>\r\n\r\nThe configuration of the widget is really simple:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/comments2.jpg\"><img class=\"aligncenter size-full wp-image-759\" title=\"comments2\" src=\"{$page_url}/wp-content/uploads/2012/11/comments2.jpg\" alt=\"\" width=\"265\" height=\"247\" /></a>\r\n\r\nAs you can see, there are three important options:\r\n<ul>\r\n	<li><strong>Avatar size</strong> - this option is used to specify the size of the avatars displayed under each comment.</li>\r\n	<li><strong>Word count</strong> - this option specifies the maximal amount of words displayed in each comment item.</li>\r\n	<li><strong>Number of comments</strong> - it specifes the maximal amount of comments to display.</li>\r\n</ul>\r\nThe GK Comments widget uses a built-in WordPress cache system and it refreshes the cache after every comments operation.','GK Comments','','publish','open','open','','gk-comments','','','2012-11-20 14:38:27','2012-11-20 14:38:27','',756,'{$page_url}/?page_id=758',0,'page','',0),(759,1,'2012-11-20 14:37:13','2012-11-20 14:37:13','','comments2','','inherit','open','open','','comments2','','','2012-11-20 14:37:13','2012-11-20 14:37:13','',758,'{$page_url}/wp-content/uploads/2012/11/comments2.jpg',0,'attachment','image/jpeg',0),(762,1,'2012-11-20 14:38:23','2012-11-20 14:38:23','GK Comments is a simple widget to display latest comments with user avatars:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/comments1.jpg\"><img class=\"aligncenter size-full wp-image-760\" title=\"comments1\" src=\"{$page_url}/wp-content/uploads/2012/11/comments1.jpg\" alt=\"\" width=\"317\" height=\"520\" /></a>\r\n\r\nThe configuration of the widget is really simple:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/comments2.jpg\"><img class=\"aligncenter size-full wp-image-759\" title=\"comments2\" src=\"{$page_url}/wp-content/uploads/2012/11/comments2.jpg\" alt=\"\" width=\"265\" height=\"247\" /></a>\r\n\r\nAs you can see, there are three important options:\r\n<ul>\r\n	<li><strong>Avatar size</strong> - this option is used to specify the size of the avatars displayed under each comment.</li>\r\n	<li><strong>Word count</strong> - this option specifies the maximal amount of words displayed in each comment item.</li>\r\n	<li><strong>Number of comments</strong> - it specifes the maximal amount of comments to display.</li>\r\n</ul>\r\nThe GK Comments widget uses a built-in WordPress cache system and it refreshes the cache after every comments operation.','GK Comments','','inherit','open','open','','758-revision-2','','','2012-11-20 14:38:23','2012-11-20 14:38:23','',758,'{$page_url}/uncategorized/758-revision-2/',0,'revision','',0),(763,1,'2012-11-20 14:38:40','2012-11-20 14:38:40','The Meet GavenrWP theme contains four built-in widgets which can be used for generating content on your website:\n<ul>\n	<li>GK Comments</li>\n	<li>GK Image Show</li>\n	<li>GK News Show Pro</li>\n	<li>GK Social Icons</li>\n</ul>','Built-in widgets','','inherit','open','open','','756-autosave','','','2012-11-20 14:38:40','2012-11-20 14:38:40','',756,'{$page_url}/uncategorized/756-autosave/',0,'revision','',0),(764,1,'2012-11-20 14:36:28','2012-11-20 14:36:28','The Startup theme contains four built-in widgets which can be used for generating content on your website:\r\n<ul>\r\n	<li>GK Comments</li>\r\n	<li>GK Image Show</li>\r\n	<li>GK News Show Pro</li>\r\n	<li>GK Social Icons</li>\r\n</ul>','Built-in widgets','','inherit','open','open','','756-revision-2','','','2012-11-20 14:36:28','2012-11-20 14:36:28','',756,'{$page_url}/uncategorized/756-revision-2/',0,'revision','',0),(765,1,'2012-11-20 14:41:13','2012-11-20 14:41:13','GK News Show Pro is a complex and powerful widget used for displaying posts with thumbnails and additional content like title, text and additional information.\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/nsp1.jpg\"><img class=\"aligncenter size-full wp-image-767\" title=\"nsp1\" src=\"{$page_url}/wp-content/uploads/2012/11/nsp1.jpg\" alt=\"\" width=\"800\" height=\"468\" /></a>\r\n\r\nThe configuration of the widget contains a lot of useful options:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/nsp2.jpeg\"><img class=\"aligncenter size-full wp-image-766\" title=\"nsp2\" src=\"{$page_url}/wp-content/uploads/2012/11/nsp2.jpeg\" alt=\"\" width=\"681\" height=\"623\" /></a>\r\n\r\nLet\'s start with describing the Data source section - this section contains all important options connected with selecting posts to display:\r\n<ul>\r\n	<li><strong>Data source</strong>- here, you may select one of the three values:\r\n<ul>\r\n	<li><strong>Latest posts</strong> - in this case, the text area under the selectbox should be empty - a widget will load the latest posts automatically</li>\r\n	<li><strong>Categories slugs</strong> - for this value the text area under the selectbox should contain the categories slugs separated with a comma i.e. news,blog,sport</li>\r\n	<li><strong>Articles slugs</strong> - similarly to the previous value - the text area under the selectbox should contain the articles slugs separated with a comma i.e. test-post-1,test-post-2</li>\r\n</ul>\r\n</li>\r\n	<li><strong>Order by </strong>- this option specifies the value used for the ordering and the ordering direction</li>\r\n	<li><strong>Offset</strong> - sometimes it is necessary to display the second post from a specific category - then this option should be set to 1. The default value for this option is 0 - then, the widget will display posts starting from the first post. This option can be used only for the \"Latest posts\" and \"Categories slugs\".</li>\r\n</ul>\r\nThe widget can display specific amount of articles and links under the articles. It is possible to specify the amount of pages, columns and rows used to display in the articles amount and links amount options.\r\n\r\nThe <strong>cache time</strong> option is very important - it specifies how often the widget content is generated - it is safe to set it for at least 30-60 minutes or even more if the page isn\'t often updated.\r\n\r\nWhen the articles or links are displayed on more than one page, then the pagination will be displayed - the type of the pagination can be specified in the <strong>Article pagination</strong> and <strong>Links pagination</strong> options.\r\n\r\nBoth for Articles and Links, you can specify the format of elements displayed. Every element can be disabled by the \"On/Off\" switchers.\r\n\r\nFor articles and links, a user can specify the maximal length of the title and text.\r\n\r\nImages displayed in the widget may have specific dimensions and position - the left position works only when the image is on the first position at the article - then it is displayed in the separated column. The article info block may contain few information about the article:\r\n<ul>\r\n	<li><strong>%DATE</strong> - the post date - format of the date can be specified in the \"Date format\" option.</li>\r\n	<li><strong>%CATEGORY</strong> - the post category name</li>\r\n	<li><strong>%AUTHOR</strong> - the post author name</li>\r\n	<li><strong>%COMMENTS</strong> - the post comments amount</li>\r\n</ul>\r\nSo, in order to display the post category and comments amount ,we will use the following format for the info block:\r\n\r\n[code]%CATEGORY %COMMENTS[/code]','GK News Show Pro','','publish','open','open','','gk-news-show-pro','','','2012-11-20 14:41:27','2012-11-20 14:41:27','',756,'{$page_url}/?page_id=765',0,'page','',0),(766,1,'2012-11-20 14:40:50','2012-11-20 14:40:50','','nsp2','','inherit','open','open','','nsp2','','','2012-11-20 14:40:50','2012-11-20 14:40:50','',765,'{$page_url}/wp-content/uploads/2012/11/nsp2.jpeg',0,'attachment','image/jpeg',0),(767,1,'2012-11-20 14:41:01','2012-11-20 14:41:01','','nsp1','','inherit','open','open','','nsp1','','','2012-11-20 14:41:01','2012-11-20 14:41:01','',765,'{$page_url}/wp-content/uploads/2012/11/nsp1.jpg',0,'attachment','image/jpeg',0),(768,1,'2012-11-20 14:39:11','2012-11-20 14:39:11','','GK News Show Pro','','inherit','open','open','','765-revision','','','2012-11-20 14:39:11','2012-11-20 14:39:11','',765,'{$page_url}/uncategorized/765-revision/',0,'revision','',0),(769,1,'2012-11-20 14:41:13','2012-11-20 14:41:13','GK News Show Pro is a complex and powerful widget used for displaying posts with thumbnails and additional content like title, text and additional information.\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/nsp1.jpg\"><img class=\"aligncenter size-full wp-image-767\" title=\"nsp1\" src=\"{$page_url}/wp-content/uploads/2012/11/nsp1.jpg\" alt=\"\" width=\"800\" height=\"468\" /></a>\r\n\r\nThe configuration of the widget contains a lot of useful options:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/nsp2.jpeg\"><img class=\"aligncenter size-full wp-image-766\" title=\"nsp2\" src=\"{$page_url}/wp-content/uploads/2012/11/nsp2.jpeg\" alt=\"\" width=\"681\" height=\"623\" /></a>\r\n\r\nLet\'s start with describing the Data source section - this section contains all important options connected with selecting posts to display:\r\n<ul>\r\n	<li><strong>Data source</strong>- here, you may select one of the three values:\r\n<ul>\r\n	<li><strong>Latest posts</strong> - in this case, the text area under the selectbox should be empty - a widget will load the latest posts automatically</li>\r\n	<li><strong>Categories slugs</strong> - for this value the text area under the selectbox should contain the categories slugs separated with a comma i.e. news,blog,sport</li>\r\n	<li><strong>Articles slugs</strong> - similarly to the previous value - the text area under the selectbox should contain the articles slugs separated with a comma i.e. test-post-1,test-post-2</li>\r\n</ul>\r\n</li>\r\n	<li><strong>Order by </strong>- this option specifies the value used for the ordering and the ordering direction</li>\r\n	<li><strong>Offset</strong> - sometimes it is necessary to display the second post from a specific category - then this option should be set to 1. The default value for this option is 0 - then, the widget will display posts starting from the first post. This option can be used only for the \"Latest posts\" and \"Categories slugs\".</li>\r\n</ul>\r\nThe widget can display specific amount of articles and links under the articles. It is possible to specify the amount of pages, columns and rows used to display in the articles amount and links amount options.\r\n\r\nThe <strong>cache time</strong> option is very important - it specifies how often the widget content is generated - it is safe to set it for at least 30-60 minutes or even more if the page isn\'t often updated.\r\n\r\nWhen the articles or links are displayed on more than one page, then the pagination will be displayed - the type of the pagination can be specified in the <strong>Article pagination</strong> and <strong>Links pagination</strong> options.\r\n\r\nBoth for Articles and Links, you can specify the format of elements displayed. Every element can be disabled by the \"On/Off\" switchers.\r\n\r\nFor articles and links, a user can specify the maximal length of the title and text.\r\n\r\nImages displayed in the widget may have specific dimensions and position - the left position works only when the image is on the first position at the article - then it is displayed in the separated column. The article info block may contain few information about the article:\r\n<ul>\r\n	<li><strong>%DATE</strong> - the post date - format of the date can be specified in the \"Date format\" option.</li>\r\n	<li><strong>%CATEGORY</strong> - the post category name</li>\r\n	<li><strong>%AUTHOR</strong> - the post author name</li>\r\n	<li><strong>%COMMENTS</strong> - the post comments amount</li>\r\n</ul>\r\nSo, in order to display the post category and comments amount ,we will use the following format for the info block:\r\n\r\n[code]%CATEGORY %COMMENTS[/code]','GK News Show Pro','','inherit','open','open','','765-revision-2','','','2012-11-20 14:41:13','2012-11-20 14:41:13','',765,'{$page_url}/uncategorized/765-revision-2/',0,'revision','',0),(770,1,'2012-11-20 14:43:13','2012-11-20 14:43:13','GK Social Icons is a simple widget used to display your social profile\'s URLs:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/social_icons.jpg\"><img class=\"aligncenter size-full wp-image-771\" title=\"social_icons\" src=\"{$page_url}/wp-content/uploads/2012/11/social_icons.jpg\" alt=\"\" width=\"66\" height=\"197\" /></a>\r\n\r\nThe configuration is very easy - you have to just provide the profile\'s URLs and... that\'s all:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/social1.jpg\"><img class=\"aligncenter size-full wp-image-772\" title=\"social1\" src=\"{$page_url}/wp-content/uploads/2012/11/social1.jpg\" alt=\"\" width=\"266\" height=\"306\" /></a>\r\n\r\nYou haven\'t to even provide the module title, because it isn\'t used in the widget structure. It can be used at the back-end to name few widget instances.','GK Social Icons','','publish','open','open','','gk-social-icons','','','2012-11-20 14:43:13','2012-11-20 14:43:13','',756,'{$page_url}/?page_id=770',0,'page','',0),(771,1,'2012-11-20 14:42:02','2012-11-20 14:42:02','','social_icons','','inherit','open','open','','social_icons','','','2012-11-20 14:42:02','2012-11-20 14:42:02','',770,'{$page_url}/wp-content/uploads/2012/11/social_icons.jpg',0,'attachment','image/jpeg',0),(772,1,'2012-11-20 14:42:54','2012-11-20 14:42:54','','social1','','inherit','open','open','','social1','','','2012-11-20 14:42:54','2012-11-20 14:42:54','',770,'{$page_url}/wp-content/uploads/2012/11/social1.jpg',0,'attachment','image/jpeg',0),(773,1,'2012-11-20 14:42:40','2012-11-20 14:42:40','GK Social Icons is a simple widget used to display your social profile\'s URLs:\n\n&nbsp;\n\n<a href=\"{$page_url}/wp-content/uploads/2012/11/social_icons.jpg\"><img class=\"aligncenter size-full wp-image-771\" title=\"social_icons\" src=\"{$page_url}/wp-content/uploads/2012/11/social_icons.jpg\" alt=\"\" width=\"66\" height=\"197\" /></a>\n\nThe configuration is very easy - you have to just provide the profile\'s URLs and... that\'s all:\n\n&nbsp;\n\n&nbsp;\n\nYou haven\'t to even provide the module title, because it isn\'t used in the widget structure. It can be used at the back-end to name few widget instances.','GK Social Icons','','inherit','open','open','','770-revision','','','2012-11-20 14:42:40','2012-11-20 14:42:40','',770,'{$page_url}/uncategorized/770-revision/',0,'revision','',0),(774,1,'2012-11-20 14:45:58','2012-11-20 14:45:58','GK Tabs is a simple widget which can be used for displaying other widgets in the tabs:\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/tabs1.jpg\"><img class=\"aligncenter size-full wp-image-777\" title=\"tabs1\" src=\"{$page_url}/wp-content/uploads/2012/11/tabs1.jpg\" alt=\"\" width=\"316\" height=\"288\" /></a>\r\n\r\nThe configuration of the widget, similarly to the GK Comments widget, is really simple:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/tabs2.jpg\"><img class=\"aligncenter size-full wp-image-776\" title=\"tabs2\" src=\"{$page_url}/wp-content/uploads/2012/11/tabs2.jpg\" alt=\"\" width=\"263\" height=\"310\" /></a>\r\n\r\nThe most important option is the <strong>Tabs source</strong> - this option specifies the sidebar used as the data source of the widget. Especially for the GK Tabs widget, we have created three special widget areas - Tab I, Tab II and Tab III - these widget areas don\'t exist on the theme and they can be used in the GK Tabs widget to avoid problems with the duplicated widgets.\r\n\r\nTo create tabs, a user must drag some widgets to the specified in the GK Tabs widget sidebar. The titles of these widgets will be used as the tabs titles, the order of the widgets in the sidebar is also important - it will be used in the GK Tabs widget.\r\n\r\nSo, for example, in order to achieve the GK Tabs widget layout as in the first screenshot, you have to put the widgets on the Tab I sidebar as following:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/tabs3.jpg\"><img class=\"aligncenter size-full wp-image-775\" title=\"tabs3\" src=\"{$page_url}/wp-content/uploads/2012/11/tabs3.jpg\" alt=\"\" width=\"299\" height=\"260\" /></a>\r\n\r\nThe other options are strictly connected with the widget interface:\r\n<ul>\r\n	<li><strong>Tabs activator event</strong> - it specifies the event used to activate the tab - it can be a hover or a click event.</li>\r\n	<li><strong>Auto animation</strong> - the GK Tabs widget can autoanimate the tabs when this option is enabled. Then, the time between tabs animations is defined in the animation interval option.</li>\r\n	<li><strong>Animation speed</strong> - time of the transition between the tabs - defined in miliseconds.</li>\r\n	<li><strong>Animation interval</strong> - time for the autoanimation option - defined in miliseconds</li>\r\n</ul>\r\nThe GK Tabs widget has no internal cache system but if there are widgets displayed in the GK Tabs widget then there will be no problems with caching the widget content.','GK Tabs','','publish','open','open','','gk-tabs','','','2012-11-20 14:46:04','2012-11-20 14:46:04','',756,'{$page_url}/?page_id=774',0,'page','',0),(775,1,'2012-11-20 14:44:30','2012-11-20 14:44:30','','tabs3','','inherit','open','open','','tabs3','','','2012-11-20 14:44:30','2012-11-20 14:44:30','',774,'{$page_url}/wp-content/uploads/2012/11/tabs3.jpg',0,'attachment','image/jpeg',0),(776,1,'2012-11-20 14:45:06','2012-11-20 14:45:06','','tabs2','','inherit','open','open','','tabs2','','','2012-11-20 14:45:06','2012-11-20 14:45:06','',774,'{$page_url}/wp-content/uploads/2012/11/tabs2.jpg',0,'attachment','image/jpeg',0),(777,1,'2012-11-20 14:45:41','2012-11-20 14:45:41','','tabs1','','inherit','open','open','','tabs1','','','2012-11-20 14:45:41','2012-11-20 14:45:41','',774,'{$page_url}/wp-content/uploads/2012/11/tabs1.jpg',0,'attachment','image/jpeg',0),(778,1,'2012-11-20 14:44:11','2012-11-20 14:44:11','','GK Tabs','','inherit','open','open','','774-revision','','','2012-11-20 14:44:11','2012-11-20 14:44:11','',774,'{$page_url}/uncategorized/774-revision/',0,'revision','',0),(779,1,'2012-11-20 14:45:58','2012-11-20 14:45:58','GK Tabs is a simple widget which can be used for displaying other widgets in the tabs:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/tabs1.jpg\"><img class=\"aligncenter size-full wp-image-777\" title=\"tabs1\" src=\"{$page_url}/wp-content/uploads/2012/11/tabs1.jpg\" alt=\"\" width=\"316\" height=\"288\" /></a>\r\n\r\nThe configuration of the widget, similarly to the GK Comments widget, is really simple:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/tabs2.jpg\"><img class=\"aligncenter size-full wp-image-776\" title=\"tabs2\" src=\"{$page_url}/wp-content/uploads/2012/11/tabs2.jpg\" alt=\"\" width=\"263\" height=\"310\" /></a>\r\n\r\nThe most important option is the <strong>Tabs source</strong> - this option specifies the sidebar used as the data source of the widget. Especially for the GK Tabs widget, we have created three special widget areas - Tab I, Tab II and Tab III - these widget areas don\'t exist on the theme and they can be used in the GK Tabs widget to avoid problems with the duplicated widgets.\r\n\r\nTo create tabs, a user must drag some widgets to the specified in the GK Tabs widget sidebar. The titles of these widgets will be used as the tabs titles, the order of the widgets in the sidebar is also important - it will be used in the GK Tabs widget.\r\n\r\nSo, for example, in order to achieve the GK Tabs widget layout as in the first screenshot, you have to put the widgets on the Tab I sidebar as following:\r\n\r\n&nbsp;\r\n\r\n<a href=\"{$page_url}/wp-content/uploads/2012/11/tabs3.jpg\"><img class=\"aligncenter size-full wp-image-775\" title=\"tabs3\" src=\"{$page_url}/wp-content/uploads/2012/11/tabs3.jpg\" alt=\"\" width=\"299\" height=\"260\" /></a>\r\n\r\nThe other options are strictly connected with the widget interface:\r\n<ul>\r\n	<li><strong>Tabs activator event</strong> - it specifies the event used to activate the tab - it can be a hover or a click event.</li>\r\n	<li><strong>Auto animation</strong> - the GK Tabs widget can autoanimate the tabs when this option is enabled. Then, the time between tabs animations is defined in the animation interval option.</li>\r\n	<li><strong>Animation speed</strong> - time of the transition between the tabs - defined in miliseconds.</li>\r\n	<li><strong>Animation interval</strong> - time for the autoanimation option - defined in miliseconds</li>\r\n</ul>\r\nThe GK Tabs widget has no internal cache system but if there are widgets displayed in the GK Tabs widget then there will be no problems with caching the widget content.','GK Tabs','','inherit','open','open','','774-revision-2','','','2012-11-20 14:45:58','2012-11-20 14:45:58','',774,'{$page_url}/uncategorized/774-revision-2/',0,'revision','',0),(780,1,'2012-11-20 14:47:03','2012-11-20 14:47:03',' ','','','publish','open','open','','780','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',0,'{$page_url}/?p=780',14,'nav_menu_item','',0),(781,1,'2012-11-20 14:47:03','2012-11-20 14:47:03',' ','','','publish','open','open','','781','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',756,'{$page_url}/?p=781',18,'nav_menu_item','',0),(782,1,'2012-11-20 14:47:03','2012-11-20 14:47:03',' ','','','publish','open','open','','782','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',756,'{$page_url}/?p=782',17,'nav_menu_item','',0),(783,1,'2012-11-20 14:47:03','2012-11-20 14:47:03',' ','','','publish','open','open','','783','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',756,'{$page_url}/?p=783',16,'nav_menu_item','',0),(784,1,'2012-11-20 14:47:03','2012-11-20 14:47:03',' ','','','publish','open','open','','784','','','2012-11-20 14:47:03','2012-11-20 14:47:03','',756,'{$page_url}/?p=784',15,'nav_menu_item','',0),(785,1,'2012-11-20 14:38:42','2012-11-20 14:38:42','The Meet GavenrWP theme contains four built-in widgets which can be used for generating content on your website:\r\n<ul>\r\n	<li>GK Comments</li>\r\n	<li>GK Image Show</li>\r\n	<li>GK News Show Pro</li>\r\n	<li>GK Social Icons</li>\r\n</ul>','Built-in widgets','','inherit','open','open','','756-revision-3','','','2012-11-20 14:38:42','2012-11-20 14:38:42','',756,'{$page_url}/uncategorized/756-revision-3/',0,'revision','',0),(786,1,'2012-08-11 07:49:20','2012-08-11 07:49:20','This is an example of the Link Post Format:\r\n\r\n<a href=\"http://www.gavick.com\" target=\"_blank\">GavickPro Website</a>\r\n\r\n<a href=\"http://www.gavick.com/documentation\" target=\"_blank\">GavickPro Documentation</a>','Link Post','','inherit','open','open','','599-revision-2','','','2012-08-11 07:49:20','2012-08-11 07:49:20','',599,'{$page_url}/uncategorized/599-revision-2/',0,'revision','',0),(787,1,'2012-11-21 17:49:08','2012-11-21 17:49:08','This is an example of the Link Post Format:\r\n\r\n<a href=\"http://www.gavick.com\" target=\"_blank\">GavickPro Website</a>\r\n\r\n<a href=\"http://www.gavick.com/documentation\" target=\"_blank\">GavickPro Documentation</a>','Link Post','','inherit','open','open','','599-revision-3','','','2012-11-21 17:49:08','2012-11-21 17:49:08','',599,'{$page_url}/uncategorized/599-revision-3/',0,'revision','',0),(792,1,'2012-12-18 09:57:15','2012-12-18 09:57:15','testing','test','','inherit','open','open','','791-revision','','','2012-12-18 09:57:15','2012-12-18 09:57:15','',791,'{$page_url}/uncategorized/791-revision/',0,'revision','',0),(816,1,'2013-02-24 21:43:27','2013-02-24 21:43:27','This is an example of the Image Post Format:\r\n\r\n[caption id=\"attachment_610\" align=\"aligncenter\" width=\"313\"]<a href=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\"><img class=\"size-full wp-image-610\" title=\"Web Responsive Design\" alt=\"Web Responsive Design\" src=\"{$page_url}/wp-content/uploads/2012/08/responsive.png\" width=\"313\" height=\"167\" /></a> Web Responsive Design is fully supported by the GavernWP Framework[/caption]','Image Post','','inherit','open','open','','609-revision-2','','','2013-02-24 21:43:27','2013-02-24 21:43:27','',609,'{$page_url}/2013/02/24/609-revision-2/',0,'revision','',0),(800,1,'2012-12-23 23:16:05','2012-12-23 23:16:05','This is an example of the Aside Post Format, which can be used to show less important posts.\r\n\r\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n\r\n<!--more-->Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Curabitur blandit tempus porttitor.','Aside Post','','inherit','open','open','','607-revision-3','','','2012-12-23 23:16:05','2012-12-23 23:16:05','',607,'{$page_url}/uncategorized/607-revision-3/',0,'revision','',0),(801,1,'2012-08-30 18:58:34','2012-08-30 18:58:34','It is an example page with archive links.','Archive Page','','inherit','open','open','','107-revision-2','','','2012-08-30 18:58:34','2012-08-30 18:58:34','',107,'{$page_url}/uncategorized/107-revision-2/',0,'revision','',0),(812,1,'2013-02-12 21:07:30','2013-02-12 21:07:30','This post contains an example of the Custom Post Fields.\r\n\r\n&nbsp;','Custom Post Fields','','inherit','open','open','','739-revision-4','','','2013-02-12 21:07:30','2013-02-12 21:07:30','',739,'{$page_url}/?p=812',0,'revision','',0);







